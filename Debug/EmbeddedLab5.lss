
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001664  000016f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800116  00800116  0000170e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001454  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0c  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000851  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c5  00000000  00000000  0000426c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e76  00000000  00000000  00004831  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000056a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_18>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_20>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_24>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     10b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     11b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     12b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     13b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     14b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     15b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     16b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     17b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     18b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     19b:	3d 27 00                                            ='.

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d8 e0       	ldi	r29, 0x08	; 8
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	e4 e6       	ldi	r30, 0x64	; 100
     1b2:	f6 e1       	ldi	r31, 0x16	; 22
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a6 31       	cpi	r26, 0x16	; 22
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	a6 e1       	ldi	r26, 0x16	; 22
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a5 3a       	cpi	r26, 0xA5	; 165
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 c2 01 	call	0x384	; 0x384 <main>
     1d4:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <setup>:
#define MAX518_Slave 0b01000000
#define DAC0 0x00
#define DAC1 0x01

void setup(){
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
     1dc:	ea e7       	ldi	r30, 0x7A	; 122
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	87 68       	ori	r24, 0x87	; 135
     1e4:	80 83       	st	Z, r24
	ADMUX = 0b00000000;		// clear ADMUX for ADC0 pin 
     1e6:	ec e7       	ldi	r30, 0x7C	; 124
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);	
     1ec:	80 81       	ld	r24, Z
     1ee:	80 64       	ori	r24, 0x40	; 64
     1f0:	80 83       	st	Z, r24
     1f2:	08 95       	ret

000001f4 <get_adc_value>:
			read_command(uart_get_command());
		}
	}
}

char * get_adc_value(){
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
	ADCSRA |= (1<<ADSC);      // enable a single conversion
     1fc:	ea e7       	ldi	r30, 0x7A	; 122
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	80 64       	ori	r24, 0x40	; 64
     204:	80 83       	st	Z, r24
	
	while (!(ADCSRA & (1<<ADIF))); // wait for the conversion to be completed		
     206:	80 81       	ld	r24, Z
     208:	84 ff       	sbrs	r24, 4
     20a:	fd cf       	rjmp	.-6      	; 0x206 <get_adc_value+0x12>
	
	float result = (ADC * 5.0)/1024;	// convert to float 
     20c:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     210:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
	char * buffer = (char* ) malloc(6 * sizeof(char));	
     214:	86 e0       	ldi	r24, 0x06	; 6
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 9b 05 	call	0xb36	; 0xb36 <malloc>
     21c:	ec 01       	movw	r28, r24
	dtostrf(result, 3, 2, buffer); // convert float to string 
     21e:	b8 01       	movw	r22, r16
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatunsisf>
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	40 ea       	ldi	r20, 0xA0	; 160
     22e:	50 e4       	ldi	r21, 0x40	; 64
     230:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3>
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e8       	ldi	r20, 0x80	; 128
     23a:	5a e3       	ldi	r21, 0x3A	; 58
     23c:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3>
     240:	8e 01       	movw	r16, r28
     242:	22 e0       	ldi	r18, 0x02	; 2
     244:	43 e0       	ldi	r20, 0x03	; 3
     246:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <dtostrf>

	ADCSRA |= (1<<ADIF);		// reset AD complete flag for next conversion. 
     24a:	ea e7       	ldi	r30, 0x7A	; 122
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	80 61       	ori	r24, 0x10	; 16
     252:	80 83       	st	Z, r24
	
	return buffer; 
}
     254:	ce 01       	movw	r24, r28
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	08 95       	ret

00000260 <print_adc_value>:

void print_adc_value(char * buffer){
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	ec 01       	movw	r28, r24
	uart_send_string("V = ");
     266:	88 e0       	ldi	r24, 0x08	; 8
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 a4 02 	call	0x548	; 0x548 <uart_send_string>
	uart_send_string(buffer);
     26e:	ce 01       	movw	r24, r28
     270:	0e 94 a4 02 	call	0x548	; 0x548 <uart_send_string>
	uart_send_byte('\n');
     274:	8a e0       	ldi	r24, 0x0A	; 10
     276:	0e 94 9b 02 	call	0x536	; 0x536 <uart_send_byte>
	
	free(buffer); 
     27a:	ce 01       	movw	r24, r28
     27c:	0e 94 33 06 	call	0xc66	; 0xc66 <free>
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <set_dac_output>:
	}
	
	free(command);
}

void set_dac_output(uint8_t dac, float voltage){
     286:	08 95       	ret

00000288 <gen_wave_form>:
	
}

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
     288:	cf 93       	push	r28
     28a:	c4 2f       	mov	r28, r20
	uart_send_byte('W');
     28c:	87 e5       	ldi	r24, 0x57	; 87
     28e:	0e 94 9b 02 	call	0x536	; 0x536 <uart_send_byte>
	// set the frequency of I2C
	uint8_t * wave;
	int i = 0; 
	while( i < cycles){
     292:	4c 2f       	mov	r20, r28
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	14 16       	cp	r1, r20
     298:	15 06       	cpc	r1, r21
     29a:	4c f0       	brlt	.+18     	; 0x2ae <gen_wave_form+0x26>
     29c:	0d c0       	rjmp	.+26     	; 0x2b8 <gen_wave_form+0x30>
     29e:	01 97       	sbiw	r24, 0x01	; 1
		for(int i =0; i < 64; ++i){
     2a0:	f1 f7       	brne	.-4      	; 0x29e <gen_wave_form+0x16>
			set_dac_output(dac, wave[i]);
		}
		++i;
     2a2:	2f 5f       	subi	r18, 0xFF	; 255
     2a4:	3f 4f       	sbci	r19, 0xFF	; 255
void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
	uart_send_byte('W');
	// set the frequency of I2C
	uint8_t * wave;
	int i = 0; 
	while( i < cycles){
     2a6:	24 17       	cp	r18, r20
     2a8:	35 07       	cpc	r19, r21
     2aa:	19 f4       	brne	.+6      	; 0x2b2 <gen_wave_form+0x2a>
     2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <gen_wave_form+0x30>
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0

void set_dac_output(uint8_t dac, float voltage){
	
}

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
     2b2:	80 e4       	ldi	r24, 0x40	; 64
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	f3 cf       	rjmp	.-26     	; 0x29e <gen_wave_form+0x16>
		for(int i =0; i < 64; ++i){
			set_dac_output(dac, wave[i]);
		}
		++i;
	}
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <read_command>:
	uart_send_string(buffer);
	uart_send_byte('\n');
	
	free(buffer); 
}
void read_command(char * command) {
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <read_command+0xe>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	8c 01       	movw	r16, r24
	char delim[] = ",";
     2d0:	8c e2       	ldi	r24, 0x2C	; 44
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	9a 83       	std	Y+2, r25	; 0x02
     2d6:	89 83       	std	Y+1, r24	; 0x01

	char * token = strtok(command, delim);
     2d8:	be 01       	movw	r22, r28
     2da:	6f 5f       	subi	r22, 0xFF	; 255
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	c8 01       	movw	r24, r16
     2e0:	0e 94 de 06 	call	0xdbc	; 0xdbc <strtok>
	if(token[1] == 'G'){
     2e4:	fc 01       	movw	r30, r24
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
     2e8:	87 34       	cpi	r24, 0x47	; 71
     2ea:	29 f4       	brne	.+10     	; 0x2f6 <read_command+0x3a>
		print_adc_value(get_adc_value());
     2ec:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <get_adc_value>
     2f0:	0e 94 30 01 	call	0x260	; 0x260 <print_adc_value>
     2f4:	3b c0       	rjmp	.+118    	; 0x36c <read_command+0xb0>
	} else if(token[1] == 'W') {
     2f6:	87 35       	cpi	r24, 0x57	; 87
     2f8:	19 f5       	brne	.+70     	; 0x340 <read_command+0x84>
		uint8_t dac = atoi(strtok(NULL, delim));
     2fa:	be 01       	movw	r22, r28
     2fc:	6f 5f       	subi	r22, 0xFF	; 255
     2fe:	7f 4f       	sbci	r23, 0xFF	; 255
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 de 06 	call	0xdbc	; 0xdbc <strtok>
     308:	0e 94 c0 06 	call	0xd80	; 0xd80 <atoi>
     30c:	f8 2e       	mov	r15, r24
		uint8_t freq = atoi(strtok(NULL, delim));
     30e:	be 01       	movw	r22, r28
     310:	6f 5f       	subi	r22, 0xFF	; 255
     312:	7f 4f       	sbci	r23, 0xFF	; 255
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 de 06 	call	0xdbc	; 0xdbc <strtok>
     31c:	0e 94 c0 06 	call	0xd80	; 0xd80 <atoi>
     320:	e8 2e       	mov	r14, r24
		uint8_t cycles = atoi(strtok(NULL, delim));
     322:	be 01       	movw	r22, r28
     324:	6f 5f       	subi	r22, 0xFF	; 255
     326:	7f 4f       	sbci	r23, 0xFF	; 255
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 de 06 	call	0xdbc	; 0xdbc <strtok>
     330:	0e 94 c0 06 	call	0xd80	; 0xd80 <atoi>
	
		gen_wave_form(dac, freq, cycles);
     334:	48 2f       	mov	r20, r24
     336:	6e 2d       	mov	r22, r14
     338:	8f 2d       	mov	r24, r15
     33a:	0e 94 44 01 	call	0x288	; 0x288 <gen_wave_form>
     33e:	16 c0       	rjmp	.+44     	; 0x36c <read_command+0xb0>
	} else if(token[1] == 'S') {
     340:	83 35       	cpi	r24, 0x53	; 83
     342:	89 f4       	brne	.+34     	; 0x366 <read_command+0xaa>
		uint8_t dac = atoi(strtok(NULL, delim));
     344:	be 01       	movw	r22, r28
     346:	6f 5f       	subi	r22, 0xFF	; 255
     348:	7f 4f       	sbci	r23, 0xFF	; 255
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 de 06 	call	0xdbc	; 0xdbc <strtok>
		float voltage = atof(strtok(NULL, delim));
     352:	be 01       	movw	r22, r28
     354:	6f 5f       	subi	r22, 0xFF	; 255
     356:	7f 4f       	sbci	r23, 0xFF	; 255
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 de 06 	call	0xdbc	; 0xdbc <strtok>
     360:	0e 94 bc 06 	call	0xd78	; 0xd78 <atof>
     364:	03 c0       	rjmp	.+6      	; 0x36c <read_command+0xb0>
		set_dac_output(dac, voltage);
	} else {
		uart_send_byte('X');
     366:	88 e5       	ldi	r24, 0x58	; 88
     368:	0e 94 9b 02 	call	0x536	; 0x536 <uart_send_byte>
	}
	
	free(command);
     36c:	c8 01       	movw	r24, r16
     36e:	0e 94 33 06 	call	0xc66	; 0xc66 <free>
}
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	08 95       	ret

00000384 <main>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
	ADMUX = 0b00000000;		// clear ADMUX for ADC0 pin 
	ADMUX |= (1<<REFS0);	
}

int main(void) {
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	2a 97       	sbiw	r28, 0x0a	; 10
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	f8 94       	cli
     392:	de bf       	out	0x3e, r29	; 62
     394:	0f be       	out	0x3f, r0	; 63
     396:	cd bf       	out	0x3d, r28	; 61
	char str[] = "Started!";
     398:	89 e0       	ldi	r24, 0x09	; 9
     39a:	ed e0       	ldi	r30, 0x0D	; 13
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	de 01       	movw	r26, r28
     3a0:	11 96       	adiw	r26, 0x01	; 1
     3a2:	01 90       	ld	r0, Z+
     3a4:	0d 92       	st	X+, r0
     3a6:	8a 95       	dec	r24
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x1e>
	uint8_t voltage = 0;
	uint32_t speed = 100000;
	uint32_t baud = 9600; 	 
	char * adc; 
	uint8_t err = 0; 
	setup();
     3aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setup>
	twi_init(speed);
     3ae:	60 ea       	ldi	r22, 0xA0	; 160
     3b0:	76 e8       	ldi	r23, 0x86	; 134
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 44 04 	call	0x888	; 0x888 <twi_init>
	uart_init(baud);
     3ba:	60 e8       	ldi	r22, 0x80	; 128
     3bc:	75 e2       	ldi	r23, 0x25	; 37
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <uart_init>

	voltage = 100;
	uint8_t data[1] = {voltage};
     3c6:	84 e6       	ldi	r24, 0x64	; 100
     3c8:	8a 87       	std	Y+10, r24	; 0x0a
	sei();
     3ca:	78 94       	sei
	adc = get_adc_value();  // initialize adc for faster future computations. 
     3cc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <get_adc_value>
	
	uart_send_string(str);
     3d0:	ce 01       	movw	r24, r28
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	0e 94 a4 02 	call	0x548	; 0x548 <uart_send_string>
	uart_send_byte('\n');	
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	0e 94 9b 02 	call	0x536	; 0x536 <uart_send_byte>
	err = twi_wire(MAX518_Slave, DAC0, data, sizeof(data));
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	ae 01       	movw	r20, r28
     3e4:	46 5f       	subi	r20, 0xF6	; 246
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	80 e4       	ldi	r24, 0x40	; 64
     3ec:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <twi_wire>
	adc = get_adc_value();
     3f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <get_adc_value>
	print_adc_value(adc);
     3f4:	0e 94 30 01 	call	0x260	; 0x260 <print_adc_value>
	
	while (1) {	
		if(uart_string_complete()){
     3f8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_string_complete>
     3fc:	88 23       	and	r24, r24
     3fe:	e1 f3       	breq	.-8      	; 0x3f8 <main+0x74>
			read_command(uart_get_command());
     400:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <uart_get_command>
     404:	0e 94 5e 01 	call	0x2bc	; 0x2bc <read_command>
     408:	f7 cf       	rjmp	.-18     	; 0x3f8 <main+0x74>

0000040a <__vector_18>:

volatile static uint8_t uart_tx_busy = 1;
volatile static uint8_t uart_fetch_complete = 0;		// when the buffer has reached a '\n' char flag set to 1. once the string has been read from flag set to 0. 
UARTBuffer uart_buffer; 

ISR(USART_RX_vect){
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	2f 93       	push	r18
     416:	8f 93       	push	r24
     418:	9f 93       	push	r25
     41a:	af 93       	push	r26
     41c:	bf 93       	push	r27
     41e:	ef 93       	push	r30
     420:	ff 93       	push	r31
	if (UDR0 == '\n' || UDR0 == '\r') { // if a newline or carriage return is received
     422:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     426:	8a 30       	cpi	r24, 0x0A	; 10
     428:	21 f0       	breq	.+8      	; 0x432 <__vector_18+0x28>
     42a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     42e:	8d 30       	cpi	r24, 0x0D	; 13
     430:	51 f4       	brne	.+20     	; 0x446 <__vector_18+0x3c>
		if(uart_get_buffer_size() > 0){
     432:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <uart_buffer+0x80>
     436:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <uart_buffer+0x81>
     43a:	89 2b       	or	r24, r25
     43c:	c1 f0       	breq	.+48     	; 0x46e <__vector_18+0x64>
			uart_fetch_complete = 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
     444:	14 c0       	rjmp	.+40     	; 0x46e <__vector_18+0x64>
		}
	} else {
		uart_buffer.buffer[uart_buffer.head] = UDR0;			 // read in the UDR0 register
     446:	eb e9       	ldi	r30, 0x9B	; 155
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	80 81       	ld	r24, Z
     44c:	91 81       	ldd	r25, Z+1	; 0x01
     44e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     452:	dc 01       	movw	r26, r24
     454:	a7 5e       	subi	r26, 0xE7	; 231
     456:	be 4f       	sbci	r27, 0xFE	; 254
     458:	2c 93       	st	X, r18
		uart_buffer.head++;
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	91 83       	std	Z+1, r25	; 0x01
     45e:	80 83       	st	Z, r24
		uart_buffer.size++;
     460:	e9 e9       	ldi	r30, 0x99	; 153
     462:	f1 e0       	ldi	r31, 0x01	; 1
     464:	80 81       	ld	r24, Z
     466:	91 81       	ldd	r25, Z+1	; 0x01
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	91 83       	std	Z+1, r25	; 0x01
     46c:	80 83       	st	Z, r24
	}
	
	if (uart_buffer.head >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
     46e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <uart_buffer+0x82>
     472:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <uart_buffer+0x83>
     476:	80 38       	cpi	r24, 0x80	; 128
     478:	91 05       	cpc	r25, r1
     47a:	20 f0       	brcs	.+8      	; 0x484 <__vector_18+0x7a>
		uart_buffer.head = 0;
     47c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <uart_buffer+0x83>
     480:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <uart_buffer+0x82>
	}
	
}
     484:	ff 91       	pop	r31
     486:	ef 91       	pop	r30
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	2f 91       	pop	r18
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_20>:

ISR(USART_TX_vect){
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	8f 93       	push	r24
	uart_tx_busy = 1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     4ae:	8f 91       	pop	r24
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <uart_string_complete>:

uint8_t uart_string_complete(){
	return uart_fetch_complete;
     4ba:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
}
     4be:	08 95       	ret

000004c0 <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
     4c0:	dc 01       	movw	r26, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	aa 1f       	adc	r26, r26
     4ca:	bb 1f       	adc	r27, r27
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	aa 1f       	adc	r26, r26
     4d2:	bb 1f       	adc	r27, r27
     4d4:	9c 01       	movw	r18, r24
     4d6:	ad 01       	movw	r20, r26
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	44 1f       	adc	r20, r20
     4de:	55 1f       	adc	r21, r21
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	44 1f       	adc	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	74 e2       	ldi	r23, 0x24	; 36
     4ec:	84 ef       	ldi	r24, 0xF4	; 244
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodsi4>
     4f4:	ba 01       	movw	r22, r20
     4f6:	a9 01       	movw	r20, r18
     4f8:	41 50       	subi	r20, 0x01	; 1
     4fa:	51 09       	sbc	r21, r1
     4fc:	61 09       	sbc	r22, r1
     4fe:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
     500:	db 01       	movw	r26, r22
     502:	ca 01       	movw	r24, r20
     504:	88 27       	eor	r24, r24
     506:	9f 70       	andi	r25, 0x0F	; 15
     508:	aa 27       	eor	r26, r26
     50a:	bb 27       	eor	r27, r27
     50c:	89 2f       	mov	r24, r25
     50e:	9a 2f       	mov	r25, r26
     510:	ab 2f       	mov	r26, r27
     512:	bb 27       	eor	r27, r27
     514:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
     518:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
     51c:	e1 ec       	ldi	r30, 0xC1	; 193
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	88 6d       	ori	r24, 0xD8	; 216
     524:	80 83       	st	Z, r24
	
	/* Initialize Objects */
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};		
     526:	e9 e1       	ldi	r30, 0x19	; 25
     528:	f1 e0       	ldi	r31, 0x01	; 1
     52a:	86 e8       	ldi	r24, 0x86	; 134
     52c:	df 01       	movw	r26, r30
     52e:	1d 92       	st	X+, r1
     530:	8a 95       	dec	r24
     532:	e9 f7       	brne	.-6      	; 0x52e <uart_init+0x6e>
     534:	08 95       	ret

00000536 <uart_send_byte>:
}


void uart_send_byte(char data){
	while(uart_tx_busy == 0); // while UART is not transmitting
     536:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     53a:	99 23       	and	r25, r25
     53c:	e1 f3       	breq	.-8      	; 0x536 <uart_send_byte>
	
	uart_tx_busy = 0; 
     53e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = data;				// load byte passed into the function to the uart buffer
     542:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     546:	08 95       	ret

00000548 <uart_send_string>:
}

void uart_send_string(char *arr) {
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
     54e:	89 91       	ld	r24, Y+
     550:	0e 94 9b 02 	call	0x536	; 0x536 <uart_send_byte>
		i++;
	} while(arr[i] != '\0');
     554:	88 81       	ld	r24, Y
     556:	81 11       	cpse	r24, r1
     558:	fa cf       	rjmp	.-12     	; 0x54e <uart_send_string+0x6>
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <uart_get_buffer_size>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
     560:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <uart_buffer+0x80>
     564:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <uart_buffer+0x81>
     568:	08 95       	ret

0000056a <uart_read_buffer>:
	command[i] = '\0';
	return command; 
}

uint8_t uart_read_buffer(void){
	uint8_t data = uart_buffer.buffer[uart_buffer.tail];		// pull the data out of the buffer at the tail.
     56a:	ed e9       	ldi	r30, 0x9D	; 157
     56c:	f1 e0       	ldi	r31, 0x01	; 1
     56e:	20 81       	ld	r18, Z
     570:	31 81       	ldd	r19, Z+1	; 0x01
     572:	d9 01       	movw	r26, r18
     574:	a7 5e       	subi	r26, 0xE7	; 231
     576:	be 4f       	sbci	r27, 0xFE	; 254
     578:	8c 91       	ld	r24, X
	uart_buffer.tail++;								// increment the position of the tail
     57a:	2f 5f       	subi	r18, 0xFF	; 255
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
     57e:	31 83       	std	Z+1, r19	; 0x01
     580:	20 83       	st	Z, r18
	uart_buffer.size--; 							// decrement the size of the queue.
     582:	e9 e9       	ldi	r30, 0x99	; 153
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	40 81       	ld	r20, Z
     588:	51 81       	ldd	r21, Z+1	; 0x01
     58a:	41 50       	subi	r20, 0x01	; 1
     58c:	51 09       	sbc	r21, r1
     58e:	51 83       	std	Z+1, r21	; 0x01
     590:	40 83       	st	Z, r20

	if(uart_buffer.tail >= MAX_BUFFER_SIZE){		// reading has gone past the buffers size wrap the tail to the start.
     592:	20 38       	cpi	r18, 0x80	; 128
     594:	31 05       	cpc	r19, r1
     596:	20 f0       	brcs	.+8      	; 0x5a0 <uart_read_buffer+0x36>
		uart_buffer.tail = 0;
     598:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <uart_buffer+0x85>
     59c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <uart_buffer+0x84>
	}
	
	return data;
     5a0:	08 95       	ret

000005a2 <uart_get_command>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}

char * uart_get_command(void) {
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
	uart_fetch_complete = 0; 
     5b0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
		i++;
	} while(arr[i] != '\0');
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     5b4:	00 91 99 01 	lds	r16, 0x0199	; 0x800199 <uart_buffer+0x80>
     5b8:	10 91 9a 01 	lds	r17, 0x019A	; 0x80019a <uart_buffer+0x81>
}

char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
     5bc:	c8 01       	movw	r24, r16
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	0e 94 9b 05 	call	0xb36	; 0xb36 <malloc>
     5c4:	7c 01       	movw	r14, r24
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     5c6:	01 2b       	or	r16, r17
     5c8:	a9 f0       	breq	.+42     	; 0x5f4 <uart_get_command+0x52>
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
		i++;
	} while(arr[i] != '\0');
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     5cc:	0f 2e       	mov	r0, r31
     5ce:	f9 e9       	ldi	r31, 0x99	; 153
     5d0:	cf 2e       	mov	r12, r31
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	df 2e       	mov	r13, r31
     5d6:	f0 2d       	mov	r31, r0
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
     5d8:	87 01       	movw	r16, r14
     5da:	0c 0f       	add	r16, r28
     5dc:	11 1d       	adc	r17, r1
     5de:	0e 94 b5 02 	call	0x56a	; 0x56a <uart_read_buffer>
     5e2:	f8 01       	movw	r30, r16
     5e4:	80 83       	st	Z, r24
		++i; 
     5e6:	cf 5f       	subi	r28, 0xFF	; 255
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     5e8:	f6 01       	movw	r30, r12
     5ea:	80 81       	ld	r24, Z
     5ec:	91 81       	ldd	r25, Z+1	; 0x01
     5ee:	89 2b       	or	r24, r25
     5f0:	99 f7       	brne	.-26     	; 0x5d8 <uart_get_command+0x36>
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <uart_get_command+0x54>

char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
     5f4:	c0 e0       	ldi	r28, 0x00	; 0
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
		++i; 
	}
	command[i] = '\0';
     5f6:	f7 01       	movw	r30, r14
     5f8:	ec 0f       	add	r30, r28
     5fa:	f1 1d       	adc	r31, r1
     5fc:	10 82       	st	Z, r1
	return command; 
}
     5fe:	c7 01       	movw	r24, r14
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	08 95       	ret

00000610 <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     610:	85 e8       	ldi	r24, 0x85	; 133
     612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(status != TWIT_DATA_ACK){
     616:	80 e4       	ldi	r24, 0x40	; 64
     618:	96 e0       	ldi	r25, 0x06	; 6
     61a:	02 c0       	rjmp	.+4      	; 0x620 <twi_data_write_ack+0x10>
     61c:	01 97       	sbiw	r24, 0x01	; 1
		i++;
		if(i >= TWI_TIMEOUT){
     61e:	31 f0       	breq	.+12     	; 0x62c <twi_data_write_ack+0x1c>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     620:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <status>
     624:	28 32       	cpi	r18, 0x28	; 40
     626:	d1 f7       	brne	.-12     	; 0x61c <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	08 95       	ret
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     62c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     62e:	08 95       	ret

00000630 <__vector_24>:
 */ 
#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI_vect){
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
     63a:	8f 93       	push	r24
	status = (TWSR & 0xF8);
     63c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     640:	88 7f       	andi	r24, 0xF8	; 248
     642:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
}
     646:	8f 91       	pop	r24
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti

00000652 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     660:	95 ea       	ldi	r25, 0xA5	; 165
     662:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     666:	e0 e4       	ldi	r30, 0x40	; 64
     668:	f6 e0       	ldi	r31, 0x06	; 6
     66a:	03 c0       	rjmp	.+6      	; 0x672 <twi_read+0x20>
     66c:	31 97       	sbiw	r30, 0x01	; 1
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
     66e:	09 f4       	brne	.+2      	; 0x672 <twi_read+0x20>
     670:	54 c0       	rjmp	.+168    	; 0x71a <twi_read+0xc8>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     672:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     676:	98 30       	cpi	r25, 0x08	; 8
     678:	c9 f7       	brne	.-14     	; 0x66c <twi_read+0x1a>
     67a:	45 c0       	rjmp	.+138    	; 0x706 <twi_read+0xb4>
     67c:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     67e:	09 f4       	brne	.+2      	; 0x682 <twi_read+0x30>
     680:	51 c0       	rjmp	.+162    	; 0x724 <twi_read+0xd2>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     682:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     686:	98 31       	cpi	r25, 0x18	; 24
     688:	c9 f7       	brne	.-14     	; 0x67c <twi_read+0x2a>
     68a:	51 c0       	rjmp	.+162    	; 0x72e <twi_read+0xdc>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     68c:	95 e9       	ldi	r25, 0x95	; 149
     68e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     692:	91 c0       	rjmp	.+290    	; 0x7b6 <twi_read+0x164>
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     694:	85 ea       	ldi	r24, 0xA5	; 165
     696:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     69a:	60 e4       	ldi	r22, 0x40	; 64
     69c:	76 e0       	ldi	r23, 0x06	; 6
     69e:	04 c0       	rjmp	.+8      	; 0x6a8 <twi_read+0x56>
     6a0:	61 50       	subi	r22, 0x01	; 1
     6a2:	71 09       	sbc	r23, r1
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <twi_read+0x56>
     6a6:	4e c0       	rjmp	.+156    	; 0x744 <twi_read+0xf2>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     6a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     6ac:	90 31       	cpi	r25, 0x10	; 16
     6ae:	c1 f7       	brne	.-16     	; 0x6a0 <twi_read+0x4e>
     6b0:	4e c0       	rjmp	.+156    	; 0x74e <twi_read+0xfc>
     6b2:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <twi_read+0x66>
     6b6:	5d c0       	rjmp	.+186    	; 0x772 <twi_read+0x120>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     6b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <status>
     6bc:	30 34       	cpi	r19, 0x40	; 64
     6be:	c9 f7       	brne	.-14     	; 0x6b2 <twi_read+0x60>
     6c0:	51 c0       	rjmp	.+162    	; 0x764 <twi_read+0x112>
     6c2:	f6 01       	movw	r30, r12
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	50 e0       	ldi	r21, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     6c8:	ac eb       	ldi	r26, 0xBC	; 188
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	35 ec       	ldi	r19, 0xC5	; 197
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR;
     6ce:	cb eb       	ldi	r28, 0xBB	; 187
     6d0:	d0 e0       	ldi	r29, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     6d2:	3c 93       	st	X, r19
     6d4:	80 e4       	ldi	r24, 0x40	; 64
     6d6:	96 e0       	ldi	r25, 0x06	; 6
     6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <twi_read+0x8e>
     6da:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <twi_read+0x8e>
     6de:	4e c0       	rjmp	.+156    	; 0x77c <twi_read+0x12a>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     6e0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <status>
     6e4:	20 35       	cpi	r18, 0x50	; 80
     6e6:	c9 f7       	brne	.-14     	; 0x6da <twi_read+0x88>
     6e8:	4e c0       	rjmp	.+156    	; 0x786 <twi_read+0x134>
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     6ea:	85 e8       	ldi	r24, 0x85	; 133
     6ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6f0:	80 e4       	ldi	r24, 0x40	; 64
     6f2:	96 e0       	ldi	r25, 0x06	; 6
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <twi_read+0xaa>
     6f6:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
     6f8:	09 f4       	brne	.+2      	; 0x6fc <twi_read+0xaa>
     6fa:	4e c0       	rjmp	.+156    	; 0x798 <twi_read+0x146>
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     6fc:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <status>
     700:	28 35       	cpi	r18, 0x58	; 88
     702:	c9 f7       	brne	.-14     	; 0x6f6 <twi_read+0xa4>
     704:	4e c0       	rjmp	.+156    	; 0x7a2 <twi_read+0x150>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR = (addr << 1) | 0;
     706:	98 2f       	mov	r25, r24
     708:	99 0f       	add	r25, r25
     70a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     70e:	95 e8       	ldi	r25, 0x85	; 133
     710:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     714:	e0 e4       	ldi	r30, 0x40	; 64
     716:	f6 e0       	ldi	r31, 0x06	; 6
     718:	b4 cf       	rjmp	.-152    	; 0x682 <twi_read+0x30>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     71a:	85 e9       	ldi	r24, 0x95	; 149
     71c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	49 c0       	rjmp	.+146    	; 0x7b6 <twi_read+0x164>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     724:	85 e9       	ldi	r24, 0x95	; 149
     726:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	44 c0       	rjmp	.+136    	; 0x7b6 <twi_read+0x164>
     72e:	89 01       	movw	r16, r18
     730:	6a 01       	movw	r12, r20
     732:	f8 2e       	mov	r15, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR = reg;
     734:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	err = twi_data_write_ack();
     738:	0e 94 08 03 	call	0x610	; 0x610 <twi_data_write_ack>
	if(err != TWI_OK){
     73c:	88 23       	and	r24, r24
     73e:	09 f4       	brne	.+2      	; 0x742 <twi_read+0xf0>
     740:	a9 cf       	rjmp	.-174    	; 0x694 <twi_read+0x42>
     742:	a4 cf       	rjmp	.-184    	; 0x68c <twi_read+0x3a>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     744:	85 e9       	ldi	r24, 0x95	; 149
     746:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	34 c0       	rjmp	.+104    	; 0x7b6 <twi_read+0x164>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR = (addr << 1) | 1;
     74e:	8f 2d       	mov	r24, r15
     750:	88 0f       	add	r24, r24
     752:	81 60       	ori	r24, 0x01	; 1
     754:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     758:	85 e8       	ldi	r24, 0x85	; 133
     75a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     75e:	80 e4       	ldi	r24, 0x40	; 64
     760:	96 e0       	ldi	r25, 0x06	; 6
     762:	aa cf       	rjmp	.-172    	; 0x6b8 <twi_read+0x66>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     764:	01 50       	subi	r16, 0x01	; 1
     766:	11 09       	sbc	r17, r1
     768:	09 f0       	breq	.+2      	; 0x76c <twi_read+0x11a>
     76a:	ab cf       	rjmp	.-170    	; 0x6c2 <twi_read+0x70>
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	bc cf       	rjmp	.-136    	; 0x6ea <twi_read+0x98>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     772:	85 e9       	ldi	r24, 0x95	; 149
     774:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	1d c0       	rjmp	.+58     	; 0x7b6 <twi_read+0x164>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     77c:	85 e9       	ldi	r24, 0x95	; 149
     77e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	18 c0       	rjmp	.+48     	; 0x7b6 <twi_read+0x164>
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR;
     786:	88 81       	ld	r24, Y
     788:	81 93       	st	Z+, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     78a:	4f 5f       	subi	r20, 0xFF	; 255
     78c:	5f 4f       	sbci	r21, 0xFF	; 255
     78e:	40 17       	cp	r20, r16
     790:	51 07       	cpc	r21, r17
     792:	08 f4       	brcc	.+2      	; 0x796 <twi_read+0x144>
     794:	9e cf       	rjmp	.-196    	; 0x6d2 <twi_read+0x80>
     796:	a9 cf       	rjmp	.-174    	; 0x6ea <twi_read+0x98>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     798:	85 e9       	ldi	r24, 0x95	; 149
     79a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0a c0       	rjmp	.+20     	; 0x7b6 <twi_read+0x164>
	err = twi_data_read_ack(0);
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	data[i] = TWDR;
     7a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7a6:	e6 01       	movw	r28, r12
     7a8:	c4 0f       	add	r28, r20
     7aa:	d5 1f       	adc	r29, r21
     7ac:	88 83       	st	Y, r24
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     7ae:	85 e9       	ldi	r24, 0x95	; 149
     7b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	data[i] = TWDR;
	
	twi_stop();
	
	return err;
     7b4:	80 e0       	ldi	r24, 0x00	; 0
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	08 95       	ret

000007c6 <twi_wire>:


uint8_t twi_wire(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	89 01       	movw	r16, r18
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     7d4:	95 ea       	ldi	r25, 0xA5	; 165
     7d6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7da:	e0 e4       	ldi	r30, 0x40	; 64
     7dc:	f6 e0       	ldi	r31, 0x06	; 6
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <twi_wire+0x1e>
     7e0:	31 97       	sbiw	r30, 0x01	; 1
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
     7e2:	c1 f1       	breq	.+112    	; 0x854 <__DATA_REGION_LENGTH__+0x54>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     7e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     7e8:	98 30       	cpi	r25, 0x08	; 8
     7ea:	d1 f7       	brne	.-12     	; 0x7e0 <twi_wire+0x1a>
     7ec:	2a c0       	rjmp	.+84     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     7ee:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     7f0:	b1 f1       	breq	.+108    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     7f2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <status>
     7f6:	38 31       	cpi	r19, 0x18	; 24
     7f8:	d1 f7       	brne	.-12     	; 0x7ee <twi_wire+0x28>
     7fa:	36 c0       	rjmp	.+108    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     7fc:	e1 14       	cp	r14, r1
     7fe:	f1 04       	cpc	r15, r1
     800:	29 f4       	brne	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     802:	1a c0       	rjmp	.+52     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     804:	95 e9       	ldi	r25, 0x95	; 149
     806:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     80a:	37 c0       	rjmp	.+110    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     80c:	e8 01       	movw	r28, r16
     80e:	0e 0d       	add	r16, r14
     810:	1f 1d       	adc	r17, r15
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
		TWDR = data[i];
     812:	0f 2e       	mov	r0, r31
     814:	fb eb       	ldi	r31, 0xBB	; 187
     816:	ef 2e       	mov	r14, r31
     818:	f1 2c       	mov	r15, r1
     81a:	f0 2d       	mov	r31, r0
     81c:	89 91       	ld	r24, Y+
     81e:	f7 01       	movw	r30, r14
     820:	80 83       	st	Z, r24
		err = twi_data_write_ack();
     822:	0e 94 08 03 	call	0x610	; 0x610 <twi_data_write_ack>
		if(err != TWI_OK){
     826:	88 23       	and	r24, r24
     828:	21 f0       	breq	.+8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     82a:	95 e9       	ldi	r25, 0x95	; 149
     82c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     830:	24 c0       	rjmp	.+72     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     832:	c0 17       	cp	r28, r16
     834:	d1 07       	cpc	r29, r17
     836:	91 f7       	brne	.-28     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     838:	85 e9       	ldi	r24, 0x95	; 149
     83a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	1c c0       	rjmp	.+56     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR = (addr << 1) | 0;
     842:	88 0f       	add	r24, r24
     844:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     848:	85 e8       	ldi	r24, 0x85	; 133
     84a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     84e:	80 e4       	ldi	r24, 0x40	; 64
     850:	96 e0       	ldi	r25, 0x06	; 6
     852:	cf cf       	rjmp	.-98     	; 0x7f2 <twi_wire+0x2c>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     854:	85 e9       	ldi	r24, 0x95	; 149
     856:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e c0       	rjmp	.+28     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     85e:	85 e9       	ldi	r24, 0x95	; 149
     860:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	09 c0       	rjmp	.+18     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     868:	78 01       	movw	r14, r16
     86a:	8a 01       	movw	r16, r20
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR = reg;
     86c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	err = twi_data_write_ack();
     870:	0e 94 08 03 	call	0x610	; 0x610 <twi_data_write_ack>
	if(err != TWI_OK){
     874:	88 23       	and	r24, r24
     876:	11 f2       	breq	.-124    	; 0x7fc <twi_wire+0x36>
     878:	c5 cf       	rjmp	.-118    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	
	
	twi_stop();
	
	return err;
}
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	08 95       	ret

00000888 <twi_init>:





void twi_init(uint32_t speed){
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
	TWBR = gen_t & 0xFF;
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	74 e2       	ldi	r23, 0x24	; 36
     890:	84 ef       	ldi	r24, 0xF4	; 244
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodsi4>
     898:	da 01       	movw	r26, r20
     89a:	c9 01       	movw	r24, r18
     89c:	40 97       	sbiw	r24, 0x10	; 16
     89e:	a1 09       	sbc	r26, r1
     8a0:	b1 09       	sbc	r27, r1
     8a2:	b6 95       	lsr	r27
     8a4:	a7 95       	ror	r26
     8a6:	97 95       	ror	r25
     8a8:	87 95       	ror	r24
     8aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN) | (1 << TWIE);
     8ae:	85 e0       	ldi	r24, 0x05	; 5
     8b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	PORTC |= (1 << PORTC5 | 1 << PORTC4);
     8b4:	88 b1       	in	r24, 0x08	; 8
     8b6:	80 63       	ori	r24, 0x30	; 48
     8b8:	88 b9       	out	0x08, r24	; 8
     8ba:	08 95       	ret

000008bc <__floatunsisf>:
     8bc:	e8 94       	clt
     8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__floatsisf+0x12>

000008c0 <__floatsisf>:
     8c0:	97 fb       	bst	r25, 7
     8c2:	3e f4       	brtc	.+14     	; 0x8d2 <__floatsisf+0x12>
     8c4:	90 95       	com	r25
     8c6:	80 95       	com	r24
     8c8:	70 95       	com	r23
     8ca:	61 95       	neg	r22
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
     8ce:	8f 4f       	sbci	r24, 0xFF	; 255
     8d0:	9f 4f       	sbci	r25, 0xFF	; 255
     8d2:	99 23       	and	r25, r25
     8d4:	a9 f0       	breq	.+42     	; 0x900 <__stack+0x1>
     8d6:	f9 2f       	mov	r31, r25
     8d8:	96 e9       	ldi	r25, 0x96	; 150
     8da:	bb 27       	eor	r27, r27
     8dc:	93 95       	inc	r25
     8de:	f6 95       	lsr	r31
     8e0:	87 95       	ror	r24
     8e2:	77 95       	ror	r23
     8e4:	67 95       	ror	r22
     8e6:	b7 95       	ror	r27
     8e8:	f1 11       	cpse	r31, r1
     8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <__floatsisf+0x1c>
     8ec:	fa f4       	brpl	.+62     	; 0x92c <__stack+0x2d>
     8ee:	bb 0f       	add	r27, r27
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <__floatsisf+0x36>
     8f2:	60 ff       	sbrs	r22, 0
     8f4:	1b c0       	rjmp	.+54     	; 0x92c <__stack+0x2d>
     8f6:	6f 5f       	subi	r22, 0xFF	; 255
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	8f 4f       	sbci	r24, 0xFF	; 255
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	16 c0       	rjmp	.+44     	; 0x92c <__stack+0x2d>
     900:	88 23       	and	r24, r24
     902:	11 f0       	breq	.+4      	; 0x908 <__stack+0x9>
     904:	96 e9       	ldi	r25, 0x96	; 150
     906:	11 c0       	rjmp	.+34     	; 0x92a <__stack+0x2b>
     908:	77 23       	and	r23, r23
     90a:	21 f0       	breq	.+8      	; 0x914 <__stack+0x15>
     90c:	9e e8       	ldi	r25, 0x8E	; 142
     90e:	87 2f       	mov	r24, r23
     910:	76 2f       	mov	r23, r22
     912:	05 c0       	rjmp	.+10     	; 0x91e <__stack+0x1f>
     914:	66 23       	and	r22, r22
     916:	71 f0       	breq	.+28     	; 0x934 <__stack+0x35>
     918:	96 e8       	ldi	r25, 0x86	; 134
     91a:	86 2f       	mov	r24, r22
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	2a f0       	brmi	.+10     	; 0x92c <__stack+0x2d>
     922:	9a 95       	dec	r25
     924:	66 0f       	add	r22, r22
     926:	77 1f       	adc	r23, r23
     928:	88 1f       	adc	r24, r24
     92a:	da f7       	brpl	.-10     	; 0x922 <__stack+0x23>
     92c:	88 0f       	add	r24, r24
     92e:	96 95       	lsr	r25
     930:	87 95       	ror	r24
     932:	97 f9       	bld	r25, 7
     934:	08 95       	ret

00000936 <__mulsf3>:
     936:	0e 94 ae 04 	call	0x95c	; 0x95c <__mulsf3x>
     93a:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_round>
     93e:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_pscA>
     942:	38 f0       	brcs	.+14     	; 0x952 <__mulsf3+0x1c>
     944:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_pscB>
     948:	20 f0       	brcs	.+8      	; 0x952 <__mulsf3+0x1c>
     94a:	95 23       	and	r25, r21
     94c:	11 f0       	breq	.+4      	; 0x952 <__mulsf3+0x1c>
     94e:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_inf>
     952:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_nan>
     956:	11 24       	eor	r1, r1
     958:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_szero>

0000095c <__mulsf3x>:
     95c:	0e 94 30 05 	call	0xa60	; 0xa60 <__fp_split3>
     960:	70 f3       	brcs	.-36     	; 0x93e <__mulsf3+0x8>

00000962 <__mulsf3_pse>:
     962:	95 9f       	mul	r25, r21
     964:	c1 f3       	breq	.-16     	; 0x956 <__mulsf3+0x20>
     966:	95 0f       	add	r25, r21
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	55 1f       	adc	r21, r21
     96c:	62 9f       	mul	r22, r18
     96e:	f0 01       	movw	r30, r0
     970:	72 9f       	mul	r23, r18
     972:	bb 27       	eor	r27, r27
     974:	f0 0d       	add	r31, r0
     976:	b1 1d       	adc	r27, r1
     978:	63 9f       	mul	r22, r19
     97a:	aa 27       	eor	r26, r26
     97c:	f0 0d       	add	r31, r0
     97e:	b1 1d       	adc	r27, r1
     980:	aa 1f       	adc	r26, r26
     982:	64 9f       	mul	r22, r20
     984:	66 27       	eor	r22, r22
     986:	b0 0d       	add	r27, r0
     988:	a1 1d       	adc	r26, r1
     98a:	66 1f       	adc	r22, r22
     98c:	82 9f       	mul	r24, r18
     98e:	22 27       	eor	r18, r18
     990:	b0 0d       	add	r27, r0
     992:	a1 1d       	adc	r26, r1
     994:	62 1f       	adc	r22, r18
     996:	73 9f       	mul	r23, r19
     998:	b0 0d       	add	r27, r0
     99a:	a1 1d       	adc	r26, r1
     99c:	62 1f       	adc	r22, r18
     99e:	83 9f       	mul	r24, r19
     9a0:	a0 0d       	add	r26, r0
     9a2:	61 1d       	adc	r22, r1
     9a4:	22 1f       	adc	r18, r18
     9a6:	74 9f       	mul	r23, r20
     9a8:	33 27       	eor	r19, r19
     9aa:	a0 0d       	add	r26, r0
     9ac:	61 1d       	adc	r22, r1
     9ae:	23 1f       	adc	r18, r19
     9b0:	84 9f       	mul	r24, r20
     9b2:	60 0d       	add	r22, r0
     9b4:	21 1d       	adc	r18, r1
     9b6:	82 2f       	mov	r24, r18
     9b8:	76 2f       	mov	r23, r22
     9ba:	6a 2f       	mov	r22, r26
     9bc:	11 24       	eor	r1, r1
     9be:	9f 57       	subi	r25, 0x7F	; 127
     9c0:	50 40       	sbci	r21, 0x00	; 0
     9c2:	9a f0       	brmi	.+38     	; 0x9ea <__mulsf3_pse+0x88>
     9c4:	f1 f0       	breq	.+60     	; 0xa02 <__mulsf3_pse+0xa0>
     9c6:	88 23       	and	r24, r24
     9c8:	4a f0       	brmi	.+18     	; 0x9dc <__mulsf3_pse+0x7a>
     9ca:	ee 0f       	add	r30, r30
     9cc:	ff 1f       	adc	r31, r31
     9ce:	bb 1f       	adc	r27, r27
     9d0:	66 1f       	adc	r22, r22
     9d2:	77 1f       	adc	r23, r23
     9d4:	88 1f       	adc	r24, r24
     9d6:	91 50       	subi	r25, 0x01	; 1
     9d8:	50 40       	sbci	r21, 0x00	; 0
     9da:	a9 f7       	brne	.-22     	; 0x9c6 <__mulsf3_pse+0x64>
     9dc:	9e 3f       	cpi	r25, 0xFE	; 254
     9de:	51 05       	cpc	r21, r1
     9e0:	80 f0       	brcs	.+32     	; 0xa02 <__mulsf3_pse+0xa0>
     9e2:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_inf>
     9e6:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_szero>
     9ea:	5f 3f       	cpi	r21, 0xFF	; 255
     9ec:	e4 f3       	brlt	.-8      	; 0x9e6 <__mulsf3_pse+0x84>
     9ee:	98 3e       	cpi	r25, 0xE8	; 232
     9f0:	d4 f3       	brlt	.-12     	; 0x9e6 <__mulsf3_pse+0x84>
     9f2:	86 95       	lsr	r24
     9f4:	77 95       	ror	r23
     9f6:	67 95       	ror	r22
     9f8:	b7 95       	ror	r27
     9fa:	f7 95       	ror	r31
     9fc:	e7 95       	ror	r30
     9fe:	9f 5f       	subi	r25, 0xFF	; 255
     a00:	c1 f7       	brne	.-16     	; 0x9f2 <__mulsf3_pse+0x90>
     a02:	fe 2b       	or	r31, r30
     a04:	88 0f       	add	r24, r24
     a06:	91 1d       	adc	r25, r1
     a08:	96 95       	lsr	r25
     a0a:	87 95       	ror	r24
     a0c:	97 f9       	bld	r25, 7
     a0e:	08 95       	ret

00000a10 <__fp_inf>:
     a10:	97 f9       	bld	r25, 7
     a12:	9f 67       	ori	r25, 0x7F	; 127
     a14:	80 e8       	ldi	r24, 0x80	; 128
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	08 95       	ret

00000a1c <__fp_nan>:
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	80 ec       	ldi	r24, 0xC0	; 192
     a20:	08 95       	ret

00000a22 <__fp_pscA>:
     a22:	00 24       	eor	r0, r0
     a24:	0a 94       	dec	r0
     a26:	16 16       	cp	r1, r22
     a28:	17 06       	cpc	r1, r23
     a2a:	18 06       	cpc	r1, r24
     a2c:	09 06       	cpc	r0, r25
     a2e:	08 95       	ret

00000a30 <__fp_pscB>:
     a30:	00 24       	eor	r0, r0
     a32:	0a 94       	dec	r0
     a34:	12 16       	cp	r1, r18
     a36:	13 06       	cpc	r1, r19
     a38:	14 06       	cpc	r1, r20
     a3a:	05 06       	cpc	r0, r21
     a3c:	08 95       	ret

00000a3e <__fp_round>:
     a3e:	09 2e       	mov	r0, r25
     a40:	03 94       	inc	r0
     a42:	00 0c       	add	r0, r0
     a44:	11 f4       	brne	.+4      	; 0xa4a <__fp_round+0xc>
     a46:	88 23       	and	r24, r24
     a48:	52 f0       	brmi	.+20     	; 0xa5e <__fp_round+0x20>
     a4a:	bb 0f       	add	r27, r27
     a4c:	40 f4       	brcc	.+16     	; 0xa5e <__fp_round+0x20>
     a4e:	bf 2b       	or	r27, r31
     a50:	11 f4       	brne	.+4      	; 0xa56 <__fp_round+0x18>
     a52:	60 ff       	sbrs	r22, 0
     a54:	04 c0       	rjmp	.+8      	; 0xa5e <__fp_round+0x20>
     a56:	6f 5f       	subi	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	8f 4f       	sbci	r24, 0xFF	; 255
     a5c:	9f 4f       	sbci	r25, 0xFF	; 255
     a5e:	08 95       	ret

00000a60 <__fp_split3>:
     a60:	57 fd       	sbrc	r21, 7
     a62:	90 58       	subi	r25, 0x80	; 128
     a64:	44 0f       	add	r20, r20
     a66:	55 1f       	adc	r21, r21
     a68:	59 f0       	breq	.+22     	; 0xa80 <__fp_splitA+0x10>
     a6a:	5f 3f       	cpi	r21, 0xFF	; 255
     a6c:	71 f0       	breq	.+28     	; 0xa8a <__fp_splitA+0x1a>
     a6e:	47 95       	ror	r20

00000a70 <__fp_splitA>:
     a70:	88 0f       	add	r24, r24
     a72:	97 fb       	bst	r25, 7
     a74:	99 1f       	adc	r25, r25
     a76:	61 f0       	breq	.+24     	; 0xa90 <__fp_splitA+0x20>
     a78:	9f 3f       	cpi	r25, 0xFF	; 255
     a7a:	79 f0       	breq	.+30     	; 0xa9a <__fp_splitA+0x2a>
     a7c:	87 95       	ror	r24
     a7e:	08 95       	ret
     a80:	12 16       	cp	r1, r18
     a82:	13 06       	cpc	r1, r19
     a84:	14 06       	cpc	r1, r20
     a86:	55 1f       	adc	r21, r21
     a88:	f2 cf       	rjmp	.-28     	; 0xa6e <__fp_split3+0xe>
     a8a:	46 95       	lsr	r20
     a8c:	f1 df       	rcall	.-30     	; 0xa70 <__fp_splitA>
     a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <__fp_splitA+0x30>
     a90:	16 16       	cp	r1, r22
     a92:	17 06       	cpc	r1, r23
     a94:	18 06       	cpc	r1, r24
     a96:	99 1f       	adc	r25, r25
     a98:	f1 cf       	rjmp	.-30     	; 0xa7c <__fp_splitA+0xc>
     a9a:	86 95       	lsr	r24
     a9c:	71 05       	cpc	r23, r1
     a9e:	61 05       	cpc	r22, r1
     aa0:	08 94       	sec
     aa2:	08 95       	ret

00000aa4 <__fp_zero>:
     aa4:	e8 94       	clt

00000aa6 <__fp_szero>:
     aa6:	bb 27       	eor	r27, r27
     aa8:	66 27       	eor	r22, r22
     aaa:	77 27       	eor	r23, r23
     aac:	cb 01       	movw	r24, r22
     aae:	97 f9       	bld	r25, 7
     ab0:	08 95       	ret

00000ab2 <__udivmodsi4>:
     ab2:	a1 e2       	ldi	r26, 0x21	; 33
     ab4:	1a 2e       	mov	r1, r26
     ab6:	aa 1b       	sub	r26, r26
     ab8:	bb 1b       	sub	r27, r27
     aba:	fd 01       	movw	r30, r26
     abc:	0d c0       	rjmp	.+26     	; 0xad8 <__udivmodsi4_ep>

00000abe <__udivmodsi4_loop>:
     abe:	aa 1f       	adc	r26, r26
     ac0:	bb 1f       	adc	r27, r27
     ac2:	ee 1f       	adc	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	a2 17       	cp	r26, r18
     ac8:	b3 07       	cpc	r27, r19
     aca:	e4 07       	cpc	r30, r20
     acc:	f5 07       	cpc	r31, r21
     ace:	20 f0       	brcs	.+8      	; 0xad8 <__udivmodsi4_ep>
     ad0:	a2 1b       	sub	r26, r18
     ad2:	b3 0b       	sbc	r27, r19
     ad4:	e4 0b       	sbc	r30, r20
     ad6:	f5 0b       	sbc	r31, r21

00000ad8 <__udivmodsi4_ep>:
     ad8:	66 1f       	adc	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	88 1f       	adc	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	1a 94       	dec	r1
     ae2:	69 f7       	brne	.-38     	; 0xabe <__udivmodsi4_loop>
     ae4:	60 95       	com	r22
     ae6:	70 95       	com	r23
     ae8:	80 95       	com	r24
     aea:	90 95       	com	r25
     aec:	9b 01       	movw	r18, r22
     aee:	ac 01       	movw	r20, r24
     af0:	bd 01       	movw	r22, r26
     af2:	cf 01       	movw	r24, r30
     af4:	08 95       	ret

00000af6 <dtostrf>:
     af6:	ef 92       	push	r14
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	e8 01       	movw	r28, r16
     b02:	47 fd       	sbrc	r20, 7
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <dtostrf+0x14>
     b06:	34 e0       	ldi	r19, 0x04	; 4
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <dtostrf+0x16>
     b0a:	34 e1       	ldi	r19, 0x14	; 20
     b0c:	04 2e       	mov	r0, r20
     b0e:	00 0c       	add	r0, r0
     b10:	55 0b       	sbc	r21, r21
     b12:	57 ff       	sbrs	r21, 7
     b14:	03 c0       	rjmp	.+6      	; 0xb1c <dtostrf+0x26>
     b16:	51 95       	neg	r21
     b18:	41 95       	neg	r20
     b1a:	51 09       	sbc	r21, r1
     b1c:	e3 2e       	mov	r14, r19
     b1e:	02 2f       	mov	r16, r18
     b20:	24 2f       	mov	r18, r20
     b22:	ae 01       	movw	r20, r28
     b24:	0e 94 12 07 	call	0xe24	; 0xe24 <dtoa_prf>
     b28:	ce 01       	movw	r24, r28
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ef 90       	pop	r14
     b34:	08 95       	ret

00000b36 <malloc>:
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	91 05       	cpc	r25, r1
     b42:	10 f4       	brcc	.+4      	; 0xb48 <malloc+0x12>
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <__flp>
     b4c:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <__flp+0x1>
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	a0 e0       	ldi	r26, 0x00	; 0
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	30 97       	sbiw	r30, 0x00	; 0
     b5a:	19 f1       	breq	.+70     	; 0xba2 <malloc+0x6c>
     b5c:	40 81       	ld	r20, Z
     b5e:	51 81       	ldd	r21, Z+1	; 0x01
     b60:	02 81       	ldd	r16, Z+2	; 0x02
     b62:	13 81       	ldd	r17, Z+3	; 0x03
     b64:	48 17       	cp	r20, r24
     b66:	59 07       	cpc	r21, r25
     b68:	c8 f0       	brcs	.+50     	; 0xb9c <malloc+0x66>
     b6a:	84 17       	cp	r24, r20
     b6c:	95 07       	cpc	r25, r21
     b6e:	69 f4       	brne	.+26     	; 0xb8a <malloc+0x54>
     b70:	10 97       	sbiw	r26, 0x00	; 0
     b72:	31 f0       	breq	.+12     	; 0xb80 <malloc+0x4a>
     b74:	12 96       	adiw	r26, 0x02	; 2
     b76:	0c 93       	st	X, r16
     b78:	12 97       	sbiw	r26, 0x02	; 2
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	1c 93       	st	X, r17
     b7e:	27 c0       	rjmp	.+78     	; 0xbce <malloc+0x98>
     b80:	00 93 a1 01 	sts	0x01A1, r16	; 0x8001a1 <__flp>
     b84:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__flp+0x1>
     b88:	22 c0       	rjmp	.+68     	; 0xbce <malloc+0x98>
     b8a:	21 15       	cp	r18, r1
     b8c:	31 05       	cpc	r19, r1
     b8e:	19 f0       	breq	.+6      	; 0xb96 <malloc+0x60>
     b90:	42 17       	cp	r20, r18
     b92:	53 07       	cpc	r21, r19
     b94:	18 f4       	brcc	.+6      	; 0xb9c <malloc+0x66>
     b96:	9a 01       	movw	r18, r20
     b98:	bd 01       	movw	r22, r26
     b9a:	ef 01       	movw	r28, r30
     b9c:	df 01       	movw	r26, r30
     b9e:	f8 01       	movw	r30, r16
     ba0:	db cf       	rjmp	.-74     	; 0xb58 <malloc+0x22>
     ba2:	21 15       	cp	r18, r1
     ba4:	31 05       	cpc	r19, r1
     ba6:	f9 f0       	breq	.+62     	; 0xbe6 <malloc+0xb0>
     ba8:	28 1b       	sub	r18, r24
     baa:	39 0b       	sbc	r19, r25
     bac:	24 30       	cpi	r18, 0x04	; 4
     bae:	31 05       	cpc	r19, r1
     bb0:	80 f4       	brcc	.+32     	; 0xbd2 <malloc+0x9c>
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	9b 81       	ldd	r25, Y+3	; 0x03
     bb6:	61 15       	cp	r22, r1
     bb8:	71 05       	cpc	r23, r1
     bba:	21 f0       	breq	.+8      	; 0xbc4 <malloc+0x8e>
     bbc:	fb 01       	movw	r30, r22
     bbe:	93 83       	std	Z+3, r25	; 0x03
     bc0:	82 83       	std	Z+2, r24	; 0x02
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <malloc+0x96>
     bc4:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <__flp+0x1>
     bc8:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <__flp>
     bcc:	fe 01       	movw	r30, r28
     bce:	32 96       	adiw	r30, 0x02	; 2
     bd0:	44 c0       	rjmp	.+136    	; 0xc5a <malloc+0x124>
     bd2:	fe 01       	movw	r30, r28
     bd4:	e2 0f       	add	r30, r18
     bd6:	f3 1f       	adc	r31, r19
     bd8:	81 93       	st	Z+, r24
     bda:	91 93       	st	Z+, r25
     bdc:	22 50       	subi	r18, 0x02	; 2
     bde:	31 09       	sbc	r19, r1
     be0:	39 83       	std	Y+1, r19	; 0x01
     be2:	28 83       	st	Y, r18
     be4:	3a c0       	rjmp	.+116    	; 0xc5a <malloc+0x124>
     be6:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     bea:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     bee:	23 2b       	or	r18, r19
     bf0:	41 f4       	brne	.+16     	; 0xc02 <malloc+0xcc>
     bf2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
     bf6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
     bfa:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <__brkval+0x1>
     bfe:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <__brkval>
     c02:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
     c06:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
     c0a:	21 15       	cp	r18, r1
     c0c:	31 05       	cpc	r19, r1
     c0e:	41 f4       	brne	.+16     	; 0xc20 <malloc+0xea>
     c10:	2d b7       	in	r18, 0x3d	; 61
     c12:	3e b7       	in	r19, 0x3e	; 62
     c14:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
     c18:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
     c1c:	24 1b       	sub	r18, r20
     c1e:	35 0b       	sbc	r19, r21
     c20:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <__brkval>
     c24:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <__brkval+0x1>
     c28:	e2 17       	cp	r30, r18
     c2a:	f3 07       	cpc	r31, r19
     c2c:	a0 f4       	brcc	.+40     	; 0xc56 <malloc+0x120>
     c2e:	2e 1b       	sub	r18, r30
     c30:	3f 0b       	sbc	r19, r31
     c32:	28 17       	cp	r18, r24
     c34:	39 07       	cpc	r19, r25
     c36:	78 f0       	brcs	.+30     	; 0xc56 <malloc+0x120>
     c38:	ac 01       	movw	r20, r24
     c3a:	4e 5f       	subi	r20, 0xFE	; 254
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	24 17       	cp	r18, r20
     c40:	35 07       	cpc	r19, r21
     c42:	48 f0       	brcs	.+18     	; 0xc56 <malloc+0x120>
     c44:	4e 0f       	add	r20, r30
     c46:	5f 1f       	adc	r21, r31
     c48:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <__brkval+0x1>
     c4c:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <__brkval>
     c50:	81 93       	st	Z+, r24
     c52:	91 93       	st	Z+, r25
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <malloc+0x124>
     c56:	e0 e0       	ldi	r30, 0x00	; 0
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	cf 01       	movw	r24, r30
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <free>:
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	09 f4       	brne	.+2      	; 0xc70 <free+0xa>
     c6e:	81 c0       	rjmp	.+258    	; 0xd72 <free+0x10c>
     c70:	fc 01       	movw	r30, r24
     c72:	32 97       	sbiw	r30, 0x02	; 2
     c74:	13 82       	std	Z+3, r1	; 0x03
     c76:	12 82       	std	Z+2, r1	; 0x02
     c78:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <__flp>
     c7c:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <__flp+0x1>
     c80:	10 97       	sbiw	r26, 0x00	; 0
     c82:	81 f4       	brne	.+32     	; 0xca4 <free+0x3e>
     c84:	20 81       	ld	r18, Z
     c86:	31 81       	ldd	r19, Z+1	; 0x01
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     c90:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     c94:	28 17       	cp	r18, r24
     c96:	39 07       	cpc	r19, r25
     c98:	51 f5       	brne	.+84     	; 0xcee <free+0x88>
     c9a:	f0 93 a0 01 	sts	0x01A0, r31	; 0x8001a0 <__brkval+0x1>
     c9e:	e0 93 9f 01 	sts	0x019F, r30	; 0x80019f <__brkval>
     ca2:	67 c0       	rjmp	.+206    	; 0xd72 <free+0x10c>
     ca4:	ed 01       	movw	r28, r26
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	ce 17       	cp	r28, r30
     cac:	df 07       	cpc	r29, r31
     cae:	40 f4       	brcc	.+16     	; 0xcc0 <free+0x5a>
     cb0:	4a 81       	ldd	r20, Y+2	; 0x02
     cb2:	5b 81       	ldd	r21, Y+3	; 0x03
     cb4:	9e 01       	movw	r18, r28
     cb6:	41 15       	cp	r20, r1
     cb8:	51 05       	cpc	r21, r1
     cba:	f1 f0       	breq	.+60     	; 0xcf8 <free+0x92>
     cbc:	ea 01       	movw	r28, r20
     cbe:	f5 cf       	rjmp	.-22     	; 0xcaa <free+0x44>
     cc0:	d3 83       	std	Z+3, r29	; 0x03
     cc2:	c2 83       	std	Z+2, r28	; 0x02
     cc4:	40 81       	ld	r20, Z
     cc6:	51 81       	ldd	r21, Z+1	; 0x01
     cc8:	84 0f       	add	r24, r20
     cca:	95 1f       	adc	r25, r21
     ccc:	c8 17       	cp	r28, r24
     cce:	d9 07       	cpc	r29, r25
     cd0:	59 f4       	brne	.+22     	; 0xce8 <free+0x82>
     cd2:	88 81       	ld	r24, Y
     cd4:	99 81       	ldd	r25, Y+1	; 0x01
     cd6:	84 0f       	add	r24, r20
     cd8:	95 1f       	adc	r25, r21
     cda:	02 96       	adiw	r24, 0x02	; 2
     cdc:	91 83       	std	Z+1, r25	; 0x01
     cde:	80 83       	st	Z, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	9b 81       	ldd	r25, Y+3	; 0x03
     ce4:	93 83       	std	Z+3, r25	; 0x03
     ce6:	82 83       	std	Z+2, r24	; 0x02
     ce8:	21 15       	cp	r18, r1
     cea:	31 05       	cpc	r19, r1
     cec:	29 f4       	brne	.+10     	; 0xcf8 <free+0x92>
     cee:	f0 93 a2 01 	sts	0x01A2, r31	; 0x8001a2 <__flp+0x1>
     cf2:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <__flp>
     cf6:	3d c0       	rjmp	.+122    	; 0xd72 <free+0x10c>
     cf8:	e9 01       	movw	r28, r18
     cfa:	fb 83       	std	Y+3, r31	; 0x03
     cfc:	ea 83       	std	Y+2, r30	; 0x02
     cfe:	49 91       	ld	r20, Y+
     d00:	59 91       	ld	r21, Y+
     d02:	c4 0f       	add	r28, r20
     d04:	d5 1f       	adc	r29, r21
     d06:	ec 17       	cp	r30, r28
     d08:	fd 07       	cpc	r31, r29
     d0a:	61 f4       	brne	.+24     	; 0xd24 <free+0xbe>
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	84 0f       	add	r24, r20
     d12:	95 1f       	adc	r25, r21
     d14:	02 96       	adiw	r24, 0x02	; 2
     d16:	e9 01       	movw	r28, r18
     d18:	99 83       	std	Y+1, r25	; 0x01
     d1a:	88 83       	st	Y, r24
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	93 81       	ldd	r25, Z+3	; 0x03
     d20:	9b 83       	std	Y+3, r25	; 0x03
     d22:	8a 83       	std	Y+2, r24	; 0x02
     d24:	e0 e0       	ldi	r30, 0x00	; 0
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	12 96       	adiw	r26, 0x02	; 2
     d2a:	8d 91       	ld	r24, X+
     d2c:	9c 91       	ld	r25, X
     d2e:	13 97       	sbiw	r26, 0x03	; 3
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	19 f0       	breq	.+6      	; 0xd3a <free+0xd4>
     d34:	fd 01       	movw	r30, r26
     d36:	dc 01       	movw	r26, r24
     d38:	f7 cf       	rjmp	.-18     	; 0xd28 <free+0xc2>
     d3a:	8d 91       	ld	r24, X+
     d3c:	9c 91       	ld	r25, X
     d3e:	11 97       	sbiw	r26, 0x01	; 1
     d40:	9d 01       	movw	r18, r26
     d42:	2e 5f       	subi	r18, 0xFE	; 254
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     d4e:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     d52:	28 17       	cp	r18, r24
     d54:	39 07       	cpc	r19, r25
     d56:	69 f4       	brne	.+26     	; 0xd72 <free+0x10c>
     d58:	30 97       	sbiw	r30, 0x00	; 0
     d5a:	29 f4       	brne	.+10     	; 0xd66 <free+0x100>
     d5c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__flp+0x1>
     d60:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__flp>
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <free+0x104>
     d66:	13 82       	std	Z+3, r1	; 0x03
     d68:	12 82       	std	Z+2, r1	; 0x02
     d6a:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <__brkval+0x1>
     d6e:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <__brkval>
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <atof>:
     d78:	66 27       	eor	r22, r22
     d7a:	77 27       	eor	r23, r23
     d7c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <strtod>

00000d80 <atoi>:
     d80:	fc 01       	movw	r30, r24
     d82:	88 27       	eor	r24, r24
     d84:	99 27       	eor	r25, r25
     d86:	e8 94       	clt
     d88:	21 91       	ld	r18, Z+
     d8a:	20 32       	cpi	r18, 0x20	; 32
     d8c:	e9 f3       	breq	.-6      	; 0xd88 <atoi+0x8>
     d8e:	29 30       	cpi	r18, 0x09	; 9
     d90:	10 f0       	brcs	.+4      	; 0xd96 <atoi+0x16>
     d92:	2e 30       	cpi	r18, 0x0E	; 14
     d94:	c8 f3       	brcs	.-14     	; 0xd88 <atoi+0x8>
     d96:	2b 32       	cpi	r18, 0x2B	; 43
     d98:	41 f0       	breq	.+16     	; 0xdaa <atoi+0x2a>
     d9a:	2d 32       	cpi	r18, 0x2D	; 45
     d9c:	39 f4       	brne	.+14     	; 0xdac <atoi+0x2c>
     d9e:	68 94       	set
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <atoi+0x2a>
     da2:	0e 94 0a 07 	call	0xe14	; 0xe14 <__mulhi_const_10>
     da6:	82 0f       	add	r24, r18
     da8:	91 1d       	adc	r25, r1
     daa:	21 91       	ld	r18, Z+
     dac:	20 53       	subi	r18, 0x30	; 48
     dae:	2a 30       	cpi	r18, 0x0A	; 10
     db0:	c0 f3       	brcs	.-16     	; 0xda2 <atoi+0x22>
     db2:	1e f4       	brtc	.+6      	; 0xdba <atoi+0x3a>
     db4:	90 95       	com	r25
     db6:	81 95       	neg	r24
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	08 95       	ret

00000dbc <strtok>:
     dbc:	47 e1       	ldi	r20, 0x17	; 23
     dbe:	51 e0       	ldi	r21, 0x01	; 1
     dc0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <strtok_r>
     dc4:	08 95       	ret

00000dc6 <strtok_r>:
     dc6:	fa 01       	movw	r30, r20
     dc8:	a1 91       	ld	r26, Z+
     dca:	b0 81       	ld	r27, Z
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	19 f4       	brne	.+6      	; 0xdd6 <strtok_r+0x10>
     dd0:	10 97       	sbiw	r26, 0x00	; 0
     dd2:	e1 f0       	breq	.+56     	; 0xe0c <strtok_r+0x46>
     dd4:	cd 01       	movw	r24, r26
     dd6:	dc 01       	movw	r26, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0d 90       	ld	r0, X+
     ddc:	00 20       	and	r0, r0
     dde:	11 f4       	brne	.+4      	; 0xde4 <strtok_r+0x1e>
     de0:	c0 01       	movw	r24, r0
     de2:	13 c0       	rjmp	.+38     	; 0xe0a <strtok_r+0x44>
     de4:	fb 01       	movw	r30, r22
     de6:	21 91       	ld	r18, Z+
     de8:	22 23       	and	r18, r18
     dea:	19 f0       	breq	.+6      	; 0xdf2 <strtok_r+0x2c>
     dec:	20 15       	cp	r18, r0
     dee:	d9 f7       	brne	.-10     	; 0xde6 <strtok_r+0x20>
     df0:	f3 cf       	rjmp	.-26     	; 0xdd8 <strtok_r+0x12>
     df2:	fb 01       	movw	r30, r22
     df4:	21 91       	ld	r18, Z+
     df6:	20 15       	cp	r18, r0
     df8:	19 f4       	brne	.+6      	; 0xe00 <strtok_r+0x3a>
     dfa:	1e 92       	st	-X, r1
     dfc:	11 96       	adiw	r26, 0x01	; 1
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <strtok_r+0x46>
     e00:	22 23       	and	r18, r18
     e02:	c1 f7       	brne	.-16     	; 0xdf4 <strtok_r+0x2e>
     e04:	0d 90       	ld	r0, X+
     e06:	00 20       	and	r0, r0
     e08:	a1 f7       	brne	.-24     	; 0xdf2 <strtok_r+0x2c>
     e0a:	d0 01       	movw	r26, r0
     e0c:	fa 01       	movw	r30, r20
     e0e:	a1 93       	st	Z+, r26
     e10:	b0 83       	st	Z, r27
     e12:	08 95       	ret

00000e14 <__mulhi_const_10>:
     e14:	7a e0       	ldi	r23, 0x0A	; 10
     e16:	97 9f       	mul	r25, r23
     e18:	90 2d       	mov	r25, r0
     e1a:	87 9f       	mul	r24, r23
     e1c:	80 2d       	mov	r24, r0
     e1e:	91 0d       	add	r25, r1
     e20:	11 24       	eor	r1, r1
     e22:	08 95       	ret

00000e24 <dtoa_prf>:
     e24:	a9 e0       	ldi	r26, 0x09	; 9
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e8 e1       	ldi	r30, 0x18	; 24
     e2a:	f7 e0       	ldi	r31, 0x07	; 7
     e2c:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__prologue_saves__+0xc>
     e30:	6a 01       	movw	r12, r20
     e32:	12 2f       	mov	r17, r18
     e34:	b0 2e       	mov	r11, r16
     e36:	2b e3       	ldi	r18, 0x3B	; 59
     e38:	20 17       	cp	r18, r16
     e3a:	20 f0       	brcs	.+8      	; 0xe44 <dtoa_prf+0x20>
     e3c:	ff 24       	eor	r15, r15
     e3e:	f3 94       	inc	r15
     e40:	f0 0e       	add	r15, r16
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <dtoa_prf+0x24>
     e44:	2c e3       	ldi	r18, 0x3C	; 60
     e46:	f2 2e       	mov	r15, r18
     e48:	0f 2d       	mov	r16, r15
     e4a:	27 e0       	ldi	r18, 0x07	; 7
     e4c:	ae 01       	movw	r20, r28
     e4e:	4f 5f       	subi	r20, 0xFF	; 255
     e50:	5f 4f       	sbci	r21, 0xFF	; 255
     e52:	0e 94 ba 09 	call	0x1374	; 0x1374 <__ftoa_engine>
     e56:	bc 01       	movw	r22, r24
     e58:	49 81       	ldd	r20, Y+1	; 0x01
     e5a:	84 2f       	mov	r24, r20
     e5c:	89 70       	andi	r24, 0x09	; 9
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	31 f0       	breq	.+12     	; 0xe6e <dtoa_prf+0x4a>
     e62:	e1 fc       	sbrc	r14, 1
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <dtoa_prf+0x4e>
     e66:	e0 fe       	sbrs	r14, 0
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <dtoa_prf+0x52>
     e6a:	90 e2       	ldi	r25, 0x20	; 32
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <dtoa_prf+0x54>
     e6e:	9d e2       	ldi	r25, 0x2D	; 45
     e70:	03 c0       	rjmp	.+6      	; 0xe78 <dtoa_prf+0x54>
     e72:	9b e2       	ldi	r25, 0x2B	; 43
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <dtoa_prf+0x54>
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	5e 2d       	mov	r21, r14
     e7a:	50 71       	andi	r21, 0x10	; 16
     e7c:	43 ff       	sbrs	r20, 3
     e7e:	3c c0       	rjmp	.+120    	; 0xef8 <dtoa_prf+0xd4>
     e80:	91 11       	cpse	r25, r1
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <dtoa_prf+0x64>
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <dtoa_prf+0x66>
     e88:	84 e0       	ldi	r24, 0x04	; 4
     e8a:	81 17       	cp	r24, r17
     e8c:	18 f4       	brcc	.+6      	; 0xe94 <dtoa_prf+0x70>
     e8e:	21 2f       	mov	r18, r17
     e90:	28 1b       	sub	r18, r24
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <dtoa_prf+0x72>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	51 11       	cpse	r21, r1
     e98:	0b c0       	rjmp	.+22     	; 0xeb0 <dtoa_prf+0x8c>
     e9a:	f6 01       	movw	r30, r12
     e9c:	82 2f       	mov	r24, r18
     e9e:	30 e2       	ldi	r19, 0x20	; 32
     ea0:	88 23       	and	r24, r24
     ea2:	19 f0       	breq	.+6      	; 0xeaa <dtoa_prf+0x86>
     ea4:	31 93       	st	Z+, r19
     ea6:	81 50       	subi	r24, 0x01	; 1
     ea8:	fb cf       	rjmp	.-10     	; 0xea0 <dtoa_prf+0x7c>
     eaa:	c2 0e       	add	r12, r18
     eac:	d1 1c       	adc	r13, r1
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	99 23       	and	r25, r25
     eb2:	29 f0       	breq	.+10     	; 0xebe <dtoa_prf+0x9a>
     eb4:	d6 01       	movw	r26, r12
     eb6:	9c 93       	st	X, r25
     eb8:	f6 01       	movw	r30, r12
     eba:	31 96       	adiw	r30, 0x01	; 1
     ebc:	6f 01       	movw	r12, r30
     ebe:	c6 01       	movw	r24, r12
     ec0:	03 96       	adiw	r24, 0x03	; 3
     ec2:	e2 fe       	sbrs	r14, 2
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <dtoa_prf+0xb6>
     ec6:	3e e4       	ldi	r19, 0x4E	; 78
     ec8:	d6 01       	movw	r26, r12
     eca:	3c 93       	st	X, r19
     ecc:	41 e4       	ldi	r20, 0x41	; 65
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	4c 93       	st	X, r20
     ed2:	11 97       	sbiw	r26, 0x01	; 1
     ed4:	12 96       	adiw	r26, 0x02	; 2
     ed6:	3c 93       	st	X, r19
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <dtoa_prf+0xc2>
     eda:	3e e6       	ldi	r19, 0x6E	; 110
     edc:	f6 01       	movw	r30, r12
     ede:	30 83       	st	Z, r19
     ee0:	41 e6       	ldi	r20, 0x61	; 97
     ee2:	41 83       	std	Z+1, r20	; 0x01
     ee4:	32 83       	std	Z+2, r19	; 0x02
     ee6:	fc 01       	movw	r30, r24
     ee8:	32 2f       	mov	r19, r18
     eea:	40 e2       	ldi	r20, 0x20	; 32
     eec:	33 23       	and	r19, r19
     eee:	09 f4       	brne	.+2      	; 0xef2 <dtoa_prf+0xce>
     ef0:	42 c0       	rjmp	.+132    	; 0xf76 <dtoa_prf+0x152>
     ef2:	41 93       	st	Z+, r20
     ef4:	31 50       	subi	r19, 0x01	; 1
     ef6:	fa cf       	rjmp	.-12     	; 0xeec <dtoa_prf+0xc8>
     ef8:	42 ff       	sbrs	r20, 2
     efa:	44 c0       	rjmp	.+136    	; 0xf84 <dtoa_prf+0x160>
     efc:	91 11       	cpse	r25, r1
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <dtoa_prf+0xe0>
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <dtoa_prf+0xe2>
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	81 17       	cp	r24, r17
     f08:	18 f4       	brcc	.+6      	; 0xf10 <dtoa_prf+0xec>
     f0a:	21 2f       	mov	r18, r17
     f0c:	28 1b       	sub	r18, r24
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <dtoa_prf+0xee>
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	51 11       	cpse	r21, r1
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <dtoa_prf+0x108>
     f16:	f6 01       	movw	r30, r12
     f18:	82 2f       	mov	r24, r18
     f1a:	30 e2       	ldi	r19, 0x20	; 32
     f1c:	88 23       	and	r24, r24
     f1e:	19 f0       	breq	.+6      	; 0xf26 <dtoa_prf+0x102>
     f20:	31 93       	st	Z+, r19
     f22:	81 50       	subi	r24, 0x01	; 1
     f24:	fb cf       	rjmp	.-10     	; 0xf1c <dtoa_prf+0xf8>
     f26:	c2 0e       	add	r12, r18
     f28:	d1 1c       	adc	r13, r1
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	99 23       	and	r25, r25
     f2e:	29 f0       	breq	.+10     	; 0xf3a <dtoa_prf+0x116>
     f30:	d6 01       	movw	r26, r12
     f32:	9c 93       	st	X, r25
     f34:	f6 01       	movw	r30, r12
     f36:	31 96       	adiw	r30, 0x01	; 1
     f38:	6f 01       	movw	r12, r30
     f3a:	c6 01       	movw	r24, r12
     f3c:	03 96       	adiw	r24, 0x03	; 3
     f3e:	e2 fe       	sbrs	r14, 2
     f40:	0b c0       	rjmp	.+22     	; 0xf58 <dtoa_prf+0x134>
     f42:	39 e4       	ldi	r19, 0x49	; 73
     f44:	d6 01       	movw	r26, r12
     f46:	3c 93       	st	X, r19
     f48:	3e e4       	ldi	r19, 0x4E	; 78
     f4a:	11 96       	adiw	r26, 0x01	; 1
     f4c:	3c 93       	st	X, r19
     f4e:	11 97       	sbiw	r26, 0x01	; 1
     f50:	36 e4       	ldi	r19, 0x46	; 70
     f52:	12 96       	adiw	r26, 0x02	; 2
     f54:	3c 93       	st	X, r19
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <dtoa_prf+0x142>
     f58:	39 e6       	ldi	r19, 0x69	; 105
     f5a:	f6 01       	movw	r30, r12
     f5c:	30 83       	st	Z, r19
     f5e:	3e e6       	ldi	r19, 0x6E	; 110
     f60:	31 83       	std	Z+1, r19	; 0x01
     f62:	36 e6       	ldi	r19, 0x66	; 102
     f64:	32 83       	std	Z+2, r19	; 0x02
     f66:	fc 01       	movw	r30, r24
     f68:	32 2f       	mov	r19, r18
     f6a:	40 e2       	ldi	r20, 0x20	; 32
     f6c:	33 23       	and	r19, r19
     f6e:	19 f0       	breq	.+6      	; 0xf76 <dtoa_prf+0x152>
     f70:	41 93       	st	Z+, r20
     f72:	31 50       	subi	r19, 0x01	; 1
     f74:	fb cf       	rjmp	.-10     	; 0xf6c <dtoa_prf+0x148>
     f76:	fc 01       	movw	r30, r24
     f78:	e2 0f       	add	r30, r18
     f7a:	f1 1d       	adc	r31, r1
     f7c:	10 82       	st	Z, r1
     f7e:	8e ef       	ldi	r24, 0xFE	; 254
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	a6 c0       	rjmp	.+332    	; 0x10d0 <dtoa_prf+0x2ac>
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	91 11       	cpse	r25, r1
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <dtoa_prf+0x16c>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	16 16       	cp	r1, r22
     f92:	17 06       	cpc	r1, r23
     f94:	1c f4       	brge	.+6      	; 0xf9c <dtoa_prf+0x178>
     f96:	fb 01       	movw	r30, r22
     f98:	31 96       	adiw	r30, 0x01	; 1
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <dtoa_prf+0x17c>
     f9c:	e1 e0       	ldi	r30, 0x01	; 1
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	2e 0f       	add	r18, r30
     fa2:	3f 1f       	adc	r19, r31
     fa4:	bb 20       	and	r11, r11
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <dtoa_prf+0x18c>
     fa8:	eb 2d       	mov	r30, r11
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	31 96       	adiw	r30, 0x01	; 1
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <dtoa_prf+0x190>
     fb0:	e0 e0       	ldi	r30, 0x00	; 0
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	2e 0f       	add	r18, r30
     fb6:	3f 1f       	adc	r19, r31
     fb8:	e1 2f       	mov	r30, r17
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	2e 17       	cp	r18, r30
     fbe:	3f 07       	cpc	r19, r31
     fc0:	1c f4       	brge	.+6      	; 0xfc8 <dtoa_prf+0x1a4>
     fc2:	12 1b       	sub	r17, r18
     fc4:	21 2f       	mov	r18, r17
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <dtoa_prf+0x1a6>
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	8e 2d       	mov	r24, r14
     fcc:	88 71       	andi	r24, 0x18	; 24
     fce:	59 f4       	brne	.+22     	; 0xfe6 <dtoa_prf+0x1c2>
     fd0:	f6 01       	movw	r30, r12
     fd2:	82 2f       	mov	r24, r18
     fd4:	30 e2       	ldi	r19, 0x20	; 32
     fd6:	88 23       	and	r24, r24
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <dtoa_prf+0x1bc>
     fda:	31 93       	st	Z+, r19
     fdc:	81 50       	subi	r24, 0x01	; 1
     fde:	fb cf       	rjmp	.-10     	; 0xfd6 <dtoa_prf+0x1b2>
     fe0:	c2 0e       	add	r12, r18
     fe2:	d1 1c       	adc	r13, r1
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	99 23       	and	r25, r25
     fe8:	29 f0       	breq	.+10     	; 0xff4 <dtoa_prf+0x1d0>
     fea:	d6 01       	movw	r26, r12
     fec:	9c 93       	st	X, r25
     fee:	f6 01       	movw	r30, r12
     ff0:	31 96       	adiw	r30, 0x01	; 1
     ff2:	6f 01       	movw	r12, r30
     ff4:	51 11       	cpse	r21, r1
     ff6:	0b c0       	rjmp	.+22     	; 0x100e <dtoa_prf+0x1ea>
     ff8:	f6 01       	movw	r30, r12
     ffa:	82 2f       	mov	r24, r18
     ffc:	90 e3       	ldi	r25, 0x30	; 48
     ffe:	88 23       	and	r24, r24
    1000:	19 f0       	breq	.+6      	; 0x1008 <dtoa_prf+0x1e4>
    1002:	91 93       	st	Z+, r25
    1004:	81 50       	subi	r24, 0x01	; 1
    1006:	fb cf       	rjmp	.-10     	; 0xffe <dtoa_prf+0x1da>
    1008:	c2 0e       	add	r12, r18
    100a:	d1 1c       	adc	r13, r1
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	0f 2d       	mov	r16, r15
    1010:	06 0f       	add	r16, r22
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	34 2f       	mov	r19, r20
    1016:	30 71       	andi	r19, 0x10	; 16
    1018:	44 ff       	sbrs	r20, 4
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <dtoa_prf+0x1fe>
    101c:	91 33       	cpi	r25, 0x31	; 49
    101e:	09 f4       	brne	.+2      	; 0x1022 <dtoa_prf+0x1fe>
    1020:	01 50       	subi	r16, 0x01	; 1
    1022:	10 16       	cp	r1, r16
    1024:	24 f4       	brge	.+8      	; 0x102e <dtoa_prf+0x20a>
    1026:	09 30       	cpi	r16, 0x09	; 9
    1028:	18 f0       	brcs	.+6      	; 0x1030 <dtoa_prf+0x20c>
    102a:	08 e0       	ldi	r16, 0x08	; 8
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <dtoa_prf+0x20c>
    102e:	01 e0       	ldi	r16, 0x01	; 1
    1030:	ab 01       	movw	r20, r22
    1032:	77 ff       	sbrs	r23, 7
    1034:	02 c0       	rjmp	.+4      	; 0x103a <dtoa_prf+0x216>
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	fb 01       	movw	r30, r22
    103c:	e4 1b       	sub	r30, r20
    103e:	f5 0b       	sbc	r31, r21
    1040:	a1 e0       	ldi	r26, 0x01	; 1
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ac 0f       	add	r26, r28
    1046:	bd 1f       	adc	r27, r29
    1048:	ea 0f       	add	r30, r26
    104a:	fb 1f       	adc	r31, r27
    104c:	8e e2       	ldi	r24, 0x2E	; 46
    104e:	a8 2e       	mov	r10, r24
    1050:	4b 01       	movw	r8, r22
    1052:	80 1a       	sub	r8, r16
    1054:	91 08       	sbc	r9, r1
    1056:	0b 2d       	mov	r16, r11
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	11 95       	neg	r17
    105c:	01 95       	neg	r16
    105e:	11 09       	sbc	r17, r1
    1060:	4f 3f       	cpi	r20, 0xFF	; 255
    1062:	bf ef       	ldi	r27, 0xFF	; 255
    1064:	5b 07       	cpc	r21, r27
    1066:	21 f4       	brne	.+8      	; 0x1070 <dtoa_prf+0x24c>
    1068:	d6 01       	movw	r26, r12
    106a:	ac 92       	st	X, r10
    106c:	11 96       	adiw	r26, 0x01	; 1
    106e:	6d 01       	movw	r12, r26
    1070:	64 17       	cp	r22, r20
    1072:	75 07       	cpc	r23, r21
    1074:	2c f0       	brlt	.+10     	; 0x1080 <dtoa_prf+0x25c>
    1076:	84 16       	cp	r8, r20
    1078:	95 06       	cpc	r9, r21
    107a:	14 f4       	brge	.+4      	; 0x1080 <dtoa_prf+0x25c>
    107c:	81 81       	ldd	r24, Z+1	; 0x01
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <dtoa_prf+0x25e>
    1080:	80 e3       	ldi	r24, 0x30	; 48
    1082:	41 50       	subi	r20, 0x01	; 1
    1084:	51 09       	sbc	r21, r1
    1086:	31 96       	adiw	r30, 0x01	; 1
    1088:	d6 01       	movw	r26, r12
    108a:	11 96       	adiw	r26, 0x01	; 1
    108c:	7d 01       	movw	r14, r26
    108e:	40 17       	cp	r20, r16
    1090:	51 07       	cpc	r21, r17
    1092:	24 f0       	brlt	.+8      	; 0x109c <dtoa_prf+0x278>
    1094:	d6 01       	movw	r26, r12
    1096:	8c 93       	st	X, r24
    1098:	67 01       	movw	r12, r14
    109a:	e2 cf       	rjmp	.-60     	; 0x1060 <dtoa_prf+0x23c>
    109c:	64 17       	cp	r22, r20
    109e:	75 07       	cpc	r23, r21
    10a0:	39 f4       	brne	.+14     	; 0x10b0 <dtoa_prf+0x28c>
    10a2:	96 33       	cpi	r25, 0x36	; 54
    10a4:	20 f4       	brcc	.+8      	; 0x10ae <dtoa_prf+0x28a>
    10a6:	95 33       	cpi	r25, 0x35	; 53
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <dtoa_prf+0x28c>
    10aa:	31 11       	cpse	r19, r1
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <dtoa_prf+0x28c>
    10ae:	81 e3       	ldi	r24, 0x31	; 49
    10b0:	f6 01       	movw	r30, r12
    10b2:	80 83       	st	Z, r24
    10b4:	f7 01       	movw	r30, r14
    10b6:	82 2f       	mov	r24, r18
    10b8:	90 e2       	ldi	r25, 0x20	; 32
    10ba:	88 23       	and	r24, r24
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <dtoa_prf+0x2a0>
    10be:	91 93       	st	Z+, r25
    10c0:	81 50       	subi	r24, 0x01	; 1
    10c2:	fb cf       	rjmp	.-10     	; 0x10ba <dtoa_prf+0x296>
    10c4:	f7 01       	movw	r30, r14
    10c6:	e2 0f       	add	r30, r18
    10c8:	f1 1d       	adc	r31, r1
    10ca:	10 82       	st	Z, r1
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	29 96       	adiw	r28, 0x09	; 9
    10d2:	ec e0       	ldi	r30, 0x0C	; 12
    10d4:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__epilogue_restores__+0xc>

000010d8 <strtod>:
    10d8:	a0 e0       	ldi	r26, 0x00	; 0
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e2 e7       	ldi	r30, 0x72	; 114
    10de:	f8 e0       	ldi	r31, 0x08	; 8
    10e0:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__prologue_saves__+0xc>
    10e4:	ec 01       	movw	r28, r24
    10e6:	6b 01       	movw	r12, r22
    10e8:	61 15       	cp	r22, r1
    10ea:	71 05       	cpc	r23, r1
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <strtod+0x1c>
    10ee:	fb 01       	movw	r30, r22
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	80 83       	st	Z, r24
    10f4:	7e 01       	movw	r14, r28
    10f6:	ff ef       	ldi	r31, 0xFF	; 255
    10f8:	ef 1a       	sub	r14, r31
    10fa:	ff 0a       	sbc	r15, r31
    10fc:	08 81       	ld	r16, Y
    10fe:	80 2f       	mov	r24, r16
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 92 0a 	call	0x1524	; 0x1524 <isspace>
    1106:	89 2b       	or	r24, r25
    1108:	11 f0       	breq	.+4      	; 0x110e <strtod+0x36>
    110a:	e7 01       	movw	r28, r14
    110c:	f3 cf       	rjmp	.-26     	; 0x10f4 <strtod+0x1c>
    110e:	0d 32       	cpi	r16, 0x2D	; 45
    1110:	39 f4       	brne	.+14     	; 0x1120 <strtod+0x48>
    1112:	7e 01       	movw	r14, r28
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	e8 0e       	add	r14, r24
    1118:	f1 1c       	adc	r15, r1
    111a:	09 81       	ldd	r16, Y+1	; 0x01
    111c:	11 e0       	ldi	r17, 0x01	; 1
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <strtod+0x58>
    1120:	0b 32       	cpi	r16, 0x2B	; 43
    1122:	29 f4       	brne	.+10     	; 0x112e <strtod+0x56>
    1124:	7e 01       	movw	r14, r28
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	e9 0e       	add	r14, r25
    112a:	f1 1c       	adc	r15, r1
    112c:	09 81       	ldd	r16, Y+1	; 0x01
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	e7 01       	movw	r28, r14
    1132:	21 97       	sbiw	r28, 0x01	; 1
    1134:	43 e0       	ldi	r20, 0x03	; 3
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	60 e7       	ldi	r22, 0x70	; 112
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	ce 01       	movw	r24, r28
    113e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <strncasecmp_P>
    1142:	89 2b       	or	r24, r25
    1144:	c1 f4       	brne	.+48     	; 0x1176 <strtod+0x9e>
    1146:	23 96       	adiw	r28, 0x03	; 3
    1148:	45 e0       	ldi	r20, 0x05	; 5
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	6b e6       	ldi	r22, 0x6B	; 107
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	ce 01       	movw	r24, r28
    1152:	0e 94 9b 0a 	call	0x1536	; 0x1536 <strncasecmp_P>
    1156:	89 2b       	or	r24, r25
    1158:	09 f4       	brne	.+2      	; 0x115c <strtod+0x84>
    115a:	25 96       	adiw	r28, 0x05	; 5
    115c:	c1 14       	cp	r12, r1
    115e:	d1 04       	cpc	r13, r1
    1160:	19 f0       	breq	.+6      	; 0x1168 <strtod+0x90>
    1162:	f6 01       	movw	r30, r12
    1164:	d1 83       	std	Z+1, r29	; 0x01
    1166:	c0 83       	st	Z, r28
    1168:	11 11       	cpse	r17, r1
    116a:	f6 c0       	rjmp	.+492    	; 0x1358 <strtod+0x280>
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 e8       	ldi	r24, 0x80	; 128
    1172:	9f e7       	ldi	r25, 0x7F	; 127
    1174:	fa c0       	rjmp	.+500    	; 0x136a <strtod+0x292>
    1176:	43 e0       	ldi	r20, 0x03	; 3
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	68 e6       	ldi	r22, 0x68	; 104
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	ce 01       	movw	r24, r28
    1180:	0e 94 9b 0a 	call	0x1536	; 0x1536 <strncasecmp_P>
    1184:	89 2b       	or	r24, r25
    1186:	59 f4       	brne	.+22     	; 0x119e <strtod+0xc6>
    1188:	c1 14       	cp	r12, r1
    118a:	d1 04       	cpc	r13, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <strtod+0xb8>
    118e:	e9 c0       	rjmp	.+466    	; 0x1362 <strtod+0x28a>
    1190:	f2 e0       	ldi	r31, 0x02	; 2
    1192:	ef 0e       	add	r14, r31
    1194:	f1 1c       	adc	r15, r1
    1196:	f6 01       	movw	r30, r12
    1198:	f1 82       	std	Z+1, r15	; 0x01
    119a:	e0 82       	st	Z, r14
    119c:	e2 c0       	rjmp	.+452    	; 0x1362 <strtod+0x28a>
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	c0 e0       	ldi	r28, 0x00	; 0
    11a6:	d0 e0       	ldi	r29, 0x00	; 0
    11a8:	f7 01       	movw	r30, r14
    11aa:	80 ed       	ldi	r24, 0xD0	; 208
    11ac:	a8 2e       	mov	r10, r24
    11ae:	a0 0e       	add	r10, r16
    11b0:	89 e0       	ldi	r24, 0x09	; 9
    11b2:	8a 15       	cp	r24, r10
    11b4:	30 f1       	brcs	.+76     	; 0x1202 <strtod+0x12a>
    11b6:	91 2f       	mov	r25, r17
    11b8:	92 60       	ori	r25, 0x02	; 2
    11ba:	b9 2e       	mov	r11, r25
    11bc:	81 2f       	mov	r24, r17
    11be:	88 70       	andi	r24, 0x08	; 8
    11c0:	12 ff       	sbrs	r17, 2
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <strtod+0xf4>
    11c4:	81 11       	cpse	r24, r1
    11c6:	24 c0       	rjmp	.+72     	; 0x1210 <strtod+0x138>
    11c8:	21 96       	adiw	r28, 0x01	; 1
    11ca:	22 c0       	rjmp	.+68     	; 0x1210 <strtod+0x138>
    11cc:	81 11       	cpse	r24, r1
    11ce:	21 97       	sbiw	r28, 0x01	; 1
    11d0:	a5 e0       	ldi	r26, 0x05	; 5
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	0e 94 df 0a 	call	0x15be	; 0x15be <__muluhisi3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	aa 1f       	adc	r26, r26
    11e2:	bb 1f       	adc	r27, r27
    11e4:	9c 01       	movw	r18, r24
    11e6:	ad 01       	movw	r20, r26
    11e8:	2a 0d       	add	r18, r10
    11ea:	31 1d       	adc	r19, r1
    11ec:	41 1d       	adc	r20, r1
    11ee:	51 1d       	adc	r21, r1
    11f0:	28 39       	cpi	r18, 0x98	; 152
    11f2:	89 e9       	ldi	r24, 0x99	; 153
    11f4:	38 07       	cpc	r19, r24
    11f6:	48 07       	cpc	r20, r24
    11f8:	89 e1       	ldi	r24, 0x19	; 25
    11fa:	58 07       	cpc	r21, r24
    11fc:	48 f0       	brcs	.+18     	; 0x1210 <strtod+0x138>
    11fe:	16 60       	ori	r17, 0x06	; 6
    1200:	06 c0       	rjmp	.+12     	; 0x120e <strtod+0x136>
    1202:	9e ef       	ldi	r25, 0xFE	; 254
    1204:	a9 12       	cpse	r10, r25
    1206:	0a c0       	rjmp	.+20     	; 0x121c <strtod+0x144>
    1208:	13 fd       	sbrc	r17, 3
    120a:	40 c0       	rjmp	.+128    	; 0x128c <strtod+0x1b4>
    120c:	18 60       	ori	r17, 0x08	; 8
    120e:	b1 2e       	mov	r11, r17
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	e8 1a       	sub	r14, r24
    1214:	f8 0a       	sbc	r15, r24
    1216:	00 81       	ld	r16, Z
    1218:	1b 2d       	mov	r17, r11
    121a:	c6 cf       	rjmp	.-116    	; 0x11a8 <strtod+0xd0>
    121c:	80 2f       	mov	r24, r16
    121e:	8f 7d       	andi	r24, 0xDF	; 223
    1220:	85 34       	cpi	r24, 0x45	; 69
    1222:	a1 f5       	brne	.+104    	; 0x128c <strtod+0x1b4>
    1224:	80 81       	ld	r24, Z
    1226:	8d 32       	cpi	r24, 0x2D	; 45
    1228:	11 f4       	brne	.+4      	; 0x122e <strtod+0x156>
    122a:	10 61       	ori	r17, 0x10	; 16
    122c:	06 c0       	rjmp	.+12     	; 0x123a <strtod+0x162>
    122e:	8b 32       	cpi	r24, 0x2B	; 43
    1230:	21 f0       	breq	.+8      	; 0x123a <strtod+0x162>
    1232:	31 96       	adiw	r30, 0x01	; 1
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <strtod+0x16a>
    123a:	81 81       	ldd	r24, Z+1	; 0x01
    123c:	32 96       	adiw	r30, 0x02	; 2
    123e:	62 e0       	ldi	r22, 0x02	; 2
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	80 53       	subi	r24, 0x30	; 48
    1244:	8a 30       	cpi	r24, 0x0A	; 10
    1246:	18 f0       	brcs	.+6      	; 0x124e <strtod+0x176>
    1248:	e6 1b       	sub	r30, r22
    124a:	f7 0b       	sbc	r31, r23
    124c:	1f c0       	rjmp	.+62     	; 0x128c <strtod+0x1b4>
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	60 38       	cpi	r22, 0x80	; 128
    1254:	9c e0       	ldi	r25, 0x0C	; 12
    1256:	79 07       	cpc	r23, r25
    1258:	5c f4       	brge	.+22     	; 0x1270 <strtod+0x198>
    125a:	db 01       	movw	r26, r22
    125c:	aa 0f       	add	r26, r26
    125e:	bb 1f       	adc	r27, r27
    1260:	aa 0f       	add	r26, r26
    1262:	bb 1f       	adc	r27, r27
    1264:	6a 0f       	add	r22, r26
    1266:	7b 1f       	adc	r23, r27
    1268:	66 0f       	add	r22, r22
    126a:	77 1f       	adc	r23, r23
    126c:	68 0f       	add	r22, r24
    126e:	71 1d       	adc	r23, r1
    1270:	31 96       	adiw	r30, 0x01	; 1
    1272:	df 01       	movw	r26, r30
    1274:	11 97       	sbiw	r26, 0x01	; 1
    1276:	8c 91       	ld	r24, X
    1278:	80 53       	subi	r24, 0x30	; 48
    127a:	8a 30       	cpi	r24, 0x0A	; 10
    127c:	50 f3       	brcs	.-44     	; 0x1252 <strtod+0x17a>
    127e:	14 ff       	sbrs	r17, 4
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <strtod+0x1b0>
    1282:	71 95       	neg	r23
    1284:	61 95       	neg	r22
    1286:	71 09       	sbc	r23, r1
    1288:	c6 0f       	add	r28, r22
    128a:	d7 1f       	adc	r29, r23
    128c:	11 ff       	sbrs	r17, 1
    128e:	08 c0       	rjmp	.+16     	; 0x12a0 <strtod+0x1c8>
    1290:	c1 14       	cp	r12, r1
    1292:	d1 04       	cpc	r13, r1
    1294:	29 f0       	breq	.+10     	; 0x12a0 <strtod+0x1c8>
    1296:	cf 01       	movw	r24, r30
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f6 01       	movw	r30, r12
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	80 83       	st	Z, r24
    12a0:	ca 01       	movw	r24, r20
    12a2:	b9 01       	movw	r22, r18
    12a4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__floatunsisf>
    12a8:	21 2f       	mov	r18, r17
    12aa:	23 70       	andi	r18, 0x03	; 3
    12ac:	23 30       	cpi	r18, 0x03	; 3
    12ae:	19 f0       	breq	.+6      	; 0x12b6 <strtod+0x1de>
    12b0:	4b 01       	movw	r8, r22
    12b2:	5c 01       	movw	r10, r24
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <strtod+0x1ea>
    12b6:	4b 01       	movw	r8, r22
    12b8:	5c 01       	movw	r10, r24
    12ba:	b7 fa       	bst	r11, 7
    12bc:	b0 94       	com	r11
    12be:	b7 f8       	bld	r11, 7
    12c0:	b0 94       	com	r11
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	a9 01       	movw	r20, r18
    12c8:	c5 01       	movw	r24, r10
    12ca:	b4 01       	movw	r22, r8
    12cc:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__cmpsf2>
    12d0:	88 23       	and	r24, r24
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <strtod+0x1fe>
    12d4:	3e c0       	rjmp	.+124    	; 0x1352 <strtod+0x27a>
    12d6:	d7 ff       	sbrs	r29, 7
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <strtod+0x20e>
    12da:	d1 95       	neg	r29
    12dc:	c1 95       	neg	r28
    12de:	d1 09       	sbc	r29, r1
    12e0:	07 e8       	ldi	r16, 0x87	; 135
    12e2:	10 e0       	ldi	r17, 0x00	; 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <strtod+0x212>
    12e6:	0f e9       	ldi	r16, 0x9F	; 159
    12e8:	10 e0       	ldi	r17, 0x00	; 0
    12ea:	68 01       	movw	r12, r16
    12ec:	f8 e1       	ldi	r31, 0x18	; 24
    12ee:	cf 1a       	sub	r12, r31
    12f0:	d1 08       	sbc	r13, r1
    12f2:	90 e2       	ldi	r25, 0x20	; 32
    12f4:	e9 2e       	mov	r14, r25
    12f6:	f1 2c       	mov	r15, r1
    12f8:	ce 15       	cp	r28, r14
    12fa:	df 05       	cpc	r29, r15
    12fc:	74 f0       	brlt	.+28     	; 0x131a <strtod+0x242>
    12fe:	f8 01       	movw	r30, r16
    1300:	25 91       	lpm	r18, Z+
    1302:	35 91       	lpm	r19, Z+
    1304:	45 91       	lpm	r20, Z+
    1306:	54 91       	lpm	r21, Z
    1308:	c5 01       	movw	r24, r10
    130a:	b4 01       	movw	r22, r8
    130c:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3>
    1310:	4b 01       	movw	r8, r22
    1312:	5c 01       	movw	r10, r24
    1314:	ce 19       	sub	r28, r14
    1316:	df 09       	sbc	r29, r15
    1318:	ef cf       	rjmp	.-34     	; 0x12f8 <strtod+0x220>
    131a:	04 50       	subi	r16, 0x04	; 4
    131c:	11 09       	sbc	r17, r1
    131e:	f5 94       	asr	r15
    1320:	e7 94       	ror	r14
    1322:	0c 15       	cp	r16, r12
    1324:	1d 05       	cpc	r17, r13
    1326:	41 f7       	brne	.-48     	; 0x12f8 <strtod+0x220>
    1328:	8a 2d       	mov	r24, r10
    132a:	88 0f       	add	r24, r24
    132c:	8b 2d       	mov	r24, r11
    132e:	88 1f       	adc	r24, r24
    1330:	8f 3f       	cpi	r24, 0xFF	; 255
    1332:	49 f0       	breq	.+18     	; 0x1346 <strtod+0x26e>
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	a9 01       	movw	r20, r18
    133a:	c5 01       	movw	r24, r10
    133c:	b4 01       	movw	r22, r8
    133e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__cmpsf2>
    1342:	81 11       	cpse	r24, r1
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <strtod+0x27a>
    1346:	82 e2       	ldi	r24, 0x22	; 34
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <errno+0x1>
    134e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <errno>
    1352:	c5 01       	movw	r24, r10
    1354:	b4 01       	movw	r22, r8
    1356:	09 c0       	rjmp	.+18     	; 0x136a <strtod+0x292>
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	80 e8       	ldi	r24, 0x80	; 128
    135e:	9f ef       	ldi	r25, 0xFF	; 255
    1360:	04 c0       	rjmp	.+8      	; 0x136a <strtod+0x292>
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	80 ec       	ldi	r24, 0xC0	; 192
    1368:	9f e7       	ldi	r25, 0x7F	; 127
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	ec e0       	ldi	r30, 0x0C	; 12
    1370:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__epilogue_restores__+0xc>

00001374 <__ftoa_engine>:
    1374:	28 30       	cpi	r18, 0x08	; 8
    1376:	08 f0       	brcs	.+2      	; 0x137a <__ftoa_engine+0x6>
    1378:	27 e0       	ldi	r18, 0x07	; 7
    137a:	33 27       	eor	r19, r19
    137c:	da 01       	movw	r26, r20
    137e:	99 0f       	add	r25, r25
    1380:	31 1d       	adc	r19, r1
    1382:	87 fd       	sbrc	r24, 7
    1384:	91 60       	ori	r25, 0x01	; 1
    1386:	00 96       	adiw	r24, 0x00	; 0
    1388:	61 05       	cpc	r22, r1
    138a:	71 05       	cpc	r23, r1
    138c:	39 f4       	brne	.+14     	; 0x139c <__ftoa_engine+0x28>
    138e:	32 60       	ori	r19, 0x02	; 2
    1390:	2e 5f       	subi	r18, 0xFE	; 254
    1392:	3d 93       	st	X+, r19
    1394:	30 e3       	ldi	r19, 0x30	; 48
    1396:	2a 95       	dec	r18
    1398:	e1 f7       	brne	.-8      	; 0x1392 <__ftoa_engine+0x1e>
    139a:	08 95       	ret
    139c:	9f 3f       	cpi	r25, 0xFF	; 255
    139e:	30 f0       	brcs	.+12     	; 0x13ac <__ftoa_engine+0x38>
    13a0:	80 38       	cpi	r24, 0x80	; 128
    13a2:	71 05       	cpc	r23, r1
    13a4:	61 05       	cpc	r22, r1
    13a6:	09 f0       	breq	.+2      	; 0x13aa <__ftoa_engine+0x36>
    13a8:	3c 5f       	subi	r19, 0xFC	; 252
    13aa:	3c 5f       	subi	r19, 0xFC	; 252
    13ac:	3d 93       	st	X+, r19
    13ae:	91 30       	cpi	r25, 0x01	; 1
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <__ftoa_engine+0x40>
    13b2:	80 68       	ori	r24, 0x80	; 128
    13b4:	91 1d       	adc	r25, r1
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	1f 93       	push	r17
    13bc:	0f 93       	push	r16
    13be:	ff 92       	push	r15
    13c0:	ef 92       	push	r14
    13c2:	19 2f       	mov	r17, r25
    13c4:	98 7f       	andi	r25, 0xF8	; 248
    13c6:	96 95       	lsr	r25
    13c8:	e9 2f       	mov	r30, r25
    13ca:	96 95       	lsr	r25
    13cc:	96 95       	lsr	r25
    13ce:	e9 0f       	add	r30, r25
    13d0:	ff 27       	eor	r31, r31
    13d2:	e3 50       	subi	r30, 0x03	; 3
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	99 27       	eor	r25, r25
    13d8:	33 27       	eor	r19, r19
    13da:	ee 24       	eor	r14, r14
    13dc:	ff 24       	eor	r15, r15
    13de:	a7 01       	movw	r20, r14
    13e0:	e7 01       	movw	r28, r14
    13e2:	05 90       	lpm	r0, Z+
    13e4:	08 94       	sec
    13e6:	07 94       	ror	r0
    13e8:	28 f4       	brcc	.+10     	; 0x13f4 <__ftoa_engine+0x80>
    13ea:	36 0f       	add	r19, r22
    13ec:	e7 1e       	adc	r14, r23
    13ee:	f8 1e       	adc	r15, r24
    13f0:	49 1f       	adc	r20, r25
    13f2:	51 1d       	adc	r21, r1
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	06 94       	lsr	r0
    13fe:	a1 f7       	brne	.-24     	; 0x13e8 <__ftoa_engine+0x74>
    1400:	05 90       	lpm	r0, Z+
    1402:	07 94       	ror	r0
    1404:	28 f4       	brcc	.+10     	; 0x1410 <__ftoa_engine+0x9c>
    1406:	e7 0e       	add	r14, r23
    1408:	f8 1e       	adc	r15, r24
    140a:	49 1f       	adc	r20, r25
    140c:	56 1f       	adc	r21, r22
    140e:	c1 1d       	adc	r28, r1
    1410:	77 0f       	add	r23, r23
    1412:	88 1f       	adc	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	66 1f       	adc	r22, r22
    1418:	06 94       	lsr	r0
    141a:	a1 f7       	brne	.-24     	; 0x1404 <__ftoa_engine+0x90>
    141c:	05 90       	lpm	r0, Z+
    141e:	07 94       	ror	r0
    1420:	28 f4       	brcc	.+10     	; 0x142c <__ftoa_engine+0xb8>
    1422:	f8 0e       	add	r15, r24
    1424:	49 1f       	adc	r20, r25
    1426:	56 1f       	adc	r21, r22
    1428:	c7 1f       	adc	r28, r23
    142a:	d1 1d       	adc	r29, r1
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	66 1f       	adc	r22, r22
    1432:	77 1f       	adc	r23, r23
    1434:	06 94       	lsr	r0
    1436:	a1 f7       	brne	.-24     	; 0x1420 <__ftoa_engine+0xac>
    1438:	05 90       	lpm	r0, Z+
    143a:	07 94       	ror	r0
    143c:	20 f4       	brcc	.+8      	; 0x1446 <__ftoa_engine+0xd2>
    143e:	49 0f       	add	r20, r25
    1440:	56 1f       	adc	r21, r22
    1442:	c7 1f       	adc	r28, r23
    1444:	d8 1f       	adc	r29, r24
    1446:	99 0f       	add	r25, r25
    1448:	66 1f       	adc	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	88 1f       	adc	r24, r24
    144e:	06 94       	lsr	r0
    1450:	a9 f7       	brne	.-22     	; 0x143c <__ftoa_engine+0xc8>
    1452:	84 91       	lpm	r24, Z
    1454:	10 95       	com	r17
    1456:	17 70       	andi	r17, 0x07	; 7
    1458:	41 f0       	breq	.+16     	; 0x146a <__ftoa_engine+0xf6>
    145a:	d6 95       	lsr	r29
    145c:	c7 95       	ror	r28
    145e:	57 95       	ror	r21
    1460:	47 95       	ror	r20
    1462:	f7 94       	ror	r15
    1464:	e7 94       	ror	r14
    1466:	1a 95       	dec	r17
    1468:	c1 f7       	brne	.-16     	; 0x145a <__ftoa_engine+0xe6>
    146a:	e3 ea       	ldi	r30, 0xA3	; 163
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	68 94       	set
    1470:	15 90       	lpm	r1, Z+
    1472:	15 91       	lpm	r17, Z+
    1474:	35 91       	lpm	r19, Z+
    1476:	65 91       	lpm	r22, Z+
    1478:	95 91       	lpm	r25, Z+
    147a:	05 90       	lpm	r0, Z+
    147c:	7f e2       	ldi	r23, 0x2F	; 47
    147e:	73 95       	inc	r23
    1480:	e1 18       	sub	r14, r1
    1482:	f1 0a       	sbc	r15, r17
    1484:	43 0b       	sbc	r20, r19
    1486:	56 0b       	sbc	r21, r22
    1488:	c9 0b       	sbc	r28, r25
    148a:	d0 09       	sbc	r29, r0
    148c:	c0 f7       	brcc	.-16     	; 0x147e <__ftoa_engine+0x10a>
    148e:	e1 0c       	add	r14, r1
    1490:	f1 1e       	adc	r15, r17
    1492:	43 1f       	adc	r20, r19
    1494:	56 1f       	adc	r21, r22
    1496:	c9 1f       	adc	r28, r25
    1498:	d0 1d       	adc	r29, r0
    149a:	7e f4       	brtc	.+30     	; 0x14ba <__ftoa_engine+0x146>
    149c:	70 33       	cpi	r23, 0x30	; 48
    149e:	11 f4       	brne	.+4      	; 0x14a4 <__ftoa_engine+0x130>
    14a0:	8a 95       	dec	r24
    14a2:	e6 cf       	rjmp	.-52     	; 0x1470 <__ftoa_engine+0xfc>
    14a4:	e8 94       	clt
    14a6:	01 50       	subi	r16, 0x01	; 1
    14a8:	30 f0       	brcs	.+12     	; 0x14b6 <__ftoa_engine+0x142>
    14aa:	08 0f       	add	r16, r24
    14ac:	0a f4       	brpl	.+2      	; 0x14b0 <__ftoa_engine+0x13c>
    14ae:	00 27       	eor	r16, r16
    14b0:	02 17       	cp	r16, r18
    14b2:	08 f4       	brcc	.+2      	; 0x14b6 <__ftoa_engine+0x142>
    14b4:	20 2f       	mov	r18, r16
    14b6:	23 95       	inc	r18
    14b8:	02 2f       	mov	r16, r18
    14ba:	7a 33       	cpi	r23, 0x3A	; 58
    14bc:	28 f0       	brcs	.+10     	; 0x14c8 <__ftoa_engine+0x154>
    14be:	79 e3       	ldi	r23, 0x39	; 57
    14c0:	7d 93       	st	X+, r23
    14c2:	2a 95       	dec	r18
    14c4:	e9 f7       	brne	.-6      	; 0x14c0 <__ftoa_engine+0x14c>
    14c6:	10 c0       	rjmp	.+32     	; 0x14e8 <__ftoa_engine+0x174>
    14c8:	7d 93       	st	X+, r23
    14ca:	2a 95       	dec	r18
    14cc:	89 f6       	brne	.-94     	; 0x1470 <__ftoa_engine+0xfc>
    14ce:	06 94       	lsr	r0
    14d0:	97 95       	ror	r25
    14d2:	67 95       	ror	r22
    14d4:	37 95       	ror	r19
    14d6:	17 95       	ror	r17
    14d8:	17 94       	ror	r1
    14da:	e1 18       	sub	r14, r1
    14dc:	f1 0a       	sbc	r15, r17
    14de:	43 0b       	sbc	r20, r19
    14e0:	56 0b       	sbc	r21, r22
    14e2:	c9 0b       	sbc	r28, r25
    14e4:	d0 09       	sbc	r29, r0
    14e6:	98 f0       	brcs	.+38     	; 0x150e <__ftoa_engine+0x19a>
    14e8:	23 95       	inc	r18
    14ea:	7e 91       	ld	r23, -X
    14ec:	73 95       	inc	r23
    14ee:	7a 33       	cpi	r23, 0x3A	; 58
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <__ftoa_engine+0x180>
    14f2:	70 e3       	ldi	r23, 0x30	; 48
    14f4:	7c 93       	st	X, r23
    14f6:	20 13       	cpse	r18, r16
    14f8:	b8 f7       	brcc	.-18     	; 0x14e8 <__ftoa_engine+0x174>
    14fa:	7e 91       	ld	r23, -X
    14fc:	70 61       	ori	r23, 0x10	; 16
    14fe:	7d 93       	st	X+, r23
    1500:	30 f0       	brcs	.+12     	; 0x150e <__ftoa_engine+0x19a>
    1502:	83 95       	inc	r24
    1504:	71 e3       	ldi	r23, 0x31	; 49
    1506:	7d 93       	st	X+, r23
    1508:	70 e3       	ldi	r23, 0x30	; 48
    150a:	2a 95       	dec	r18
    150c:	e1 f7       	brne	.-8      	; 0x1506 <__ftoa_engine+0x192>
    150e:	11 24       	eor	r1, r1
    1510:	ef 90       	pop	r14
    1512:	ff 90       	pop	r15
    1514:	0f 91       	pop	r16
    1516:	1f 91       	pop	r17
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	99 27       	eor	r25, r25
    151e:	87 fd       	sbrc	r24, 7
    1520:	90 95       	com	r25
    1522:	08 95       	ret

00001524 <isspace>:
    1524:	91 11       	cpse	r25, r1
    1526:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__ctype_isfalse>
    152a:	80 32       	cpi	r24, 0x20	; 32
    152c:	19 f0       	breq	.+6      	; 0x1534 <isspace+0x10>
    152e:	89 50       	subi	r24, 0x09	; 9
    1530:	85 50       	subi	r24, 0x05	; 5
    1532:	c8 f7       	brcc	.-14     	; 0x1526 <isspace+0x2>
    1534:	08 95       	ret

00001536 <strncasecmp_P>:
    1536:	fb 01       	movw	r30, r22
    1538:	dc 01       	movw	r26, r24
    153a:	41 50       	subi	r20, 0x01	; 1
    153c:	50 40       	sbci	r21, 0x00	; 0
    153e:	88 f0       	brcs	.+34     	; 0x1562 <strncasecmp_P+0x2c>
    1540:	8d 91       	ld	r24, X+
    1542:	81 34       	cpi	r24, 0x41	; 65
    1544:	1c f0       	brlt	.+6      	; 0x154c <strncasecmp_P+0x16>
    1546:	8b 35       	cpi	r24, 0x5B	; 91
    1548:	0c f4       	brge	.+2      	; 0x154c <strncasecmp_P+0x16>
    154a:	80 5e       	subi	r24, 0xE0	; 224
    154c:	65 91       	lpm	r22, Z+
    154e:	61 34       	cpi	r22, 0x41	; 65
    1550:	1c f0       	brlt	.+6      	; 0x1558 <strncasecmp_P+0x22>
    1552:	6b 35       	cpi	r22, 0x5B	; 91
    1554:	0c f4       	brge	.+2      	; 0x1558 <strncasecmp_P+0x22>
    1556:	60 5e       	subi	r22, 0xE0	; 224
    1558:	86 1b       	sub	r24, r22
    155a:	61 11       	cpse	r22, r1
    155c:	71 f3       	breq	.-36     	; 0x153a <strncasecmp_P+0x4>
    155e:	99 0b       	sbc	r25, r25
    1560:	08 95       	ret
    1562:	88 1b       	sub	r24, r24
    1564:	fc cf       	rjmp	.-8      	; 0x155e <strncasecmp_P+0x28>

00001566 <__cmpsf2>:
    1566:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__fp_cmp>
    156a:	08 f4       	brcc	.+2      	; 0x156e <__cmpsf2+0x8>
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	08 95       	ret

00001570 <__fp_cmp>:
    1570:	99 0f       	add	r25, r25
    1572:	00 08       	sbc	r0, r0
    1574:	55 0f       	add	r21, r21
    1576:	aa 0b       	sbc	r26, r26
    1578:	e0 e8       	ldi	r30, 0x80	; 128
    157a:	fe ef       	ldi	r31, 0xFE	; 254
    157c:	16 16       	cp	r1, r22
    157e:	17 06       	cpc	r1, r23
    1580:	e8 07       	cpc	r30, r24
    1582:	f9 07       	cpc	r31, r25
    1584:	c0 f0       	brcs	.+48     	; 0x15b6 <__fp_cmp+0x46>
    1586:	12 16       	cp	r1, r18
    1588:	13 06       	cpc	r1, r19
    158a:	e4 07       	cpc	r30, r20
    158c:	f5 07       	cpc	r31, r21
    158e:	98 f0       	brcs	.+38     	; 0x15b6 <__fp_cmp+0x46>
    1590:	62 1b       	sub	r22, r18
    1592:	73 0b       	sbc	r23, r19
    1594:	84 0b       	sbc	r24, r20
    1596:	95 0b       	sbc	r25, r21
    1598:	39 f4       	brne	.+14     	; 0x15a8 <__fp_cmp+0x38>
    159a:	0a 26       	eor	r0, r26
    159c:	61 f0       	breq	.+24     	; 0x15b6 <__fp_cmp+0x46>
    159e:	23 2b       	or	r18, r19
    15a0:	24 2b       	or	r18, r20
    15a2:	25 2b       	or	r18, r21
    15a4:	21 f4       	brne	.+8      	; 0x15ae <__fp_cmp+0x3e>
    15a6:	08 95       	ret
    15a8:	0a 26       	eor	r0, r26
    15aa:	09 f4       	brne	.+2      	; 0x15ae <__fp_cmp+0x3e>
    15ac:	a1 40       	sbci	r26, 0x01	; 1
    15ae:	a6 95       	lsr	r26
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	81 1d       	adc	r24, r1
    15b4:	81 1d       	adc	r24, r1
    15b6:	08 95       	ret

000015b8 <__ctype_isfalse>:
    15b8:	99 27       	eor	r25, r25
    15ba:	88 27       	eor	r24, r24

000015bc <__ctype_istrue>:
    15bc:	08 95       	ret

000015be <__muluhisi3>:
    15be:	0e 94 21 0b 	call	0x1642	; 0x1642 <__umulhisi3>
    15c2:	a5 9f       	mul	r26, r21
    15c4:	90 0d       	add	r25, r0
    15c6:	b4 9f       	mul	r27, r20
    15c8:	90 0d       	add	r25, r0
    15ca:	a4 9f       	mul	r26, r20
    15cc:	80 0d       	add	r24, r0
    15ce:	91 1d       	adc	r25, r1
    15d0:	11 24       	eor	r1, r1
    15d2:	08 95       	ret

000015d4 <__prologue_saves__>:
    15d4:	2f 92       	push	r2
    15d6:	3f 92       	push	r3
    15d8:	4f 92       	push	r4
    15da:	5f 92       	push	r5
    15dc:	6f 92       	push	r6
    15de:	7f 92       	push	r7
    15e0:	8f 92       	push	r8
    15e2:	9f 92       	push	r9
    15e4:	af 92       	push	r10
    15e6:	bf 92       	push	r11
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	ca 1b       	sub	r28, r26
    15fe:	db 0b       	sbc	r29, r27
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	09 94       	ijmp

0000160c <__epilogue_restores__>:
    160c:	2a 88       	ldd	r2, Y+18	; 0x12
    160e:	39 88       	ldd	r3, Y+17	; 0x11
    1610:	48 88       	ldd	r4, Y+16	; 0x10
    1612:	5f 84       	ldd	r5, Y+15	; 0x0f
    1614:	6e 84       	ldd	r6, Y+14	; 0x0e
    1616:	7d 84       	ldd	r7, Y+13	; 0x0d
    1618:	8c 84       	ldd	r8, Y+12	; 0x0c
    161a:	9b 84       	ldd	r9, Y+11	; 0x0b
    161c:	aa 84       	ldd	r10, Y+10	; 0x0a
    161e:	b9 84       	ldd	r11, Y+9	; 0x09
    1620:	c8 84       	ldd	r12, Y+8	; 0x08
    1622:	df 80       	ldd	r13, Y+7	; 0x07
    1624:	ee 80       	ldd	r14, Y+6	; 0x06
    1626:	fd 80       	ldd	r15, Y+5	; 0x05
    1628:	0c 81       	ldd	r16, Y+4	; 0x04
    162a:	1b 81       	ldd	r17, Y+3	; 0x03
    162c:	aa 81       	ldd	r26, Y+2	; 0x02
    162e:	b9 81       	ldd	r27, Y+1	; 0x01
    1630:	ce 0f       	add	r28, r30
    1632:	d1 1d       	adc	r29, r1
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	ed 01       	movw	r28, r26
    1640:	08 95       	ret

00001642 <__umulhisi3>:
    1642:	a2 9f       	mul	r26, r18
    1644:	b0 01       	movw	r22, r0
    1646:	b3 9f       	mul	r27, r19
    1648:	c0 01       	movw	r24, r0
    164a:	a3 9f       	mul	r26, r19
    164c:	70 0d       	add	r23, r0
    164e:	81 1d       	adc	r24, r1
    1650:	11 24       	eor	r1, r1
    1652:	91 1d       	adc	r25, r1
    1654:	b2 9f       	mul	r27, r18
    1656:	70 0d       	add	r23, r0
    1658:	81 1d       	adc	r24, r1
    165a:	11 24       	eor	r1, r1
    165c:	91 1d       	adc	r25, r1
    165e:	08 95       	ret

00001660 <_exit>:
    1660:	f8 94       	cli

00001662 <__stop_program>:
    1662:	ff cf       	rjmp	.-2      	; 0x1662 <__stop_program>
