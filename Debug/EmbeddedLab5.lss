
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000011f4  00001288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800116  00800116  0000129e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001253  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aab  00000000  00000000  000025c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f5  00000000  00000000  0000306e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00003af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d1a  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004d9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_18>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_20>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_24>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__fp_splitA+0x4>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <twi_read+0x10e>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <__vector_18+0x7c>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <get_adc_value+0x16>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e4 ef       	ldi	r30, 0xF4	; 244
     176:	f1 e1       	ldi	r31, 0x11	; 17
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a6 31       	cpi	r26, 0x16	; 22
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a6 e1       	ldi	r26, 0x16	; 22
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a3 3a       	cpi	r26, 0xA3	; 163
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
     198:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <setup>:
#define DAC0 0x00
#define DAC1 0x01
#define MAX518 0b01000000

void setup(){
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
     1a0:	ea e7       	ldi	r30, 0x7A	; 122
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	87 68       	ori	r24, 0x87	; 135
     1a8:	80 83       	st	Z, r24
	ADMUX = 0b00000000;   // clear ADMUX for ADC0 pin 
     1aa:	ec e7       	ldi	r30, 0x7C	; 124
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0); // setup internal reference voltage of 1.1V
     1b0:	80 81       	ld	r24, Z
     1b2:	80 64       	ori	r24, 0x40	; 64
     1b4:	80 83       	st	Z, r24
     1b6:	08 95       	ret

000001b8 <get_adc_value>:
			read_command(uart_get_command());
		}
	}
}

char * get_adc_value(){
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
	ADCSRA |= (1<<ADSC);      // enable a single conversion
     1c0:	ea e7       	ldi	r30, 0x7A	; 122
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	80 64       	ori	r24, 0x40	; 64
     1c8:	80 83       	st	Z, r24
	
	while (!(ADCSRA & (1<<ADIF))); // wait for the conversion to be completed		
     1ca:	80 81       	ld	r24, Z
     1cc:	84 ff       	sbrs	r24, 4
     1ce:	fd cf       	rjmp	.-6      	; 0x1ca <get_adc_value+0x12>
	
	float result = (ADC*5.0)/1024;	// convert to float 
     1d0:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     1d4:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
	char * buffer = (char* ) malloc(6 * sizeof(char));	
     1d8:	86 e0       	ldi	r24, 0x06	; 6
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 42 05 	call	0xa84	; 0xa84 <malloc>
     1e0:	ec 01       	movw	r28, r24
	dtostrf(result, 3, 2, buffer); // convert float to string 
     1e2:	b8 01       	movw	r22, r16
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 05 04 	call	0x80a	; 0x80a <__floatunsisf>
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	40 ea       	ldi	r20, 0xA0	; 160
     1f2:	50 e4       	ldi	r21, 0x40	; 64
     1f4:	0e 94 42 04 	call	0x884	; 0x884 <__mulsf3>
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e8       	ldi	r20, 0x80	; 128
     1fe:	5a e3       	ldi	r21, 0x3A	; 58
     200:	0e 94 42 04 	call	0x884	; 0x884 <__mulsf3>
     204:	8e 01       	movw	r16, r28
     206:	22 e0       	ldi	r18, 0x02	; 2
     208:	43 e0       	ldi	r20, 0x03	; 3
     20a:	0e 94 22 05 	call	0xa44	; 0xa44 <dtostrf>

	ADCSRA |= (1<<ADIF);		// reset AD complete flag for next conversion. 
     20e:	ea e7       	ldi	r30, 0x7A	; 122
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 61       	ori	r24, 0x10	; 16
     216:	80 83       	st	Z, r24
	
	return buffer; 
}
     218:	ce 01       	movw	r24, r28
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	08 95       	ret

00000224 <print_adc_value>:

void print_adc_value(char * buffer){
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	00 d0       	rcall	.+0      	; 0x22e <print_adc_value+0xa>
     22e:	00 d0       	rcall	.+0      	; 0x230 <print_adc_value+0xc>
     230:	1f 92       	push	r1
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	8c 01       	movw	r16, r24
	char header[] = "V = ";
     238:	85 e0       	ldi	r24, 0x05	; 5
     23a:	e8 e0       	ldi	r30, 0x08	; 8
     23c:	f1 e0       	ldi	r31, 0x01	; 1
     23e:	de 01       	movw	r26, r28
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	01 90       	ld	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	8a 95       	dec	r24
     248:	e1 f7       	brne	.-8      	; 0x242 <print_adc_value+0x1e>
	uart_send_string(header);
     24a:	ce 01       	movw	r24, r28
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	0e 94 4b 02 	call	0x496	; 0x496 <uart_send_string>
	uart_send_string(buffer);
     252:	c8 01       	movw	r24, r16
     254:	0e 94 4b 02 	call	0x496	; 0x496 <uart_send_string>
	uart_send_byte('\n');
     258:	8a e0       	ldi	r24, 0x0A	; 10
     25a:	0e 94 42 02 	call	0x484	; 0x484 <uart_send_byte>
	free(buffer); 
     25e:	c8 01       	movw	r24, r16
     260:	0e 94 da 05 	call	0xbb4	; 0xbb4 <free>
}
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	08 95       	ret

00000278 <read_command>:
void read_command(char * command) {
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	00 d0       	rcall	.+0      	; 0x282 <read_command+0xa>
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	8c 01       	movw	r16, r24
	if (command[0] == 'G'){
     288:	fc 01       	movw	r30, r24
     28a:	80 81       	ld	r24, Z
     28c:	87 34       	cpi	r24, 0x47	; 71
     28e:	19 f4       	brne	.+6      	; 0x296 <read_command+0x1e>
		get_adc_value();
     290:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_adc_value>
     294:	1a c0       	rjmp	.+52     	; 0x2ca <read_command+0x52>
	} else {
		char delim[] = ",";
     296:	8c e2       	ldi	r24, 0x2C	; 44
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	9a 83       	std	Y+2, r25	; 0x02
     29c:	89 83       	std	Y+1, r24	; 0x01
		char * token = strtok(command, delim);
     29e:	be 01       	movw	r22, r28
     2a0:	6f 5f       	subi	r22, 0xFF	; 255
     2a2:	7f 4f       	sbci	r23, 0xFF	; 255
     2a4:	c8 01       	movw	r24, r16
     2a6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <strtok>
		while(token != NULL){
     2aa:	00 97       	sbiw	r24, 0x00	; 0
     2ac:	71 f0       	breq	.+28     	; 0x2ca <read_command+0x52>
			if(token == 'G'){
     2ae:	87 34       	cpi	r24, 0x47	; 71
     2b0:	91 05       	cpc	r25, r1
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <read_command+0x40>
				get_adc_value();
     2b4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_adc_value>
			}
			//uart_send_string(token);
			token = strtok(NULL, delim);
     2b8:	be 01       	movw	r22, r28
     2ba:	6f 5f       	subi	r22, 0xFF	; 255
     2bc:	7f 4f       	sbci	r23, 0xFF	; 255
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <strtok>
	if (command[0] == 'G'){
		get_adc_value();
	} else {
		char delim[] = ",";
		char * token = strtok(command, delim);
		while(token != NULL){
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	91 f7       	brne	.-28     	; 0x2ae <read_command+0x36>
			//uart_send_string(token);
			token = strtok(NULL, delim);
	}
	}
	
	free(command);
     2ca:	c8 01       	movw	r24, r16
     2cc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <free>
}
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	08 95       	ret

000002de <main>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
	ADMUX = 0b00000000;   // clear ADMUX for ADC0 pin 
	ADMUX |= (1<<REFS0); // setup internal reference voltage of 1.1V
}

int main(void) {
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	2a 97       	sbiw	r28, 0x0a	; 10
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
	char str[] = "Started!";
     2f2:	89 e0       	ldi	r24, 0x09	; 9
     2f4:	ed e0       	ldi	r30, 0x0D	; 13
     2f6:	f1 e0       	ldi	r31, 0x01	; 1
     2f8:	de 01       	movw	r26, r28
     2fa:	11 96       	adiw	r26, 0x01	; 1
     2fc:	01 90       	ld	r0, Z+
     2fe:	0d 92       	st	X+, r0
     300:	8a 95       	dec	r24
     302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x1e>
	uint8_t voltage = 0;
	uint32_t speed = 100000;
	uint32_t baud = 9600; 	 
	char * adc; 
	uint8_t err = 0; 
	setup();
     304:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <setup>
	twi_init(speed);
     308:	60 ea       	ldi	r22, 0xA0	; 160
     30a:	76 e8       	ldi	r23, 0x86	; 134
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <twi_init>
	uart_init(baud);
     314:	60 e8       	ldi	r22, 0x80	; 128
     316:	75 e2       	ldi	r23, 0x25	; 37
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 07 02 	call	0x40e	; 0x40e <uart_init>

	voltage = 100;
	uint8_t data[1] = {voltage};
     320:	84 e6       	ldi	r24, 0x64	; 100
     322:	8a 87       	std	Y+10, r24	; 0x0a
	sei();
     324:	78 94       	sei
	adc = get_adc_value();
     326:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_adc_value>
	
	uart_send_string(str);
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	0e 94 4b 02 	call	0x496	; 0x496 <uart_send_string>
	uart_send_byte('\n');	
     332:	8a e0       	ldi	r24, 0x0A	; 10
     334:	0e 94 42 02 	call	0x484	; 0x484 <uart_send_byte>
	err = twi_wire(MAX518, DAC0, data, sizeof(data));
     338:	21 e0       	ldi	r18, 0x01	; 1
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	ae 01       	movw	r20, r28
     33e:	46 5f       	subi	r20, 0xF6	; 246
     340:	5f 4f       	sbci	r21, 0xFF	; 255
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	80 e4       	ldi	r24, 0x40	; 64
     346:	0e 94 8a 03 	call	0x714	; 0x714 <twi_wire>
	adc = get_adc_value();
     34a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <get_adc_value>
	print_adc_value(adc);
     34e:	0e 94 12 01 	call	0x224	; 0x224 <print_adc_value>
	
	while (1) {	
		if(uart_string_complete()){
     352:	0e 94 04 02 	call	0x408	; 0x408 <uart_string_complete>
     356:	88 23       	and	r24, r24
     358:	e1 f3       	breq	.-8      	; 0x352 <main+0x74>
			read_command(uart_get_command());
     35a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <uart_get_command>
     35e:	0e 94 3c 01 	call	0x278	; 0x278 <read_command>
     362:	f7 cf       	rjmp	.-18     	; 0x352 <main+0x74>

00000364 <__vector_18>:

volatile static uint8_t uart_tx_busy = 1;
volatile static uint8_t uart_fetch_complete = 0;		// when the buffer has reached a '\n' char flag set to 1. once the string has been read from flag set to 0. 
UARTBuffer uart_buffer; 

ISR(USART_RX_vect){
     364:	1f 92       	push	r1
     366:	0f 92       	push	r0
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	0f 92       	push	r0
     36c:	11 24       	eor	r1, r1
     36e:	2f 93       	push	r18
     370:	8f 93       	push	r24
     372:	9f 93       	push	r25
     374:	af 93       	push	r26
     376:	bf 93       	push	r27
     378:	ef 93       	push	r30
     37a:	ff 93       	push	r31
	if (UDR0 == '\n' || UDR0 == '\r') { // if a newline or carriage return is received
     37c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     380:	8a 30       	cpi	r24, 0x0A	; 10
     382:	21 f0       	breq	.+8      	; 0x38c <__vector_18+0x28>
     384:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     388:	8d 30       	cpi	r24, 0x0D	; 13
     38a:	21 f4       	brne	.+8      	; 0x394 <__vector_18+0x30>
		uart_fetch_complete = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
     392:	14 c0       	rjmp	.+40     	; 0x3bc <__vector_18+0x58>
	} else {
		uart_buffer.buffer[uart_buffer.head] = UDR0;			 // read in the UDR0 register
     394:	eb e9       	ldi	r30, 0x9B	; 155
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	80 81       	ld	r24, Z
     39a:	91 81       	ldd	r25, Z+1	; 0x01
     39c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     3a0:	dc 01       	movw	r26, r24
     3a2:	a7 5e       	subi	r26, 0xE7	; 231
     3a4:	be 4f       	sbci	r27, 0xFE	; 254
     3a6:	2c 93       	st	X, r18
		uart_buffer.head++;
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	91 83       	std	Z+1, r25	; 0x01
     3ac:	80 83       	st	Z, r24
		uart_buffer.size++;
     3ae:	e9 e9       	ldi	r30, 0x99	; 153
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
     3b2:	80 81       	ld	r24, Z
     3b4:	91 81       	ldd	r25, Z+1	; 0x01
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	91 83       	std	Z+1, r25	; 0x01
     3ba:	80 83       	st	Z, r24
	}
	
	if (uart_buffer.head >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
     3bc:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <uart_buffer+0x82>
     3c0:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <uart_buffer+0x83>
     3c4:	80 38       	cpi	r24, 0x80	; 128
     3c6:	91 05       	cpc	r25, r1
     3c8:	20 f0       	brcs	.+8      	; 0x3d2 <__vector_18+0x6e>
		uart_buffer.head = 0;
     3ca:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <uart_buffer+0x83>
     3ce:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <uart_buffer+0x82>
	}
	
}
     3d2:	ff 91       	pop	r31
     3d4:	ef 91       	pop	r30
     3d6:	bf 91       	pop	r27
     3d8:	af 91       	pop	r26
     3da:	9f 91       	pop	r25
     3dc:	8f 91       	pop	r24
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <__vector_20>:

ISR(USART_TX_vect){
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	8f 93       	push	r24
	uart_tx_busy = 1;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     3fc:	8f 91       	pop	r24
     3fe:	0f 90       	pop	r0
     400:	0f be       	out	0x3f, r0	; 63
     402:	0f 90       	pop	r0
     404:	1f 90       	pop	r1
     406:	18 95       	reti

00000408 <uart_string_complete>:

uint8_t uart_string_complete(){
	return uart_fetch_complete;
     408:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
}
     40c:	08 95       	ret

0000040e <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	aa 1f       	adc	r26, r26
     418:	bb 1f       	adc	r27, r27
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	aa 1f       	adc	r26, r26
     420:	bb 1f       	adc	r27, r27
     422:	9c 01       	movw	r18, r24
     424:	ad 01       	movw	r20, r26
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	44 1f       	adc	r20, r20
     434:	55 1f       	adc	r21, r21
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	74 e2       	ldi	r23, 0x24	; 36
     43a:	84 ef       	ldi	r24, 0xF4	; 244
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 00 05 	call	0xa00	; 0xa00 <__udivmodsi4>
     442:	ba 01       	movw	r22, r20
     444:	a9 01       	movw	r20, r18
     446:	41 50       	subi	r20, 0x01	; 1
     448:	51 09       	sbc	r21, r1
     44a:	61 09       	sbc	r22, r1
     44c:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
     44e:	db 01       	movw	r26, r22
     450:	ca 01       	movw	r24, r20
     452:	88 27       	eor	r24, r24
     454:	9f 70       	andi	r25, 0x0F	; 15
     456:	aa 27       	eor	r26, r26
     458:	bb 27       	eor	r27, r27
     45a:	89 2f       	mov	r24, r25
     45c:	9a 2f       	mov	r25, r26
     45e:	ab 2f       	mov	r26, r27
     460:	bb 27       	eor	r27, r27
     462:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
     466:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
     46a:	e1 ec       	ldi	r30, 0xC1	; 193
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	88 6d       	ori	r24, 0xD8	; 216
     472:	80 83       	st	Z, r24
	
	/* Initialize Objects */
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};		
     474:	e9 e1       	ldi	r30, 0x19	; 25
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	86 e8       	ldi	r24, 0x86	; 134
     47a:	df 01       	movw	r26, r30
     47c:	1d 92       	st	X+, r1
     47e:	8a 95       	dec	r24
     480:	e9 f7       	brne	.-6      	; 0x47c <uart_init+0x6e>
     482:	08 95       	ret

00000484 <uart_send_byte>:
}


void uart_send_byte(char data){
	while(uart_tx_busy == 0); // while UART is not transmitting
     484:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     488:	99 23       	and	r25, r25
     48a:	e1 f3       	breq	.-8      	; 0x484 <uart_send_byte>
	
	uart_tx_busy = 0; 
     48c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = data;				// load byte passed into the function to the uart buffer
     490:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     494:	08 95       	ret

00000496 <uart_send_string>:
}

void uart_send_string(char *arr) {
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
     49c:	89 91       	ld	r24, Y+
     49e:	0e 94 42 02 	call	0x484	; 0x484 <uart_send_byte>
		i++;
	} while(arr[i] != '\0');
     4a2:	88 81       	ld	r24, Y
     4a4:	81 11       	cpse	r24, r1
     4a6:	fa cf       	rjmp	.-12     	; 0x49c <uart_send_string+0x6>

}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <uart_get_buffer_size>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
     4ae:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <uart_buffer+0x80>
     4b2:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <uart_buffer+0x81>
     4b6:	08 95       	ret

000004b8 <uart_read_buffer>:
	command[i] = '\0';
	return command; 
}

uint8_t uart_read_buffer(void){
	uint8_t data = uart_buffer.buffer[uart_buffer.tail];		// pull the data out of the buffer at the tail.
     4b8:	ed e9       	ldi	r30, 0x9D	; 157
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	20 81       	ld	r18, Z
     4be:	31 81       	ldd	r19, Z+1	; 0x01
     4c0:	d9 01       	movw	r26, r18
     4c2:	a7 5e       	subi	r26, 0xE7	; 231
     4c4:	be 4f       	sbci	r27, 0xFE	; 254
     4c6:	8c 91       	ld	r24, X
	uart_buffer.tail++;								// increment the position of the tail
     4c8:	2f 5f       	subi	r18, 0xFF	; 255
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	31 83       	std	Z+1, r19	; 0x01
     4ce:	20 83       	st	Z, r18
	uart_buffer.size--; 							// decrement the size of the queue.
     4d0:	e9 e9       	ldi	r30, 0x99	; 153
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	40 81       	ld	r20, Z
     4d6:	51 81       	ldd	r21, Z+1	; 0x01
     4d8:	41 50       	subi	r20, 0x01	; 1
     4da:	51 09       	sbc	r21, r1
     4dc:	51 83       	std	Z+1, r21	; 0x01
     4de:	40 83       	st	Z, r20

	if(uart_buffer.tail >= MAX_BUFFER_SIZE){		// reading has gone past the buffers size wrap the tail to the start.
     4e0:	20 38       	cpi	r18, 0x80	; 128
     4e2:	31 05       	cpc	r19, r1
     4e4:	20 f0       	brcs	.+8      	; 0x4ee <uart_read_buffer+0x36>
		uart_buffer.tail = 0;
     4e6:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <uart_buffer+0x85>
     4ea:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <uart_buffer+0x84>
	}
	
	return data;
     4ee:	08 95       	ret

000004f0 <uart_get_command>:
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
char * uart_get_command(void) {
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
	uart_fetch_complete = 0; 
     4fe:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
	} while(arr[i] != '\0');

}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     502:	00 91 99 01 	lds	r16, 0x0199	; 0x800199 <uart_buffer+0x80>
     506:	10 91 9a 01 	lds	r17, 0x019A	; 0x80019a <uart_buffer+0x81>
}
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
     50a:	c8 01       	movw	r24, r16
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	0e 94 42 05 	call	0xa84	; 0xa84 <malloc>
     512:	7c 01       	movw	r14, r24
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     514:	01 2b       	or	r16, r17
     516:	a9 f0       	breq	.+42     	; 0x542 <uart_get_command+0x52>
     518:	c0 e0       	ldi	r28, 0x00	; 0
	} while(arr[i] != '\0');

}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     51a:	0f 2e       	mov	r0, r31
     51c:	f9 e9       	ldi	r31, 0x99	; 153
     51e:	cf 2e       	mov	r12, r31
     520:	f1 e0       	ldi	r31, 0x01	; 1
     522:	df 2e       	mov	r13, r31
     524:	f0 2d       	mov	r31, r0
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
     526:	87 01       	movw	r16, r14
     528:	0c 0f       	add	r16, r28
     52a:	11 1d       	adc	r17, r1
     52c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <uart_read_buffer>
     530:	f8 01       	movw	r30, r16
     532:	80 83       	st	Z, r24
		++i; 
     534:	cf 5f       	subi	r28, 0xFF	; 255
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     536:	f6 01       	movw	r30, r12
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	89 2b       	or	r24, r25
     53e:	99 f7       	brne	.-26     	; 0x526 <uart_get_command+0x36>
     540:	01 c0       	rjmp	.+2      	; 0x544 <uart_get_command+0x54>
}
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
	uint8_t i = 0;
     542:	c0 e0       	ldi	r28, 0x00	; 0
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
		++i; 
	}
	command[i] = '\0';
     544:	f7 01       	movw	r30, r14
     546:	ec 0f       	add	r30, r28
     548:	f1 1d       	adc	r31, r1
     54a:	10 82       	st	Z, r1
	return command; 
}
     54c:	c7 01       	movw	r24, r14
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	08 95       	ret

0000055e <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     55e:	85 e8       	ldi	r24, 0x85	; 133
     560:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(status != TWIT_DATA_ACK){
     564:	80 e4       	ldi	r24, 0x40	; 64
     566:	96 e0       	ldi	r25, 0x06	; 6
     568:	02 c0       	rjmp	.+4      	; 0x56e <twi_data_write_ack+0x10>
     56a:	01 97       	sbiw	r24, 0x01	; 1
		i++;
		if(i >= TWI_TIMEOUT){
     56c:	31 f0       	breq	.+12     	; 0x57a <twi_data_write_ack+0x1c>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     56e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <status>
     572:	28 32       	cpi	r18, 0x28	; 40
     574:	d1 f7       	brne	.-12     	; 0x56a <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	08 95       	ret
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     57a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     57c:	08 95       	ret

0000057e <__vector_24>:
 */ 
#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI_vect){
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	8f 93       	push	r24
	status = (TWSR & 0xF8);
     58a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     58e:	88 7f       	andi	r24, 0xF8	; 248
     590:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
}
     594:	8f 91       	pop	r24
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     5ae:	95 ea       	ldi	r25, 0xA5	; 165
     5b0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5b4:	e0 e4       	ldi	r30, 0x40	; 64
     5b6:	f6 e0       	ldi	r31, 0x06	; 6
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <twi_read+0x20>
     5ba:	31 97       	sbiw	r30, 0x01	; 1
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <twi_read+0x20>
     5be:	54 c0       	rjmp	.+168    	; 0x668 <twi_read+0xc8>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     5c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     5c4:	98 30       	cpi	r25, 0x08	; 8
     5c6:	c9 f7       	brne	.-14     	; 0x5ba <twi_read+0x1a>
     5c8:	45 c0       	rjmp	.+138    	; 0x654 <twi_read+0xb4>
     5ca:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <twi_read+0x30>
     5ce:	51 c0       	rjmp	.+162    	; 0x672 <twi_read+0xd2>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     5d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     5d4:	98 31       	cpi	r25, 0x18	; 24
     5d6:	c9 f7       	brne	.-14     	; 0x5ca <twi_read+0x2a>
     5d8:	51 c0       	rjmp	.+162    	; 0x67c <twi_read+0xdc>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     5da:	95 e9       	ldi	r25, 0x95	; 149
     5dc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5e0:	91 c0       	rjmp	.+290    	; 0x704 <twi_read+0x164>
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     5e2:	85 ea       	ldi	r24, 0xA5	; 165
     5e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5e8:	60 e4       	ldi	r22, 0x40	; 64
     5ea:	76 e0       	ldi	r23, 0x06	; 6
     5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <twi_read+0x56>
     5ee:	61 50       	subi	r22, 0x01	; 1
     5f0:	71 09       	sbc	r23, r1
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <twi_read+0x56>
     5f4:	4e c0       	rjmp	.+156    	; 0x692 <twi_read+0xf2>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     5f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     5fa:	90 31       	cpi	r25, 0x10	; 16
     5fc:	c1 f7       	brne	.-16     	; 0x5ee <twi_read+0x4e>
     5fe:	4e c0       	rjmp	.+156    	; 0x69c <twi_read+0xfc>
     600:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     602:	09 f4       	brne	.+2      	; 0x606 <twi_read+0x66>
     604:	5d c0       	rjmp	.+186    	; 0x6c0 <twi_read+0x120>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     606:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <status>
     60a:	30 34       	cpi	r19, 0x40	; 64
     60c:	c9 f7       	brne	.-14     	; 0x600 <twi_read+0x60>
     60e:	51 c0       	rjmp	.+162    	; 0x6b2 <twi_read+0x112>
     610:	f6 01       	movw	r30, r12
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     616:	ac eb       	ldi	r26, 0xBC	; 188
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	35 ec       	ldi	r19, 0xC5	; 197
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR;
     61c:	cb eb       	ldi	r28, 0xBB	; 187
     61e:	d0 e0       	ldi	r29, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     620:	3c 93       	st	X, r19
     622:	80 e4       	ldi	r24, 0x40	; 64
     624:	96 e0       	ldi	r25, 0x06	; 6
     626:	03 c0       	rjmp	.+6      	; 0x62e <twi_read+0x8e>
     628:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
     62a:	09 f4       	brne	.+2      	; 0x62e <twi_read+0x8e>
     62c:	4e c0       	rjmp	.+156    	; 0x6ca <twi_read+0x12a>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     62e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <status>
     632:	20 35       	cpi	r18, 0x50	; 80
     634:	c9 f7       	brne	.-14     	; 0x628 <twi_read+0x88>
     636:	4e c0       	rjmp	.+156    	; 0x6d4 <twi_read+0x134>
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     638:	85 e8       	ldi	r24, 0x85	; 133
     63a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     63e:	80 e4       	ldi	r24, 0x40	; 64
     640:	96 e0       	ldi	r25, 0x06	; 6
     642:	03 c0       	rjmp	.+6      	; 0x64a <twi_read+0xaa>
     644:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
     646:	09 f4       	brne	.+2      	; 0x64a <twi_read+0xaa>
     648:	4e c0       	rjmp	.+156    	; 0x6e6 <twi_read+0x146>
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     64a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <status>
     64e:	28 35       	cpi	r18, 0x58	; 88
     650:	c9 f7       	brne	.-14     	; 0x644 <twi_read+0xa4>
     652:	4e c0       	rjmp	.+156    	; 0x6f0 <twi_read+0x150>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR = (addr << 1) | 0;
     654:	98 2f       	mov	r25, r24
     656:	99 0f       	add	r25, r25
     658:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     65c:	95 e8       	ldi	r25, 0x85	; 133
     65e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     662:	e0 e4       	ldi	r30, 0x40	; 64
     664:	f6 e0       	ldi	r31, 0x06	; 6
     666:	b4 cf       	rjmp	.-152    	; 0x5d0 <twi_read+0x30>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     668:	85 e9       	ldi	r24, 0x95	; 149
     66a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	49 c0       	rjmp	.+146    	; 0x704 <twi_read+0x164>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     672:	85 e9       	ldi	r24, 0x95	; 149
     674:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	44 c0       	rjmp	.+136    	; 0x704 <twi_read+0x164>
     67c:	89 01       	movw	r16, r18
     67e:	6a 01       	movw	r12, r20
     680:	f8 2e       	mov	r15, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR = reg;
     682:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	err = twi_data_write_ack();
     686:	0e 94 af 02 	call	0x55e	; 0x55e <twi_data_write_ack>
	if(err != TWI_OK){
     68a:	88 23       	and	r24, r24
     68c:	09 f4       	brne	.+2      	; 0x690 <twi_read+0xf0>
     68e:	a9 cf       	rjmp	.-174    	; 0x5e2 <twi_read+0x42>
     690:	a4 cf       	rjmp	.-184    	; 0x5da <twi_read+0x3a>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     692:	85 e9       	ldi	r24, 0x95	; 149
     694:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	34 c0       	rjmp	.+104    	; 0x704 <twi_read+0x164>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR = (addr << 1) | 1;
     69c:	8f 2d       	mov	r24, r15
     69e:	88 0f       	add	r24, r24
     6a0:	81 60       	ori	r24, 0x01	; 1
     6a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     6a6:	85 e8       	ldi	r24, 0x85	; 133
     6a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6ac:	80 e4       	ldi	r24, 0x40	; 64
     6ae:	96 e0       	ldi	r25, 0x06	; 6
     6b0:	aa cf       	rjmp	.-172    	; 0x606 <twi_read+0x66>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     6b2:	01 50       	subi	r16, 0x01	; 1
     6b4:	11 09       	sbc	r17, r1
     6b6:	09 f0       	breq	.+2      	; 0x6ba <twi_read+0x11a>
     6b8:	ab cf       	rjmp	.-170    	; 0x610 <twi_read+0x70>
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	bc cf       	rjmp	.-136    	; 0x638 <twi_read+0x98>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     6c0:	85 e9       	ldi	r24, 0x95	; 149
     6c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	1d c0       	rjmp	.+58     	; 0x704 <twi_read+0x164>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     6ca:	85 e9       	ldi	r24, 0x95	; 149
     6cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	18 c0       	rjmp	.+48     	; 0x704 <twi_read+0x164>
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR;
     6d4:	88 81       	ld	r24, Y
     6d6:	81 93       	st	Z+, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     6d8:	4f 5f       	subi	r20, 0xFF	; 255
     6da:	5f 4f       	sbci	r21, 0xFF	; 255
     6dc:	40 17       	cp	r20, r16
     6de:	51 07       	cpc	r21, r17
     6e0:	08 f4       	brcc	.+2      	; 0x6e4 <twi_read+0x144>
     6e2:	9e cf       	rjmp	.-196    	; 0x620 <twi_read+0x80>
     6e4:	a9 cf       	rjmp	.-174    	; 0x638 <twi_read+0x98>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     6e6:	85 e9       	ldi	r24, 0x95	; 149
     6e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	0a c0       	rjmp	.+20     	; 0x704 <twi_read+0x164>
	err = twi_data_read_ack(0);
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	data[i] = TWDR;
     6f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     6f4:	e6 01       	movw	r28, r12
     6f6:	c4 0f       	add	r28, r20
     6f8:	d5 1f       	adc	r29, r21
     6fa:	88 83       	st	Y, r24
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     6fc:	85 e9       	ldi	r24, 0x95	; 149
     6fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	data[i] = TWDR;
	
	twi_stop();
	
	return err;
     702:	80 e0       	ldi	r24, 0x00	; 0
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	df 90       	pop	r13
     710:	cf 90       	pop	r12
     712:	08 95       	ret

00000714 <twi_wire>:


uint8_t twi_wire(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	89 01       	movw	r16, r18
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     722:	95 ea       	ldi	r25, 0xA5	; 165
     724:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     728:	e0 e4       	ldi	r30, 0x40	; 64
     72a:	f6 e0       	ldi	r31, 0x06	; 6
     72c:	02 c0       	rjmp	.+4      	; 0x732 <twi_wire+0x1e>
     72e:	31 97       	sbiw	r30, 0x01	; 1
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
     730:	c1 f1       	breq	.+112    	; 0x7a2 <twi_wire+0x8e>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     732:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     736:	98 30       	cpi	r25, 0x08	; 8
     738:	d1 f7       	brne	.-12     	; 0x72e <twi_wire+0x1a>
     73a:	2a c0       	rjmp	.+84     	; 0x790 <twi_wire+0x7c>
     73c:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     73e:	b1 f1       	breq	.+108    	; 0x7ac <twi_wire+0x98>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     740:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <status>
     744:	38 31       	cpi	r19, 0x18	; 24
     746:	d1 f7       	brne	.-12     	; 0x73c <twi_wire+0x28>
     748:	36 c0       	rjmp	.+108    	; 0x7b6 <twi_wire+0xa2>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	29 f4       	brne	.+10     	; 0x75a <twi_wire+0x46>
     750:	1a c0       	rjmp	.+52     	; 0x786 <twi_wire+0x72>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     752:	95 e9       	ldi	r25, 0x95	; 149
     754:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     758:	37 c0       	rjmp	.+110    	; 0x7c8 <twi_wire+0xb4>
     75a:	e8 01       	movw	r28, r16
     75c:	0e 0d       	add	r16, r14
     75e:	1f 1d       	adc	r17, r15
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
		TWDR = data[i];
     760:	0f 2e       	mov	r0, r31
     762:	fb eb       	ldi	r31, 0xBB	; 187
     764:	ef 2e       	mov	r14, r31
     766:	f1 2c       	mov	r15, r1
     768:	f0 2d       	mov	r31, r0
     76a:	89 91       	ld	r24, Y+
     76c:	f7 01       	movw	r30, r14
     76e:	80 83       	st	Z, r24
		err = twi_data_write_ack();
     770:	0e 94 af 02 	call	0x55e	; 0x55e <twi_data_write_ack>
		if(err != TWI_OK){
     774:	88 23       	and	r24, r24
     776:	21 f0       	breq	.+8      	; 0x780 <twi_wire+0x6c>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     778:	95 e9       	ldi	r25, 0x95	; 149
     77a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     77e:	24 c0       	rjmp	.+72     	; 0x7c8 <twi_wire+0xb4>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     780:	c0 17       	cp	r28, r16
     782:	d1 07       	cpc	r29, r17
     784:	91 f7       	brne	.-28     	; 0x76a <twi_wire+0x56>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     786:	85 e9       	ldi	r24, 0x95	; 149
     788:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	1c c0       	rjmp	.+56     	; 0x7c8 <twi_wire+0xb4>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR = (addr << 1) | 0;
     790:	88 0f       	add	r24, r24
     792:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     796:	85 e8       	ldi	r24, 0x85	; 133
     798:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     79c:	80 e4       	ldi	r24, 0x40	; 64
     79e:	96 e0       	ldi	r25, 0x06	; 6
     7a0:	cf cf       	rjmp	.-98     	; 0x740 <twi_wire+0x2c>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     7a2:	85 e9       	ldi	r24, 0x95	; 149
     7a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <twi_wire+0xb4>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     7ac:	85 e9       	ldi	r24, 0x95	; 149
     7ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <twi_wire+0xb4>
     7b6:	78 01       	movw	r14, r16
     7b8:	8a 01       	movw	r16, r20
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR = reg;
     7ba:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	err = twi_data_write_ack();
     7be:	0e 94 af 02 	call	0x55e	; 0x55e <twi_data_write_ack>
	if(err != TWI_OK){
     7c2:	88 23       	and	r24, r24
     7c4:	11 f2       	breq	.-124    	; 0x74a <twi_wire+0x36>
     7c6:	c5 cf       	rjmp	.-118    	; 0x752 <twi_wire+0x3e>
	
	
	twi_stop();
	
	return err;
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	08 95       	ret

000007d6 <twi_init>:





void twi_init(uint32_t speed){
     7d6:	9b 01       	movw	r18, r22
     7d8:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
	TWBR = gen_t & 0xFF;
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	74 e2       	ldi	r23, 0x24	; 36
     7de:	84 ef       	ldi	r24, 0xF4	; 244
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 00 05 	call	0xa00	; 0xa00 <__udivmodsi4>
     7e6:	da 01       	movw	r26, r20
     7e8:	c9 01       	movw	r24, r18
     7ea:	40 97       	sbiw	r24, 0x10	; 16
     7ec:	a1 09       	sbc	r26, r1
     7ee:	b1 09       	sbc	r27, r1
     7f0:	b6 95       	lsr	r27
     7f2:	a7 95       	ror	r26
     7f4:	97 95       	ror	r25
     7f6:	87 95       	ror	r24
     7f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN) | (1 << TWIE);
     7fc:	85 e0       	ldi	r24, 0x05	; 5
     7fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	PORTC |= (1 << PORTC5 | 1 << PORTC4);
     802:	88 b1       	in	r24, 0x08	; 8
     804:	80 63       	ori	r24, 0x30	; 48
     806:	88 b9       	out	0x08, r24	; 8
     808:	08 95       	ret

0000080a <__floatunsisf>:
     80a:	e8 94       	clt
     80c:	09 c0       	rjmp	.+18     	; 0x820 <__floatsisf+0x12>

0000080e <__floatsisf>:
     80e:	97 fb       	bst	r25, 7
     810:	3e f4       	brtc	.+14     	; 0x820 <__floatsisf+0x12>
     812:	90 95       	com	r25
     814:	80 95       	com	r24
     816:	70 95       	com	r23
     818:	61 95       	neg	r22
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	8f 4f       	sbci	r24, 0xFF	; 255
     81e:	9f 4f       	sbci	r25, 0xFF	; 255
     820:	99 23       	and	r25, r25
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x40>
     824:	f9 2f       	mov	r31, r25
     826:	96 e9       	ldi	r25, 0x96	; 150
     828:	bb 27       	eor	r27, r27
     82a:	93 95       	inc	r25
     82c:	f6 95       	lsr	r31
     82e:	87 95       	ror	r24
     830:	77 95       	ror	r23
     832:	67 95       	ror	r22
     834:	b7 95       	ror	r27
     836:	f1 11       	cpse	r31, r1
     838:	f8 cf       	rjmp	.-16     	; 0x82a <__floatsisf+0x1c>
     83a:	fa f4       	brpl	.+62     	; 0x87a <__floatsisf+0x6c>
     83c:	bb 0f       	add	r27, r27
     83e:	11 f4       	brne	.+4      	; 0x844 <__floatsisf+0x36>
     840:	60 ff       	sbrs	r22, 0
     842:	1b c0       	rjmp	.+54     	; 0x87a <__floatsisf+0x6c>
     844:	6f 5f       	subi	r22, 0xFF	; 255
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	8f 4f       	sbci	r24, 0xFF	; 255
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	16 c0       	rjmp	.+44     	; 0x87a <__floatsisf+0x6c>
     84e:	88 23       	and	r24, r24
     850:	11 f0       	breq	.+4      	; 0x856 <__floatsisf+0x48>
     852:	96 e9       	ldi	r25, 0x96	; 150
     854:	11 c0       	rjmp	.+34     	; 0x878 <__floatsisf+0x6a>
     856:	77 23       	and	r23, r23
     858:	21 f0       	breq	.+8      	; 0x862 <__floatsisf+0x54>
     85a:	9e e8       	ldi	r25, 0x8E	; 142
     85c:	87 2f       	mov	r24, r23
     85e:	76 2f       	mov	r23, r22
     860:	05 c0       	rjmp	.+10     	; 0x86c <__floatsisf+0x5e>
     862:	66 23       	and	r22, r22
     864:	71 f0       	breq	.+28     	; 0x882 <__floatsisf+0x74>
     866:	96 e8       	ldi	r25, 0x86	; 134
     868:	86 2f       	mov	r24, r22
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	2a f0       	brmi	.+10     	; 0x87a <__floatsisf+0x6c>
     870:	9a 95       	dec	r25
     872:	66 0f       	add	r22, r22
     874:	77 1f       	adc	r23, r23
     876:	88 1f       	adc	r24, r24
     878:	da f7       	brpl	.-10     	; 0x870 <__floatsisf+0x62>
     87a:	88 0f       	add	r24, r24
     87c:	96 95       	lsr	r25
     87e:	87 95       	ror	r24
     880:	97 f9       	bld	r25, 7
     882:	08 95       	ret

00000884 <__mulsf3>:
     884:	0e 94 55 04 	call	0x8aa	; 0x8aa <__mulsf3x>
     888:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_round>
     88c:	0e 94 b8 04 	call	0x970	; 0x970 <__fp_pscA>
     890:	38 f0       	brcs	.+14     	; 0x8a0 <__mulsf3+0x1c>
     892:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_pscB>
     896:	20 f0       	brcs	.+8      	; 0x8a0 <__mulsf3+0x1c>
     898:	95 23       	and	r25, r21
     89a:	11 f0       	breq	.+4      	; 0x8a0 <__mulsf3+0x1c>
     89c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_inf>
     8a0:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__fp_nan>
     8a4:	11 24       	eor	r1, r1
     8a6:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_szero>

000008aa <__mulsf3x>:
     8aa:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fp_split3>
     8ae:	70 f3       	brcs	.-36     	; 0x88c <__mulsf3+0x8>

000008b0 <__mulsf3_pse>:
     8b0:	95 9f       	mul	r25, r21
     8b2:	c1 f3       	breq	.-16     	; 0x8a4 <__mulsf3+0x20>
     8b4:	95 0f       	add	r25, r21
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	55 1f       	adc	r21, r21
     8ba:	62 9f       	mul	r22, r18
     8bc:	f0 01       	movw	r30, r0
     8be:	72 9f       	mul	r23, r18
     8c0:	bb 27       	eor	r27, r27
     8c2:	f0 0d       	add	r31, r0
     8c4:	b1 1d       	adc	r27, r1
     8c6:	63 9f       	mul	r22, r19
     8c8:	aa 27       	eor	r26, r26
     8ca:	f0 0d       	add	r31, r0
     8cc:	b1 1d       	adc	r27, r1
     8ce:	aa 1f       	adc	r26, r26
     8d0:	64 9f       	mul	r22, r20
     8d2:	66 27       	eor	r22, r22
     8d4:	b0 0d       	add	r27, r0
     8d6:	a1 1d       	adc	r26, r1
     8d8:	66 1f       	adc	r22, r22
     8da:	82 9f       	mul	r24, r18
     8dc:	22 27       	eor	r18, r18
     8de:	b0 0d       	add	r27, r0
     8e0:	a1 1d       	adc	r26, r1
     8e2:	62 1f       	adc	r22, r18
     8e4:	73 9f       	mul	r23, r19
     8e6:	b0 0d       	add	r27, r0
     8e8:	a1 1d       	adc	r26, r1
     8ea:	62 1f       	adc	r22, r18
     8ec:	83 9f       	mul	r24, r19
     8ee:	a0 0d       	add	r26, r0
     8f0:	61 1d       	adc	r22, r1
     8f2:	22 1f       	adc	r18, r18
     8f4:	74 9f       	mul	r23, r20
     8f6:	33 27       	eor	r19, r19
     8f8:	a0 0d       	add	r26, r0
     8fa:	61 1d       	adc	r22, r1
     8fc:	23 1f       	adc	r18, r19
     8fe:	84 9f       	mul	r24, r20
     900:	60 0d       	add	r22, r0
     902:	21 1d       	adc	r18, r1
     904:	82 2f       	mov	r24, r18
     906:	76 2f       	mov	r23, r22
     908:	6a 2f       	mov	r22, r26
     90a:	11 24       	eor	r1, r1
     90c:	9f 57       	subi	r25, 0x7F	; 127
     90e:	50 40       	sbci	r21, 0x00	; 0
     910:	9a f0       	brmi	.+38     	; 0x938 <__stack+0x39>
     912:	f1 f0       	breq	.+60     	; 0x950 <__stack+0x51>
     914:	88 23       	and	r24, r24
     916:	4a f0       	brmi	.+18     	; 0x92a <__stack+0x2b>
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	bb 1f       	adc	r27, r27
     91e:	66 1f       	adc	r22, r22
     920:	77 1f       	adc	r23, r23
     922:	88 1f       	adc	r24, r24
     924:	91 50       	subi	r25, 0x01	; 1
     926:	50 40       	sbci	r21, 0x00	; 0
     928:	a9 f7       	brne	.-22     	; 0x914 <__stack+0x15>
     92a:	9e 3f       	cpi	r25, 0xFE	; 254
     92c:	51 05       	cpc	r21, r1
     92e:	80 f0       	brcs	.+32     	; 0x950 <__stack+0x51>
     930:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_inf>
     934:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_szero>
     938:	5f 3f       	cpi	r21, 0xFF	; 255
     93a:	e4 f3       	brlt	.-8      	; 0x934 <__stack+0x35>
     93c:	98 3e       	cpi	r25, 0xE8	; 232
     93e:	d4 f3       	brlt	.-12     	; 0x934 <__stack+0x35>
     940:	86 95       	lsr	r24
     942:	77 95       	ror	r23
     944:	67 95       	ror	r22
     946:	b7 95       	ror	r27
     948:	f7 95       	ror	r31
     94a:	e7 95       	ror	r30
     94c:	9f 5f       	subi	r25, 0xFF	; 255
     94e:	c1 f7       	brne	.-16     	; 0x940 <__stack+0x41>
     950:	fe 2b       	or	r31, r30
     952:	88 0f       	add	r24, r24
     954:	91 1d       	adc	r25, r1
     956:	96 95       	lsr	r25
     958:	87 95       	ror	r24
     95a:	97 f9       	bld	r25, 7
     95c:	08 95       	ret

0000095e <__fp_inf>:
     95e:	97 f9       	bld	r25, 7
     960:	9f 67       	ori	r25, 0x7F	; 127
     962:	80 e8       	ldi	r24, 0x80	; 128
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	08 95       	ret

0000096a <__fp_nan>:
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	80 ec       	ldi	r24, 0xC0	; 192
     96e:	08 95       	ret

00000970 <__fp_pscA>:
     970:	00 24       	eor	r0, r0
     972:	0a 94       	dec	r0
     974:	16 16       	cp	r1, r22
     976:	17 06       	cpc	r1, r23
     978:	18 06       	cpc	r1, r24
     97a:	09 06       	cpc	r0, r25
     97c:	08 95       	ret

0000097e <__fp_pscB>:
     97e:	00 24       	eor	r0, r0
     980:	0a 94       	dec	r0
     982:	12 16       	cp	r1, r18
     984:	13 06       	cpc	r1, r19
     986:	14 06       	cpc	r1, r20
     988:	05 06       	cpc	r0, r21
     98a:	08 95       	ret

0000098c <__fp_round>:
     98c:	09 2e       	mov	r0, r25
     98e:	03 94       	inc	r0
     990:	00 0c       	add	r0, r0
     992:	11 f4       	brne	.+4      	; 0x998 <__fp_round+0xc>
     994:	88 23       	and	r24, r24
     996:	52 f0       	brmi	.+20     	; 0x9ac <__fp_round+0x20>
     998:	bb 0f       	add	r27, r27
     99a:	40 f4       	brcc	.+16     	; 0x9ac <__fp_round+0x20>
     99c:	bf 2b       	or	r27, r31
     99e:	11 f4       	brne	.+4      	; 0x9a4 <__fp_round+0x18>
     9a0:	60 ff       	sbrs	r22, 0
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__fp_round+0x20>
     9a4:	6f 5f       	subi	r22, 0xFF	; 255
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	8f 4f       	sbci	r24, 0xFF	; 255
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	08 95       	ret

000009ae <__fp_split3>:
     9ae:	57 fd       	sbrc	r21, 7
     9b0:	90 58       	subi	r25, 0x80	; 128
     9b2:	44 0f       	add	r20, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	59 f0       	breq	.+22     	; 0x9ce <__fp_splitA+0x10>
     9b8:	5f 3f       	cpi	r21, 0xFF	; 255
     9ba:	71 f0       	breq	.+28     	; 0x9d8 <__fp_splitA+0x1a>
     9bc:	47 95       	ror	r20

000009be <__fp_splitA>:
     9be:	88 0f       	add	r24, r24
     9c0:	97 fb       	bst	r25, 7
     9c2:	99 1f       	adc	r25, r25
     9c4:	61 f0       	breq	.+24     	; 0x9de <__fp_splitA+0x20>
     9c6:	9f 3f       	cpi	r25, 0xFF	; 255
     9c8:	79 f0       	breq	.+30     	; 0x9e8 <__fp_splitA+0x2a>
     9ca:	87 95       	ror	r24
     9cc:	08 95       	ret
     9ce:	12 16       	cp	r1, r18
     9d0:	13 06       	cpc	r1, r19
     9d2:	14 06       	cpc	r1, r20
     9d4:	55 1f       	adc	r21, r21
     9d6:	f2 cf       	rjmp	.-28     	; 0x9bc <__fp_split3+0xe>
     9d8:	46 95       	lsr	r20
     9da:	f1 df       	rcall	.-30     	; 0x9be <__fp_splitA>
     9dc:	08 c0       	rjmp	.+16     	; 0x9ee <__fp_splitA+0x30>
     9de:	16 16       	cp	r1, r22
     9e0:	17 06       	cpc	r1, r23
     9e2:	18 06       	cpc	r1, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	f1 cf       	rjmp	.-30     	; 0x9ca <__fp_splitA+0xc>
     9e8:	86 95       	lsr	r24
     9ea:	71 05       	cpc	r23, r1
     9ec:	61 05       	cpc	r22, r1
     9ee:	08 94       	sec
     9f0:	08 95       	ret

000009f2 <__fp_zero>:
     9f2:	e8 94       	clt

000009f4 <__fp_szero>:
     9f4:	bb 27       	eor	r27, r27
     9f6:	66 27       	eor	r22, r22
     9f8:	77 27       	eor	r23, r23
     9fa:	cb 01       	movw	r24, r22
     9fc:	97 f9       	bld	r25, 7
     9fe:	08 95       	ret

00000a00 <__udivmodsi4>:
     a00:	a1 e2       	ldi	r26, 0x21	; 33
     a02:	1a 2e       	mov	r1, r26
     a04:	aa 1b       	sub	r26, r26
     a06:	bb 1b       	sub	r27, r27
     a08:	fd 01       	movw	r30, r26
     a0a:	0d c0       	rjmp	.+26     	; 0xa26 <__udivmodsi4_ep>

00000a0c <__udivmodsi4_loop>:
     a0c:	aa 1f       	adc	r26, r26
     a0e:	bb 1f       	adc	r27, r27
     a10:	ee 1f       	adc	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	a2 17       	cp	r26, r18
     a16:	b3 07       	cpc	r27, r19
     a18:	e4 07       	cpc	r30, r20
     a1a:	f5 07       	cpc	r31, r21
     a1c:	20 f0       	brcs	.+8      	; 0xa26 <__udivmodsi4_ep>
     a1e:	a2 1b       	sub	r26, r18
     a20:	b3 0b       	sbc	r27, r19
     a22:	e4 0b       	sbc	r30, r20
     a24:	f5 0b       	sbc	r31, r21

00000a26 <__udivmodsi4_ep>:
     a26:	66 1f       	adc	r22, r22
     a28:	77 1f       	adc	r23, r23
     a2a:	88 1f       	adc	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	1a 94       	dec	r1
     a30:	69 f7       	brne	.-38     	; 0xa0c <__udivmodsi4_loop>
     a32:	60 95       	com	r22
     a34:	70 95       	com	r23
     a36:	80 95       	com	r24
     a38:	90 95       	com	r25
     a3a:	9b 01       	movw	r18, r22
     a3c:	ac 01       	movw	r20, r24
     a3e:	bd 01       	movw	r22, r26
     a40:	cf 01       	movw	r24, r30
     a42:	08 95       	ret

00000a44 <dtostrf>:
     a44:	ef 92       	push	r14
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	e8 01       	movw	r28, r16
     a50:	47 fd       	sbrc	r20, 7
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <dtostrf+0x14>
     a54:	34 e0       	ldi	r19, 0x04	; 4
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <dtostrf+0x16>
     a58:	34 e1       	ldi	r19, 0x14	; 20
     a5a:	04 2e       	mov	r0, r20
     a5c:	00 0c       	add	r0, r0
     a5e:	55 0b       	sbc	r21, r21
     a60:	57 ff       	sbrs	r21, 7
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <dtostrf+0x26>
     a64:	51 95       	neg	r21
     a66:	41 95       	neg	r20
     a68:	51 09       	sbc	r21, r1
     a6a:	e3 2e       	mov	r14, r19
     a6c:	02 2f       	mov	r16, r18
     a6e:	24 2f       	mov	r18, r20
     a70:	ae 01       	movw	r20, r28
     a72:	0e 94 8f 06 	call	0xd1e	; 0xd1e <dtoa_prf>
     a76:	ce 01       	movw	r24, r28
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ef 90       	pop	r14
     a82:	08 95       	ret

00000a84 <malloc>:
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	91 05       	cpc	r25, r1
     a90:	10 f4       	brcc	.+4      	; 0xa96 <malloc+0x12>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <__flp>
     a9a:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <__flp+0x1>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	a0 e0       	ldi	r26, 0x00	; 0
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	30 97       	sbiw	r30, 0x00	; 0
     aa8:	19 f1       	breq	.+70     	; 0xaf0 <malloc+0x6c>
     aaa:	40 81       	ld	r20, Z
     aac:	51 81       	ldd	r21, Z+1	; 0x01
     aae:	02 81       	ldd	r16, Z+2	; 0x02
     ab0:	13 81       	ldd	r17, Z+3	; 0x03
     ab2:	48 17       	cp	r20, r24
     ab4:	59 07       	cpc	r21, r25
     ab6:	c8 f0       	brcs	.+50     	; 0xaea <malloc+0x66>
     ab8:	84 17       	cp	r24, r20
     aba:	95 07       	cpc	r25, r21
     abc:	69 f4       	brne	.+26     	; 0xad8 <malloc+0x54>
     abe:	10 97       	sbiw	r26, 0x00	; 0
     ac0:	31 f0       	breq	.+12     	; 0xace <malloc+0x4a>
     ac2:	12 96       	adiw	r26, 0x02	; 2
     ac4:	0c 93       	st	X, r16
     ac6:	12 97       	sbiw	r26, 0x02	; 2
     ac8:	13 96       	adiw	r26, 0x03	; 3
     aca:	1c 93       	st	X, r17
     acc:	27 c0       	rjmp	.+78     	; 0xb1c <malloc+0x98>
     ace:	00 93 a1 01 	sts	0x01A1, r16	; 0x8001a1 <__flp>
     ad2:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__flp+0x1>
     ad6:	22 c0       	rjmp	.+68     	; 0xb1c <malloc+0x98>
     ad8:	21 15       	cp	r18, r1
     ada:	31 05       	cpc	r19, r1
     adc:	19 f0       	breq	.+6      	; 0xae4 <malloc+0x60>
     ade:	42 17       	cp	r20, r18
     ae0:	53 07       	cpc	r21, r19
     ae2:	18 f4       	brcc	.+6      	; 0xaea <malloc+0x66>
     ae4:	9a 01       	movw	r18, r20
     ae6:	bd 01       	movw	r22, r26
     ae8:	ef 01       	movw	r28, r30
     aea:	df 01       	movw	r26, r30
     aec:	f8 01       	movw	r30, r16
     aee:	db cf       	rjmp	.-74     	; 0xaa6 <malloc+0x22>
     af0:	21 15       	cp	r18, r1
     af2:	31 05       	cpc	r19, r1
     af4:	f9 f0       	breq	.+62     	; 0xb34 <malloc+0xb0>
     af6:	28 1b       	sub	r18, r24
     af8:	39 0b       	sbc	r19, r25
     afa:	24 30       	cpi	r18, 0x04	; 4
     afc:	31 05       	cpc	r19, r1
     afe:	80 f4       	brcc	.+32     	; 0xb20 <malloc+0x9c>
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
     b02:	9b 81       	ldd	r25, Y+3	; 0x03
     b04:	61 15       	cp	r22, r1
     b06:	71 05       	cpc	r23, r1
     b08:	21 f0       	breq	.+8      	; 0xb12 <malloc+0x8e>
     b0a:	fb 01       	movw	r30, r22
     b0c:	93 83       	std	Z+3, r25	; 0x03
     b0e:	82 83       	std	Z+2, r24	; 0x02
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <malloc+0x96>
     b12:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <__flp+0x1>
     b16:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <__flp>
     b1a:	fe 01       	movw	r30, r28
     b1c:	32 96       	adiw	r30, 0x02	; 2
     b1e:	44 c0       	rjmp	.+136    	; 0xba8 <malloc+0x124>
     b20:	fe 01       	movw	r30, r28
     b22:	e2 0f       	add	r30, r18
     b24:	f3 1f       	adc	r31, r19
     b26:	81 93       	st	Z+, r24
     b28:	91 93       	st	Z+, r25
     b2a:	22 50       	subi	r18, 0x02	; 2
     b2c:	31 09       	sbc	r19, r1
     b2e:	39 83       	std	Y+1, r19	; 0x01
     b30:	28 83       	st	Y, r18
     b32:	3a c0       	rjmp	.+116    	; 0xba8 <malloc+0x124>
     b34:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     b38:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     b3c:	23 2b       	or	r18, r19
     b3e:	41 f4       	brne	.+16     	; 0xb50 <malloc+0xcc>
     b40:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
     b44:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
     b48:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <__brkval+0x1>
     b4c:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <__brkval>
     b50:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
     b54:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
     b58:	21 15       	cp	r18, r1
     b5a:	31 05       	cpc	r19, r1
     b5c:	41 f4       	brne	.+16     	; 0xb6e <malloc+0xea>
     b5e:	2d b7       	in	r18, 0x3d	; 61
     b60:	3e b7       	in	r19, 0x3e	; 62
     b62:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
     b66:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
     b6a:	24 1b       	sub	r18, r20
     b6c:	35 0b       	sbc	r19, r21
     b6e:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <__brkval>
     b72:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <__brkval+0x1>
     b76:	e2 17       	cp	r30, r18
     b78:	f3 07       	cpc	r31, r19
     b7a:	a0 f4       	brcc	.+40     	; 0xba4 <malloc+0x120>
     b7c:	2e 1b       	sub	r18, r30
     b7e:	3f 0b       	sbc	r19, r31
     b80:	28 17       	cp	r18, r24
     b82:	39 07       	cpc	r19, r25
     b84:	78 f0       	brcs	.+30     	; 0xba4 <malloc+0x120>
     b86:	ac 01       	movw	r20, r24
     b88:	4e 5f       	subi	r20, 0xFE	; 254
     b8a:	5f 4f       	sbci	r21, 0xFF	; 255
     b8c:	24 17       	cp	r18, r20
     b8e:	35 07       	cpc	r19, r21
     b90:	48 f0       	brcs	.+18     	; 0xba4 <malloc+0x120>
     b92:	4e 0f       	add	r20, r30
     b94:	5f 1f       	adc	r21, r31
     b96:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <__brkval+0x1>
     b9a:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <__brkval>
     b9e:	81 93       	st	Z+, r24
     ba0:	91 93       	st	Z+, r25
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <malloc+0x124>
     ba4:	e0 e0       	ldi	r30, 0x00	; 0
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	cf 01       	movw	r24, r30
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <free>:
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	09 f4       	brne	.+2      	; 0xbbe <free+0xa>
     bbc:	81 c0       	rjmp	.+258    	; 0xcc0 <free+0x10c>
     bbe:	fc 01       	movw	r30, r24
     bc0:	32 97       	sbiw	r30, 0x02	; 2
     bc2:	13 82       	std	Z+3, r1	; 0x03
     bc4:	12 82       	std	Z+2, r1	; 0x02
     bc6:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <__flp>
     bca:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <__flp+0x1>
     bce:	10 97       	sbiw	r26, 0x00	; 0
     bd0:	81 f4       	brne	.+32     	; 0xbf2 <free+0x3e>
     bd2:	20 81       	ld	r18, Z
     bd4:	31 81       	ldd	r19, Z+1	; 0x01
     bd6:	82 0f       	add	r24, r18
     bd8:	93 1f       	adc	r25, r19
     bda:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     bde:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     be2:	28 17       	cp	r18, r24
     be4:	39 07       	cpc	r19, r25
     be6:	51 f5       	brne	.+84     	; 0xc3c <free+0x88>
     be8:	f0 93 a0 01 	sts	0x01A0, r31	; 0x8001a0 <__brkval+0x1>
     bec:	e0 93 9f 01 	sts	0x019F, r30	; 0x80019f <__brkval>
     bf0:	67 c0       	rjmp	.+206    	; 0xcc0 <free+0x10c>
     bf2:	ed 01       	movw	r28, r26
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	ce 17       	cp	r28, r30
     bfa:	df 07       	cpc	r29, r31
     bfc:	40 f4       	brcc	.+16     	; 0xc0e <free+0x5a>
     bfe:	4a 81       	ldd	r20, Y+2	; 0x02
     c00:	5b 81       	ldd	r21, Y+3	; 0x03
     c02:	9e 01       	movw	r18, r28
     c04:	41 15       	cp	r20, r1
     c06:	51 05       	cpc	r21, r1
     c08:	f1 f0       	breq	.+60     	; 0xc46 <free+0x92>
     c0a:	ea 01       	movw	r28, r20
     c0c:	f5 cf       	rjmp	.-22     	; 0xbf8 <free+0x44>
     c0e:	d3 83       	std	Z+3, r29	; 0x03
     c10:	c2 83       	std	Z+2, r28	; 0x02
     c12:	40 81       	ld	r20, Z
     c14:	51 81       	ldd	r21, Z+1	; 0x01
     c16:	84 0f       	add	r24, r20
     c18:	95 1f       	adc	r25, r21
     c1a:	c8 17       	cp	r28, r24
     c1c:	d9 07       	cpc	r29, r25
     c1e:	59 f4       	brne	.+22     	; 0xc36 <free+0x82>
     c20:	88 81       	ld	r24, Y
     c22:	99 81       	ldd	r25, Y+1	; 0x01
     c24:	84 0f       	add	r24, r20
     c26:	95 1f       	adc	r25, r21
     c28:	02 96       	adiw	r24, 0x02	; 2
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	9b 81       	ldd	r25, Y+3	; 0x03
     c32:	93 83       	std	Z+3, r25	; 0x03
     c34:	82 83       	std	Z+2, r24	; 0x02
     c36:	21 15       	cp	r18, r1
     c38:	31 05       	cpc	r19, r1
     c3a:	29 f4       	brne	.+10     	; 0xc46 <free+0x92>
     c3c:	f0 93 a2 01 	sts	0x01A2, r31	; 0x8001a2 <__flp+0x1>
     c40:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <__flp>
     c44:	3d c0       	rjmp	.+122    	; 0xcc0 <free+0x10c>
     c46:	e9 01       	movw	r28, r18
     c48:	fb 83       	std	Y+3, r31	; 0x03
     c4a:	ea 83       	std	Y+2, r30	; 0x02
     c4c:	49 91       	ld	r20, Y+
     c4e:	59 91       	ld	r21, Y+
     c50:	c4 0f       	add	r28, r20
     c52:	d5 1f       	adc	r29, r21
     c54:	ec 17       	cp	r30, r28
     c56:	fd 07       	cpc	r31, r29
     c58:	61 f4       	brne	.+24     	; 0xc72 <free+0xbe>
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	84 0f       	add	r24, r20
     c60:	95 1f       	adc	r25, r21
     c62:	02 96       	adiw	r24, 0x02	; 2
     c64:	e9 01       	movw	r28, r18
     c66:	99 83       	std	Y+1, r25	; 0x01
     c68:	88 83       	st	Y, r24
     c6a:	82 81       	ldd	r24, Z+2	; 0x02
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	9b 83       	std	Y+3, r25	; 0x03
     c70:	8a 83       	std	Y+2, r24	; 0x02
     c72:	e0 e0       	ldi	r30, 0x00	; 0
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	8d 91       	ld	r24, X+
     c7a:	9c 91       	ld	r25, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	19 f0       	breq	.+6      	; 0xc88 <free+0xd4>
     c82:	fd 01       	movw	r30, r26
     c84:	dc 01       	movw	r26, r24
     c86:	f7 cf       	rjmp	.-18     	; 0xc76 <free+0xc2>
     c88:	8d 91       	ld	r24, X+
     c8a:	9c 91       	ld	r25, X
     c8c:	11 97       	sbiw	r26, 0x01	; 1
     c8e:	9d 01       	movw	r18, r26
     c90:	2e 5f       	subi	r18, 0xFE	; 254
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	82 0f       	add	r24, r18
     c96:	93 1f       	adc	r25, r19
     c98:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     c9c:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     ca0:	28 17       	cp	r18, r24
     ca2:	39 07       	cpc	r19, r25
     ca4:	69 f4       	brne	.+26     	; 0xcc0 <free+0x10c>
     ca6:	30 97       	sbiw	r30, 0x00	; 0
     ca8:	29 f4       	brne	.+10     	; 0xcb4 <free+0x100>
     caa:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__flp+0x1>
     cae:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__flp>
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <free+0x104>
     cb4:	13 82       	std	Z+3, r1	; 0x03
     cb6:	12 82       	std	Z+2, r1	; 0x02
     cb8:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <__brkval+0x1>
     cbc:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <__brkval>
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <strtok>:
     cc6:	47 e1       	ldi	r20, 0x17	; 23
     cc8:	51 e0       	ldi	r21, 0x01	; 1
     cca:	0e 94 68 06 	call	0xcd0	; 0xcd0 <strtok_r>
     cce:	08 95       	ret

00000cd0 <strtok_r>:
     cd0:	fa 01       	movw	r30, r20
     cd2:	a1 91       	ld	r26, Z+
     cd4:	b0 81       	ld	r27, Z
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	19 f4       	brne	.+6      	; 0xce0 <strtok_r+0x10>
     cda:	10 97       	sbiw	r26, 0x00	; 0
     cdc:	e1 f0       	breq	.+56     	; 0xd16 <strtok_r+0x46>
     cde:	cd 01       	movw	r24, r26
     ce0:	dc 01       	movw	r26, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0d 90       	ld	r0, X+
     ce6:	00 20       	and	r0, r0
     ce8:	11 f4       	brne	.+4      	; 0xcee <strtok_r+0x1e>
     cea:	c0 01       	movw	r24, r0
     cec:	13 c0       	rjmp	.+38     	; 0xd14 <strtok_r+0x44>
     cee:	fb 01       	movw	r30, r22
     cf0:	21 91       	ld	r18, Z+
     cf2:	22 23       	and	r18, r18
     cf4:	19 f0       	breq	.+6      	; 0xcfc <strtok_r+0x2c>
     cf6:	20 15       	cp	r18, r0
     cf8:	d9 f7       	brne	.-10     	; 0xcf0 <strtok_r+0x20>
     cfa:	f3 cf       	rjmp	.-26     	; 0xce2 <strtok_r+0x12>
     cfc:	fb 01       	movw	r30, r22
     cfe:	21 91       	ld	r18, Z+
     d00:	20 15       	cp	r18, r0
     d02:	19 f4       	brne	.+6      	; 0xd0a <strtok_r+0x3a>
     d04:	1e 92       	st	-X, r1
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <strtok_r+0x46>
     d0a:	22 23       	and	r18, r18
     d0c:	c1 f7       	brne	.-16     	; 0xcfe <strtok_r+0x2e>
     d0e:	0d 90       	ld	r0, X+
     d10:	00 20       	and	r0, r0
     d12:	a1 f7       	brne	.-24     	; 0xcfc <strtok_r+0x2c>
     d14:	d0 01       	movw	r26, r0
     d16:	fa 01       	movw	r30, r20
     d18:	a1 93       	st	Z+, r26
     d1a:	b0 83       	st	Z, r27
     d1c:	08 95       	ret

00000d1e <dtoa_prf>:
     d1e:	a9 e0       	ldi	r26, 0x09	; 9
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e9       	ldi	r30, 0x95	; 149
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__prologue_saves__+0xc>
     d2a:	6a 01       	movw	r12, r20
     d2c:	12 2f       	mov	r17, r18
     d2e:	b0 2e       	mov	r11, r16
     d30:	2b e3       	ldi	r18, 0x3B	; 59
     d32:	20 17       	cp	r18, r16
     d34:	20 f0       	brcs	.+8      	; 0xd3e <dtoa_prf+0x20>
     d36:	ff 24       	eor	r15, r15
     d38:	f3 94       	inc	r15
     d3a:	f0 0e       	add	r15, r16
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <dtoa_prf+0x24>
     d3e:	2c e3       	ldi	r18, 0x3C	; 60
     d40:	f2 2e       	mov	r15, r18
     d42:	0f 2d       	mov	r16, r15
     d44:	27 e0       	ldi	r18, 0x07	; 7
     d46:	ae 01       	movw	r20, r28
     d48:	4f 5f       	subi	r20, 0xFF	; 255
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__ftoa_engine>
     d50:	bc 01       	movw	r22, r24
     d52:	49 81       	ldd	r20, Y+1	; 0x01
     d54:	84 2f       	mov	r24, r20
     d56:	89 70       	andi	r24, 0x09	; 9
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	31 f0       	breq	.+12     	; 0xd68 <dtoa_prf+0x4a>
     d5c:	e1 fc       	sbrc	r14, 1
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <dtoa_prf+0x4e>
     d60:	e0 fe       	sbrs	r14, 0
     d62:	06 c0       	rjmp	.+12     	; 0xd70 <dtoa_prf+0x52>
     d64:	90 e2       	ldi	r25, 0x20	; 32
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <dtoa_prf+0x54>
     d68:	9d e2       	ldi	r25, 0x2D	; 45
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <dtoa_prf+0x54>
     d6c:	9b e2       	ldi	r25, 0x2B	; 43
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <dtoa_prf+0x54>
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	5e 2d       	mov	r21, r14
     d74:	50 71       	andi	r21, 0x10	; 16
     d76:	43 ff       	sbrs	r20, 3
     d78:	3c c0       	rjmp	.+120    	; 0xdf2 <dtoa_prf+0xd4>
     d7a:	91 11       	cpse	r25, r1
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <dtoa_prf+0x64>
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	01 c0       	rjmp	.+2      	; 0xd84 <dtoa_prf+0x66>
     d82:	84 e0       	ldi	r24, 0x04	; 4
     d84:	81 17       	cp	r24, r17
     d86:	18 f4       	brcc	.+6      	; 0xd8e <dtoa_prf+0x70>
     d88:	21 2f       	mov	r18, r17
     d8a:	28 1b       	sub	r18, r24
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <dtoa_prf+0x72>
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	51 11       	cpse	r21, r1
     d92:	0b c0       	rjmp	.+22     	; 0xdaa <dtoa_prf+0x8c>
     d94:	f6 01       	movw	r30, r12
     d96:	82 2f       	mov	r24, r18
     d98:	30 e2       	ldi	r19, 0x20	; 32
     d9a:	88 23       	and	r24, r24
     d9c:	19 f0       	breq	.+6      	; 0xda4 <dtoa_prf+0x86>
     d9e:	31 93       	st	Z+, r19
     da0:	81 50       	subi	r24, 0x01	; 1
     da2:	fb cf       	rjmp	.-10     	; 0xd9a <dtoa_prf+0x7c>
     da4:	c2 0e       	add	r12, r18
     da6:	d1 1c       	adc	r13, r1
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	99 23       	and	r25, r25
     dac:	29 f0       	breq	.+10     	; 0xdb8 <dtoa_prf+0x9a>
     dae:	d6 01       	movw	r26, r12
     db0:	9c 93       	st	X, r25
     db2:	f6 01       	movw	r30, r12
     db4:	31 96       	adiw	r30, 0x01	; 1
     db6:	6f 01       	movw	r12, r30
     db8:	c6 01       	movw	r24, r12
     dba:	03 96       	adiw	r24, 0x03	; 3
     dbc:	e2 fe       	sbrs	r14, 2
     dbe:	0a c0       	rjmp	.+20     	; 0xdd4 <dtoa_prf+0xb6>
     dc0:	3e e4       	ldi	r19, 0x4E	; 78
     dc2:	d6 01       	movw	r26, r12
     dc4:	3c 93       	st	X, r19
     dc6:	41 e4       	ldi	r20, 0x41	; 65
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	4c 93       	st	X, r20
     dcc:	11 97       	sbiw	r26, 0x01	; 1
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	3c 93       	st	X, r19
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <dtoa_prf+0xc2>
     dd4:	3e e6       	ldi	r19, 0x6E	; 110
     dd6:	f6 01       	movw	r30, r12
     dd8:	30 83       	st	Z, r19
     dda:	41 e6       	ldi	r20, 0x61	; 97
     ddc:	41 83       	std	Z+1, r20	; 0x01
     dde:	32 83       	std	Z+2, r19	; 0x02
     de0:	fc 01       	movw	r30, r24
     de2:	32 2f       	mov	r19, r18
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	33 23       	and	r19, r19
     de8:	09 f4       	brne	.+2      	; 0xdec <dtoa_prf+0xce>
     dea:	42 c0       	rjmp	.+132    	; 0xe70 <dtoa_prf+0x152>
     dec:	41 93       	st	Z+, r20
     dee:	31 50       	subi	r19, 0x01	; 1
     df0:	fa cf       	rjmp	.-12     	; 0xde6 <dtoa_prf+0xc8>
     df2:	42 ff       	sbrs	r20, 2
     df4:	44 c0       	rjmp	.+136    	; 0xe7e <dtoa_prf+0x160>
     df6:	91 11       	cpse	r25, r1
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <dtoa_prf+0xe0>
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <dtoa_prf+0xe2>
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	81 17       	cp	r24, r17
     e02:	18 f4       	brcc	.+6      	; 0xe0a <dtoa_prf+0xec>
     e04:	21 2f       	mov	r18, r17
     e06:	28 1b       	sub	r18, r24
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <dtoa_prf+0xee>
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	51 11       	cpse	r21, r1
     e0e:	0b c0       	rjmp	.+22     	; 0xe26 <dtoa_prf+0x108>
     e10:	f6 01       	movw	r30, r12
     e12:	82 2f       	mov	r24, r18
     e14:	30 e2       	ldi	r19, 0x20	; 32
     e16:	88 23       	and	r24, r24
     e18:	19 f0       	breq	.+6      	; 0xe20 <dtoa_prf+0x102>
     e1a:	31 93       	st	Z+, r19
     e1c:	81 50       	subi	r24, 0x01	; 1
     e1e:	fb cf       	rjmp	.-10     	; 0xe16 <dtoa_prf+0xf8>
     e20:	c2 0e       	add	r12, r18
     e22:	d1 1c       	adc	r13, r1
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	99 23       	and	r25, r25
     e28:	29 f0       	breq	.+10     	; 0xe34 <dtoa_prf+0x116>
     e2a:	d6 01       	movw	r26, r12
     e2c:	9c 93       	st	X, r25
     e2e:	f6 01       	movw	r30, r12
     e30:	31 96       	adiw	r30, 0x01	; 1
     e32:	6f 01       	movw	r12, r30
     e34:	c6 01       	movw	r24, r12
     e36:	03 96       	adiw	r24, 0x03	; 3
     e38:	e2 fe       	sbrs	r14, 2
     e3a:	0b c0       	rjmp	.+22     	; 0xe52 <dtoa_prf+0x134>
     e3c:	39 e4       	ldi	r19, 0x49	; 73
     e3e:	d6 01       	movw	r26, r12
     e40:	3c 93       	st	X, r19
     e42:	3e e4       	ldi	r19, 0x4E	; 78
     e44:	11 96       	adiw	r26, 0x01	; 1
     e46:	3c 93       	st	X, r19
     e48:	11 97       	sbiw	r26, 0x01	; 1
     e4a:	36 e4       	ldi	r19, 0x46	; 70
     e4c:	12 96       	adiw	r26, 0x02	; 2
     e4e:	3c 93       	st	X, r19
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <dtoa_prf+0x142>
     e52:	39 e6       	ldi	r19, 0x69	; 105
     e54:	f6 01       	movw	r30, r12
     e56:	30 83       	st	Z, r19
     e58:	3e e6       	ldi	r19, 0x6E	; 110
     e5a:	31 83       	std	Z+1, r19	; 0x01
     e5c:	36 e6       	ldi	r19, 0x66	; 102
     e5e:	32 83       	std	Z+2, r19	; 0x02
     e60:	fc 01       	movw	r30, r24
     e62:	32 2f       	mov	r19, r18
     e64:	40 e2       	ldi	r20, 0x20	; 32
     e66:	33 23       	and	r19, r19
     e68:	19 f0       	breq	.+6      	; 0xe70 <dtoa_prf+0x152>
     e6a:	41 93       	st	Z+, r20
     e6c:	31 50       	subi	r19, 0x01	; 1
     e6e:	fb cf       	rjmp	.-10     	; 0xe66 <dtoa_prf+0x148>
     e70:	fc 01       	movw	r30, r24
     e72:	e2 0f       	add	r30, r18
     e74:	f1 1d       	adc	r31, r1
     e76:	10 82       	st	Z, r1
     e78:	8e ef       	ldi	r24, 0xFE	; 254
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
     e7c:	a6 c0       	rjmp	.+332    	; 0xfca <dtoa_prf+0x2ac>
     e7e:	21 e0       	ldi	r18, 0x01	; 1
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	91 11       	cpse	r25, r1
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <dtoa_prf+0x16c>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	16 16       	cp	r1, r22
     e8c:	17 06       	cpc	r1, r23
     e8e:	1c f4       	brge	.+6      	; 0xe96 <dtoa_prf+0x178>
     e90:	fb 01       	movw	r30, r22
     e92:	31 96       	adiw	r30, 0x01	; 1
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <dtoa_prf+0x17c>
     e96:	e1 e0       	ldi	r30, 0x01	; 1
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	2e 0f       	add	r18, r30
     e9c:	3f 1f       	adc	r19, r31
     e9e:	bb 20       	and	r11, r11
     ea0:	21 f0       	breq	.+8      	; 0xeaa <dtoa_prf+0x18c>
     ea2:	eb 2d       	mov	r30, r11
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	31 96       	adiw	r30, 0x01	; 1
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <dtoa_prf+0x190>
     eaa:	e0 e0       	ldi	r30, 0x00	; 0
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	2e 0f       	add	r18, r30
     eb0:	3f 1f       	adc	r19, r31
     eb2:	e1 2f       	mov	r30, r17
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	2e 17       	cp	r18, r30
     eb8:	3f 07       	cpc	r19, r31
     eba:	1c f4       	brge	.+6      	; 0xec2 <dtoa_prf+0x1a4>
     ebc:	12 1b       	sub	r17, r18
     ebe:	21 2f       	mov	r18, r17
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <dtoa_prf+0x1a6>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	8e 2d       	mov	r24, r14
     ec6:	88 71       	andi	r24, 0x18	; 24
     ec8:	59 f4       	brne	.+22     	; 0xee0 <dtoa_prf+0x1c2>
     eca:	f6 01       	movw	r30, r12
     ecc:	82 2f       	mov	r24, r18
     ece:	30 e2       	ldi	r19, 0x20	; 32
     ed0:	88 23       	and	r24, r24
     ed2:	19 f0       	breq	.+6      	; 0xeda <dtoa_prf+0x1bc>
     ed4:	31 93       	st	Z+, r19
     ed6:	81 50       	subi	r24, 0x01	; 1
     ed8:	fb cf       	rjmp	.-10     	; 0xed0 <dtoa_prf+0x1b2>
     eda:	c2 0e       	add	r12, r18
     edc:	d1 1c       	adc	r13, r1
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	99 23       	and	r25, r25
     ee2:	29 f0       	breq	.+10     	; 0xeee <dtoa_prf+0x1d0>
     ee4:	d6 01       	movw	r26, r12
     ee6:	9c 93       	st	X, r25
     ee8:	f6 01       	movw	r30, r12
     eea:	31 96       	adiw	r30, 0x01	; 1
     eec:	6f 01       	movw	r12, r30
     eee:	51 11       	cpse	r21, r1
     ef0:	0b c0       	rjmp	.+22     	; 0xf08 <dtoa_prf+0x1ea>
     ef2:	f6 01       	movw	r30, r12
     ef4:	82 2f       	mov	r24, r18
     ef6:	90 e3       	ldi	r25, 0x30	; 48
     ef8:	88 23       	and	r24, r24
     efa:	19 f0       	breq	.+6      	; 0xf02 <dtoa_prf+0x1e4>
     efc:	91 93       	st	Z+, r25
     efe:	81 50       	subi	r24, 0x01	; 1
     f00:	fb cf       	rjmp	.-10     	; 0xef8 <dtoa_prf+0x1da>
     f02:	c2 0e       	add	r12, r18
     f04:	d1 1c       	adc	r13, r1
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	0f 2d       	mov	r16, r15
     f0a:	06 0f       	add	r16, r22
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	34 2f       	mov	r19, r20
     f10:	30 71       	andi	r19, 0x10	; 16
     f12:	44 ff       	sbrs	r20, 4
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <dtoa_prf+0x1fe>
     f16:	91 33       	cpi	r25, 0x31	; 49
     f18:	09 f4       	brne	.+2      	; 0xf1c <dtoa_prf+0x1fe>
     f1a:	01 50       	subi	r16, 0x01	; 1
     f1c:	10 16       	cp	r1, r16
     f1e:	24 f4       	brge	.+8      	; 0xf28 <dtoa_prf+0x20a>
     f20:	09 30       	cpi	r16, 0x09	; 9
     f22:	18 f0       	brcs	.+6      	; 0xf2a <dtoa_prf+0x20c>
     f24:	08 e0       	ldi	r16, 0x08	; 8
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <dtoa_prf+0x20c>
     f28:	01 e0       	ldi	r16, 0x01	; 1
     f2a:	ab 01       	movw	r20, r22
     f2c:	77 ff       	sbrs	r23, 7
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <dtoa_prf+0x216>
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	fb 01       	movw	r30, r22
     f36:	e4 1b       	sub	r30, r20
     f38:	f5 0b       	sbc	r31, r21
     f3a:	a1 e0       	ldi	r26, 0x01	; 1
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ac 0f       	add	r26, r28
     f40:	bd 1f       	adc	r27, r29
     f42:	ea 0f       	add	r30, r26
     f44:	fb 1f       	adc	r31, r27
     f46:	8e e2       	ldi	r24, 0x2E	; 46
     f48:	a8 2e       	mov	r10, r24
     f4a:	4b 01       	movw	r8, r22
     f4c:	80 1a       	sub	r8, r16
     f4e:	91 08       	sbc	r9, r1
     f50:	0b 2d       	mov	r16, r11
     f52:	10 e0       	ldi	r17, 0x00	; 0
     f54:	11 95       	neg	r17
     f56:	01 95       	neg	r16
     f58:	11 09       	sbc	r17, r1
     f5a:	4f 3f       	cpi	r20, 0xFF	; 255
     f5c:	bf ef       	ldi	r27, 0xFF	; 255
     f5e:	5b 07       	cpc	r21, r27
     f60:	21 f4       	brne	.+8      	; 0xf6a <dtoa_prf+0x24c>
     f62:	d6 01       	movw	r26, r12
     f64:	ac 92       	st	X, r10
     f66:	11 96       	adiw	r26, 0x01	; 1
     f68:	6d 01       	movw	r12, r26
     f6a:	64 17       	cp	r22, r20
     f6c:	75 07       	cpc	r23, r21
     f6e:	2c f0       	brlt	.+10     	; 0xf7a <dtoa_prf+0x25c>
     f70:	84 16       	cp	r8, r20
     f72:	95 06       	cpc	r9, r21
     f74:	14 f4       	brge	.+4      	; 0xf7a <dtoa_prf+0x25c>
     f76:	81 81       	ldd	r24, Z+1	; 0x01
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <dtoa_prf+0x25e>
     f7a:	80 e3       	ldi	r24, 0x30	; 48
     f7c:	41 50       	subi	r20, 0x01	; 1
     f7e:	51 09       	sbc	r21, r1
     f80:	31 96       	adiw	r30, 0x01	; 1
     f82:	d6 01       	movw	r26, r12
     f84:	11 96       	adiw	r26, 0x01	; 1
     f86:	7d 01       	movw	r14, r26
     f88:	40 17       	cp	r20, r16
     f8a:	51 07       	cpc	r21, r17
     f8c:	24 f0       	brlt	.+8      	; 0xf96 <dtoa_prf+0x278>
     f8e:	d6 01       	movw	r26, r12
     f90:	8c 93       	st	X, r24
     f92:	67 01       	movw	r12, r14
     f94:	e2 cf       	rjmp	.-60     	; 0xf5a <dtoa_prf+0x23c>
     f96:	64 17       	cp	r22, r20
     f98:	75 07       	cpc	r23, r21
     f9a:	39 f4       	brne	.+14     	; 0xfaa <dtoa_prf+0x28c>
     f9c:	96 33       	cpi	r25, 0x36	; 54
     f9e:	20 f4       	brcc	.+8      	; 0xfa8 <dtoa_prf+0x28a>
     fa0:	95 33       	cpi	r25, 0x35	; 53
     fa2:	19 f4       	brne	.+6      	; 0xfaa <dtoa_prf+0x28c>
     fa4:	31 11       	cpse	r19, r1
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <dtoa_prf+0x28c>
     fa8:	81 e3       	ldi	r24, 0x31	; 49
     faa:	f6 01       	movw	r30, r12
     fac:	80 83       	st	Z, r24
     fae:	f7 01       	movw	r30, r14
     fb0:	82 2f       	mov	r24, r18
     fb2:	90 e2       	ldi	r25, 0x20	; 32
     fb4:	88 23       	and	r24, r24
     fb6:	19 f0       	breq	.+6      	; 0xfbe <dtoa_prf+0x2a0>
     fb8:	91 93       	st	Z+, r25
     fba:	81 50       	subi	r24, 0x01	; 1
     fbc:	fb cf       	rjmp	.-10     	; 0xfb4 <dtoa_prf+0x296>
     fbe:	f7 01       	movw	r30, r14
     fc0:	e2 0f       	add	r30, r18
     fc2:	f1 1d       	adc	r31, r1
     fc4:	10 82       	st	Z, r1
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	29 96       	adiw	r28, 0x09	; 9
     fcc:	ec e0       	ldi	r30, 0x0C	; 12
     fce:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__epilogue_restores__+0xc>

00000fd2 <__ftoa_engine>:
     fd2:	28 30       	cpi	r18, 0x08	; 8
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <__ftoa_engine+0x6>
     fd6:	27 e0       	ldi	r18, 0x07	; 7
     fd8:	33 27       	eor	r19, r19
     fda:	da 01       	movw	r26, r20
     fdc:	99 0f       	add	r25, r25
     fde:	31 1d       	adc	r19, r1
     fe0:	87 fd       	sbrc	r24, 7
     fe2:	91 60       	ori	r25, 0x01	; 1
     fe4:	00 96       	adiw	r24, 0x00	; 0
     fe6:	61 05       	cpc	r22, r1
     fe8:	71 05       	cpc	r23, r1
     fea:	39 f4       	brne	.+14     	; 0xffa <__ftoa_engine+0x28>
     fec:	32 60       	ori	r19, 0x02	; 2
     fee:	2e 5f       	subi	r18, 0xFE	; 254
     ff0:	3d 93       	st	X+, r19
     ff2:	30 e3       	ldi	r19, 0x30	; 48
     ff4:	2a 95       	dec	r18
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <__ftoa_engine+0x1e>
     ff8:	08 95       	ret
     ffa:	9f 3f       	cpi	r25, 0xFF	; 255
     ffc:	30 f0       	brcs	.+12     	; 0x100a <__ftoa_engine+0x38>
     ffe:	80 38       	cpi	r24, 0x80	; 128
    1000:	71 05       	cpc	r23, r1
    1002:	61 05       	cpc	r22, r1
    1004:	09 f0       	breq	.+2      	; 0x1008 <__ftoa_engine+0x36>
    1006:	3c 5f       	subi	r19, 0xFC	; 252
    1008:	3c 5f       	subi	r19, 0xFC	; 252
    100a:	3d 93       	st	X+, r19
    100c:	91 30       	cpi	r25, 0x01	; 1
    100e:	08 f0       	brcs	.+2      	; 0x1012 <__ftoa_engine+0x40>
    1010:	80 68       	ori	r24, 0x80	; 128
    1012:	91 1d       	adc	r25, r1
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	1f 93       	push	r17
    101a:	0f 93       	push	r16
    101c:	ff 92       	push	r15
    101e:	ef 92       	push	r14
    1020:	19 2f       	mov	r17, r25
    1022:	98 7f       	andi	r25, 0xF8	; 248
    1024:	96 95       	lsr	r25
    1026:	e9 2f       	mov	r30, r25
    1028:	96 95       	lsr	r25
    102a:	96 95       	lsr	r25
    102c:	e9 0f       	add	r30, r25
    102e:	ff 27       	eor	r31, r31
    1030:	ee 53       	subi	r30, 0x3E	; 62
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	99 27       	eor	r25, r25
    1036:	33 27       	eor	r19, r19
    1038:	ee 24       	eor	r14, r14
    103a:	ff 24       	eor	r15, r15
    103c:	a7 01       	movw	r20, r14
    103e:	e7 01       	movw	r28, r14
    1040:	05 90       	lpm	r0, Z+
    1042:	08 94       	sec
    1044:	07 94       	ror	r0
    1046:	28 f4       	brcc	.+10     	; 0x1052 <__ftoa_engine+0x80>
    1048:	36 0f       	add	r19, r22
    104a:	e7 1e       	adc	r14, r23
    104c:	f8 1e       	adc	r15, r24
    104e:	49 1f       	adc	r20, r25
    1050:	51 1d       	adc	r21, r1
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	06 94       	lsr	r0
    105c:	a1 f7       	brne	.-24     	; 0x1046 <__ftoa_engine+0x74>
    105e:	05 90       	lpm	r0, Z+
    1060:	07 94       	ror	r0
    1062:	28 f4       	brcc	.+10     	; 0x106e <__ftoa_engine+0x9c>
    1064:	e7 0e       	add	r14, r23
    1066:	f8 1e       	adc	r15, r24
    1068:	49 1f       	adc	r20, r25
    106a:	56 1f       	adc	r21, r22
    106c:	c1 1d       	adc	r28, r1
    106e:	77 0f       	add	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	66 1f       	adc	r22, r22
    1076:	06 94       	lsr	r0
    1078:	a1 f7       	brne	.-24     	; 0x1062 <__ftoa_engine+0x90>
    107a:	05 90       	lpm	r0, Z+
    107c:	07 94       	ror	r0
    107e:	28 f4       	brcc	.+10     	; 0x108a <__ftoa_engine+0xb8>
    1080:	f8 0e       	add	r15, r24
    1082:	49 1f       	adc	r20, r25
    1084:	56 1f       	adc	r21, r22
    1086:	c7 1f       	adc	r28, r23
    1088:	d1 1d       	adc	r29, r1
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	66 1f       	adc	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	06 94       	lsr	r0
    1094:	a1 f7       	brne	.-24     	; 0x107e <__ftoa_engine+0xac>
    1096:	05 90       	lpm	r0, Z+
    1098:	07 94       	ror	r0
    109a:	20 f4       	brcc	.+8      	; 0x10a4 <__ftoa_engine+0xd2>
    109c:	49 0f       	add	r20, r25
    109e:	56 1f       	adc	r21, r22
    10a0:	c7 1f       	adc	r28, r23
    10a2:	d8 1f       	adc	r29, r24
    10a4:	99 0f       	add	r25, r25
    10a6:	66 1f       	adc	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	06 94       	lsr	r0
    10ae:	a9 f7       	brne	.-22     	; 0x109a <__ftoa_engine+0xc8>
    10b0:	84 91       	lpm	r24, Z
    10b2:	10 95       	com	r17
    10b4:	17 70       	andi	r17, 0x07	; 7
    10b6:	41 f0       	breq	.+16     	; 0x10c8 <__ftoa_engine+0xf6>
    10b8:	d6 95       	lsr	r29
    10ba:	c7 95       	ror	r28
    10bc:	57 95       	ror	r21
    10be:	47 95       	ror	r20
    10c0:	f7 94       	ror	r15
    10c2:	e7 94       	ror	r14
    10c4:	1a 95       	dec	r17
    10c6:	c1 f7       	brne	.-16     	; 0x10b8 <__ftoa_engine+0xe6>
    10c8:	e8 e6       	ldi	r30, 0x68	; 104
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	68 94       	set
    10ce:	15 90       	lpm	r1, Z+
    10d0:	15 91       	lpm	r17, Z+
    10d2:	35 91       	lpm	r19, Z+
    10d4:	65 91       	lpm	r22, Z+
    10d6:	95 91       	lpm	r25, Z+
    10d8:	05 90       	lpm	r0, Z+
    10da:	7f e2       	ldi	r23, 0x2F	; 47
    10dc:	73 95       	inc	r23
    10de:	e1 18       	sub	r14, r1
    10e0:	f1 0a       	sbc	r15, r17
    10e2:	43 0b       	sbc	r20, r19
    10e4:	56 0b       	sbc	r21, r22
    10e6:	c9 0b       	sbc	r28, r25
    10e8:	d0 09       	sbc	r29, r0
    10ea:	c0 f7       	brcc	.-16     	; 0x10dc <__ftoa_engine+0x10a>
    10ec:	e1 0c       	add	r14, r1
    10ee:	f1 1e       	adc	r15, r17
    10f0:	43 1f       	adc	r20, r19
    10f2:	56 1f       	adc	r21, r22
    10f4:	c9 1f       	adc	r28, r25
    10f6:	d0 1d       	adc	r29, r0
    10f8:	7e f4       	brtc	.+30     	; 0x1118 <__ftoa_engine+0x146>
    10fa:	70 33       	cpi	r23, 0x30	; 48
    10fc:	11 f4       	brne	.+4      	; 0x1102 <__ftoa_engine+0x130>
    10fe:	8a 95       	dec	r24
    1100:	e6 cf       	rjmp	.-52     	; 0x10ce <__ftoa_engine+0xfc>
    1102:	e8 94       	clt
    1104:	01 50       	subi	r16, 0x01	; 1
    1106:	30 f0       	brcs	.+12     	; 0x1114 <__ftoa_engine+0x142>
    1108:	08 0f       	add	r16, r24
    110a:	0a f4       	brpl	.+2      	; 0x110e <__ftoa_engine+0x13c>
    110c:	00 27       	eor	r16, r16
    110e:	02 17       	cp	r16, r18
    1110:	08 f4       	brcc	.+2      	; 0x1114 <__ftoa_engine+0x142>
    1112:	20 2f       	mov	r18, r16
    1114:	23 95       	inc	r18
    1116:	02 2f       	mov	r16, r18
    1118:	7a 33       	cpi	r23, 0x3A	; 58
    111a:	28 f0       	brcs	.+10     	; 0x1126 <__ftoa_engine+0x154>
    111c:	79 e3       	ldi	r23, 0x39	; 57
    111e:	7d 93       	st	X+, r23
    1120:	2a 95       	dec	r18
    1122:	e9 f7       	brne	.-6      	; 0x111e <__ftoa_engine+0x14c>
    1124:	10 c0       	rjmp	.+32     	; 0x1146 <__ftoa_engine+0x174>
    1126:	7d 93       	st	X+, r23
    1128:	2a 95       	dec	r18
    112a:	89 f6       	brne	.-94     	; 0x10ce <__ftoa_engine+0xfc>
    112c:	06 94       	lsr	r0
    112e:	97 95       	ror	r25
    1130:	67 95       	ror	r22
    1132:	37 95       	ror	r19
    1134:	17 95       	ror	r17
    1136:	17 94       	ror	r1
    1138:	e1 18       	sub	r14, r1
    113a:	f1 0a       	sbc	r15, r17
    113c:	43 0b       	sbc	r20, r19
    113e:	56 0b       	sbc	r21, r22
    1140:	c9 0b       	sbc	r28, r25
    1142:	d0 09       	sbc	r29, r0
    1144:	98 f0       	brcs	.+38     	; 0x116c <__ftoa_engine+0x19a>
    1146:	23 95       	inc	r18
    1148:	7e 91       	ld	r23, -X
    114a:	73 95       	inc	r23
    114c:	7a 33       	cpi	r23, 0x3A	; 58
    114e:	08 f0       	brcs	.+2      	; 0x1152 <__ftoa_engine+0x180>
    1150:	70 e3       	ldi	r23, 0x30	; 48
    1152:	7c 93       	st	X, r23
    1154:	20 13       	cpse	r18, r16
    1156:	b8 f7       	brcc	.-18     	; 0x1146 <__ftoa_engine+0x174>
    1158:	7e 91       	ld	r23, -X
    115a:	70 61       	ori	r23, 0x10	; 16
    115c:	7d 93       	st	X+, r23
    115e:	30 f0       	brcs	.+12     	; 0x116c <__ftoa_engine+0x19a>
    1160:	83 95       	inc	r24
    1162:	71 e3       	ldi	r23, 0x31	; 49
    1164:	7d 93       	st	X+, r23
    1166:	70 e3       	ldi	r23, 0x30	; 48
    1168:	2a 95       	dec	r18
    116a:	e1 f7       	brne	.-8      	; 0x1164 <__ftoa_engine+0x192>
    116c:	11 24       	eor	r1, r1
    116e:	ef 90       	pop	r14
    1170:	ff 90       	pop	r15
    1172:	0f 91       	pop	r16
    1174:	1f 91       	pop	r17
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	99 27       	eor	r25, r25
    117c:	87 fd       	sbrc	r24, 7
    117e:	90 95       	com	r25
    1180:	08 95       	ret

00001182 <__prologue_saves__>:
    1182:	2f 92       	push	r2
    1184:	3f 92       	push	r3
    1186:	4f 92       	push	r4
    1188:	5f 92       	push	r5
    118a:	6f 92       	push	r6
    118c:	7f 92       	push	r7
    118e:	8f 92       	push	r8
    1190:	9f 92       	push	r9
    1192:	af 92       	push	r10
    1194:	bf 92       	push	r11
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	ca 1b       	sub	r28, r26
    11ac:	db 0b       	sbc	r29, r27
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	09 94       	ijmp

000011ba <__epilogue_restores__>:
    11ba:	2a 88       	ldd	r2, Y+18	; 0x12
    11bc:	39 88       	ldd	r3, Y+17	; 0x11
    11be:	48 88       	ldd	r4, Y+16	; 0x10
    11c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    11c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    11c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    11c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    11c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    11ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    11cc:	b9 84       	ldd	r11, Y+9	; 0x09
    11ce:	c8 84       	ldd	r12, Y+8	; 0x08
    11d0:	df 80       	ldd	r13, Y+7	; 0x07
    11d2:	ee 80       	ldd	r14, Y+6	; 0x06
    11d4:	fd 80       	ldd	r15, Y+5	; 0x05
    11d6:	0c 81       	ldd	r16, Y+4	; 0x04
    11d8:	1b 81       	ldd	r17, Y+3	; 0x03
    11da:	aa 81       	ldd	r26, Y+2	; 0x02
    11dc:	b9 81       	ldd	r27, Y+1	; 0x01
    11de:	ce 0f       	add	r28, r30
    11e0:	d1 1d       	adc	r29, r1
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	ed 01       	movw	r28, r26
    11ee:	08 95       	ret

000011f0 <_exit>:
    11f0:	f8 94       	cli

000011f2 <__stop_program>:
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <__stop_program>
