
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800110  00800110  0000037a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bf  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a3  00000000  00000000  00000deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000399  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a9  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "my_uart.h"

int main(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2e 97       	sbiw	r28, 0x0e	; 14
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	uart_init(9600);
  ba:	60 e8       	ldi	r22, 0x80	; 128
  bc:	75 e2       	ldi	r23, 0x25	; 37
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 c1 00 	call	0x182	; 0x182 <uart_init>
	uint8_t str[] = "Started !!!\n\r";
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	e1 e0       	ldi	r30, 0x01	; 1
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	de 01       	movw	r26, r28
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x2a>
	sei();
  d8:	78 94       	sei
	
	uart_send_string(str);
  da:	ce 01       	movw	r24, r28
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	0e 94 14 01 	call	0x228	; 0x228 <uart_send_string>
    while (1) {	
		if(uart_get_buffer_head()>0){
  e2:	0e 94 22 01 	call	0x244	; 0x244 <uart_get_buffer_head>
  e6:	89 2b       	or	r24, r25
  e8:	e1 f3       	breq	.-8      	; 0xe2 <main+0x3c>
			uint8_t data = uart_read_buffer();
  ea:	0e 94 27 01 	call	0x24e	; 0x24e <uart_read_buffer>
			uart_send_byte(data);
  ee:	0e 94 f5 00 	call	0x1ea	; 0x1ea <uart_send_byte>
  f2:	f7 cf       	rjmp	.-18     	; 0xe2 <main+0x3c>

000000f4 <__vector_18>:

volatile static uint8_t rx_buffer[MAX_BUFFER_SIZE] = {0};	// Initialize as all 0s
volatile static uint16_t buffer_head = 0;
volatile static uint8_t uart_tx_busy = 1;

ISR(USART_RX_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	volatile static uint16_t write_pos = 0;		
	
	rx_buffer[write_pos] = UDR0;			 // read in the UDR0 register 
 106:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <write_pos.1749>
 10a:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <write_pos.1749+0x1>
 10e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 112:	ea 5e       	subi	r30, 0xEA	; 234
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	80 83       	st	Z, r24
	buffer_head++;					// declares the size of the queue
 118:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <buffer_head>
 11c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <buffer_head+0x1>
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <buffer_head+0x1>
 126:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <buffer_head>
	write_pos++;							// increment the position to write new data
 12a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <write_pos.1749>
 12e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <write_pos.1749+0x1>
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <write_pos.1749+0x1>
 138:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <write_pos.1749>
	
	if (write_pos >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
 13c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <write_pos.1749>
 140:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <write_pos.1749+0x1>
 144:	80 38       	cpi	r24, 0x80	; 128
 146:	91 05       	cpc	r25, r1
 148:	20 f0       	brcs	.+8      	; 0x152 <__vector_18+0x5e>
		write_pos = 0; 
 14a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <write_pos.1749+0x1>
 14e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <write_pos.1749>
	}
	
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_20>:

ISR(USART_TX_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
	uart_tx_busy = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
 182:	dc 01       	movw	r26, r24
 184:	cb 01       	movw	r24, r22
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	aa 1f       	adc	r26, r26
 18c:	bb 1f       	adc	r27, r27
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	aa 1f       	adc	r26, r26
 194:	bb 1f       	adc	r27, r27
 196:	9c 01       	movw	r18, r24
 198:	ad 01       	movw	r20, r26
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	44 1f       	adc	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	44 1f       	adc	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	74 e2       	ldi	r23, 0x24	; 36
 1ae:	84 ef       	ldi	r24, 0xF4	; 244
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodsi4>
 1b6:	ba 01       	movw	r22, r20
 1b8:	a9 01       	movw	r20, r18
 1ba:	41 50       	subi	r20, 0x01	; 1
 1bc:	51 09       	sbc	r21, r1
 1be:	61 09       	sbc	r22, r1
 1c0:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
 1c2:	db 01       	movw	r26, r22
 1c4:	ca 01       	movw	r24, r20
 1c6:	88 27       	eor	r24, r24
 1c8:	9f 70       	andi	r25, 0x0F	; 15
 1ca:	aa 27       	eor	r26, r26
 1cc:	bb 27       	eor	r27, r27
 1ce:	89 2f       	mov	r24, r25
 1d0:	9a 2f       	mov	r25, r26
 1d2:	ab 2f       	mov	r26, r27
 1d4:	bb 27       	eor	r27, r27
 1d6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
 1da:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
 1de:	e1 ec       	ldi	r30, 0xC1	; 193
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 6d       	ori	r24, 0xD8	; 216
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <uart_send_byte>:
}


void uart_send_byte(uint8_t data){
	while(uart_tx_busy == 0); // while UART is not transmitting
 1ea:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ee:	99 23       	and	r25, r25
 1f0:	e1 f3       	breq	.-8      	; 0x1ea <uart_send_byte>
	
	uart_tx_busy = 0; 
 1f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = data;				// load byte passed into the function to the uart buffer
 1f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1fa:	08 95       	ret

000001fc <uart_send_array>:
}

void uart_send_array(uint8_t *arr, uint16_t len){
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
	for(uint16_t i = 0; i < len; ++i){
 204:	61 15       	cp	r22, r1
 206:	71 05       	cpc	r23, r1
 208:	51 f0       	breq	.+20     	; 0x21e <uart_send_array+0x22>
 20a:	8c 01       	movw	r16, r24
 20c:	ec 01       	movw	r28, r24
 20e:	06 0f       	add	r16, r22
 210:	17 1f       	adc	r17, r23
		uart_send_byte(arr[i]);
 212:	89 91       	ld	r24, Y+
 214:	0e 94 f5 00 	call	0x1ea	; 0x1ea <uart_send_byte>
	uart_tx_busy = 0; 
	UDR0 = data;				// load byte passed into the function to the uart buffer
}

void uart_send_array(uint8_t *arr, uint16_t len){
	for(uint16_t i = 0; i < len; ++i){
 218:	c0 17       	cp	r28, r16
 21a:	d1 07       	cpc	r29, r17
 21c:	d1 f7       	brne	.-12     	; 0x212 <uart_send_array+0x16>
		uart_send_byte(arr[i]);
	}
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <uart_send_string>:

void uart_send_string(uint8_t *arr) {
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
 22e:	89 91       	ld	r24, Y+
 230:	0e 94 f5 00 	call	0x1ea	; 0x1ea <uart_send_byte>
		i++;
	} while(arr[i] != '\0');
 234:	88 81       	ld	r24, Y
 236:	81 11       	cpse	r24, r1
 238:	fa cf       	rjmp	.-12     	; 0x22e <uart_send_string+0x6>
	uart_send_byte(arr[i]);
 23a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <uart_send_byte>

}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <uart_get_buffer_head>:

uint16_t uart_get_buffer_head(void){
	return buffer_head;
 244:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <buffer_head>
 248:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <buffer_head+0x1>
}
 24c:	08 95       	ret

0000024e <uart_read_buffer>:

uint8_t uart_read_buffer(void){
	static uint16_t read_pos = 0;
	uint8_t data = rx_buffer[read_pos];		// pull the data out of the buffer at the 
 24e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 252:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 256:	f9 01       	movw	r30, r18
 258:	ea 5e       	subi	r30, 0xEA	; 234
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	80 81       	ld	r24, Z
	read_pos++;								
 25e:	2f 5f       	subi	r18, 0xFF	; 255
 260:	3f 4f       	sbci	r19, 0xFF	; 255
 262:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 266:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
	buffer_head--;							// decrement the head of the list, to point to newest unread data. 
 26a:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <buffer_head>
 26e:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <buffer_head+0x1>
 272:	41 50       	subi	r20, 0x01	; 1
 274:	51 09       	sbc	r21, r1
 276:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <buffer_head+0x1>
 27a:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <buffer_head>
	if(read_pos >= MAX_BUFFER_SIZE){		// reading has gone past the buffers size. move to tail of buffer to extract new data
 27e:	20 38       	cpi	r18, 0x80	; 128
 280:	31 05       	cpc	r19, r1
 282:	20 f0       	brcs	.+8      	; 0x28c <uart_read_buffer+0x3e>
		read_pos = 0; 
 284:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 288:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	
	return data;
}
 28c:	08 95       	ret

0000028e <__udivmodsi4>:
 28e:	a1 e2       	ldi	r26, 0x21	; 33
 290:	1a 2e       	mov	r1, r26
 292:	aa 1b       	sub	r26, r26
 294:	bb 1b       	sub	r27, r27
 296:	fd 01       	movw	r30, r26
 298:	0d c0       	rjmp	.+26     	; 0x2b4 <__udivmodsi4_ep>

0000029a <__udivmodsi4_loop>:
 29a:	aa 1f       	adc	r26, r26
 29c:	bb 1f       	adc	r27, r27
 29e:	ee 1f       	adc	r30, r30
 2a0:	ff 1f       	adc	r31, r31
 2a2:	a2 17       	cp	r26, r18
 2a4:	b3 07       	cpc	r27, r19
 2a6:	e4 07       	cpc	r30, r20
 2a8:	f5 07       	cpc	r31, r21
 2aa:	20 f0       	brcs	.+8      	; 0x2b4 <__udivmodsi4_ep>
 2ac:	a2 1b       	sub	r26, r18
 2ae:	b3 0b       	sbc	r27, r19
 2b0:	e4 0b       	sbc	r30, r20
 2b2:	f5 0b       	sbc	r31, r21

000002b4 <__udivmodsi4_ep>:
 2b4:	66 1f       	adc	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	88 1f       	adc	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	1a 94       	dec	r1
 2be:	69 f7       	brne	.-38     	; 0x29a <__udivmodsi4_loop>
 2c0:	60 95       	com	r22
 2c2:	70 95       	com	r23
 2c4:	80 95       	com	r24
 2c6:	90 95       	com	r25
 2c8:	9b 01       	movw	r18, r22
 2ca:	ac 01       	movw	r20, r24
 2cc:	bd 01       	movw	r22, r26
 2ce:	cf 01       	movw	r24, r30
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
