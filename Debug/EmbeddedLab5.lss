
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001688  0000171c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  0080011c  0080011c  00001738  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001490  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b12  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000827  00000000  00000000  000037d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00004000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d8  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d34  00000000  00000000  0000488c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000055c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_18>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_20>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_24>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     10b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     11b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     12b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     13b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     14b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     15b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     16b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     17b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     18b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     19b:	3d 27 00                                            ='.

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d8 e0       	ldi	r29, 0x08	; 8
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	e8 e8       	ldi	r30, 0x88	; 136
     1b2:	f6 e1       	ldi	r31, 0x16	; 22
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	ac 31       	cpi	r26, 0x1C	; 28
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	ac e1       	ldi	r26, 0x1C	; 28
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a1 3b       	cpi	r26, 0xB1	; 177
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 c5 01 	call	0x38a	; 0x38a <main>
     1d4:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <setup>:
#define DAC0 0x00
#define DAC1 0x01
#define MAX518 0b01000000

void setup(){
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
     1dc:	ea e7       	ldi	r30, 0x7A	; 122
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	87 68       	ori	r24, 0x87	; 135
     1e4:	80 83       	st	Z, r24
	ADMUX = 0b00000000;   // clear ADMUX for ADC0 pin 
     1e6:	ec e7       	ldi	r30, 0x7C	; 124
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0); // setup internal reference voltage of 1.1V
     1ec:	80 81       	ld	r24, Z
     1ee:	80 64       	ori	r24, 0x40	; 64
     1f0:	80 83       	st	Z, r24
     1f2:	08 95       	ret

000001f4 <get_adc_value>:
			read_command(uart_get_command());
		}
	}
}

char * get_adc_value(){
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
	ADCSRA |= (1<<ADSC);      // enable a single conversion
     1fc:	ea e7       	ldi	r30, 0x7A	; 122
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	80 64       	ori	r24, 0x40	; 64
     204:	80 83       	st	Z, r24
	
	while (!(ADCSRA & (1<<ADIF))); // wait for the conversion to be completed		
     206:	80 81       	ld	r24, Z
     208:	84 ff       	sbrs	r24, 4
     20a:	fd cf       	rjmp	.-6      	; 0x206 <get_adc_value+0x12>
	
	float result = (ADC*5.0)/1024;	// convert to float 
     20c:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     210:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
	char * buffer = (char* ) malloc(6 * sizeof(char));	
     214:	86 e0       	ldi	r24, 0x06	; 6
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 9a 05 	call	0xb34	; 0xb34 <malloc>
     21c:	ec 01       	movw	r28, r24
	dtostrf(result, 3, 2, buffer); // convert float to string 
     21e:	b8 01       	movw	r22, r16
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	40 ea       	ldi	r20, 0xA0	; 160
     22e:	50 e4       	ldi	r21, 0x40	; 64
     230:	0e 94 9a 04 	call	0x934	; 0x934 <__mulsf3>
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e8       	ldi	r20, 0x80	; 128
     23a:	5a e3       	ldi	r21, 0x3A	; 58
     23c:	0e 94 9a 04 	call	0x934	; 0x934 <__mulsf3>
     240:	8e 01       	movw	r16, r28
     242:	22 e0       	ldi	r18, 0x02	; 2
     244:	43 e0       	ldi	r20, 0x03	; 3
     246:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <dtostrf>

	ADCSRA |= (1<<ADIF);		// reset AD complete flag for next conversion. 
     24a:	ea e7       	ldi	r30, 0x7A	; 122
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	80 61       	ori	r24, 0x10	; 16
     252:	80 83       	st	Z, r24
	
	return buffer; 
}
     254:	ce 01       	movw	r24, r28
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	08 95       	ret

00000260 <print_adc_value>:

void print_adc_value(char * buffer){
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	00 d0       	rcall	.+0      	; 0x26a <print_adc_value+0xa>
     26a:	00 d0       	rcall	.+0      	; 0x26c <print_adc_value+0xc>
     26c:	1f 92       	push	r1
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	8c 01       	movw	r16, r24
	char header[] = "V = ";
     274:	85 e0       	ldi	r24, 0x05	; 5
     276:	e8 e0       	ldi	r30, 0x08	; 8
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	de 01       	movw	r26, r28
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	01 90       	ld	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	8a 95       	dec	r24
     284:	e1 f7       	brne	.-8      	; 0x27e <print_adc_value+0x1e>
	uart_send_string(header);
     286:	ce 01       	movw	r24, r28
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	0e 94 a3 02 	call	0x546	; 0x546 <uart_send_string>
	uart_send_string(buffer);
     28e:	c8 01       	movw	r24, r16
     290:	0e 94 a3 02 	call	0x546	; 0x546 <uart_send_string>
	uart_send_byte('\n');
     294:	8a e0       	ldi	r24, 0x0A	; 10
     296:	0e 94 9a 02 	call	0x534	; 0x534 <uart_send_byte>
	free(buffer); 
     29a:	c8 01       	movw	r24, r16
     29c:	0e 94 32 06 	call	0xc64	; 0xc64 <free>
}
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	08 95       	ret

000002b4 <read_command>:
void read_command(char * command) {
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <read_command+0xe>
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	7c 01       	movw	r14, r24
	char delim[] = ",";
     2c8:	8c e2       	ldi	r24, 0x2C	; 44
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	9a 83       	std	Y+2, r25	; 0x02
     2ce:	89 83       	std	Y+1, r24	; 0x01
	char * token = strtok(command, delim);
     2d0:	be 01       	movw	r22, r28
     2d2:	6f 5f       	subi	r22, 0xFF	; 255
     2d4:	7f 4f       	sbci	r23, 0xFF	; 255
     2d6:	c7 01       	movw	r24, r14
     2d8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strtok>
     2dc:	8c 01       	movw	r16, r24
	if(strcmp(token, "G") == 0){
     2de:	6d e0       	ldi	r22, 0x0D	; 13
     2e0:	71 e0       	ldi	r23, 0x01	; 1
     2e2:	0e 94 c4 06 	call	0xd88	; 0xd88 <strcmp>
     2e6:	89 2b       	or	r24, r25
     2e8:	81 f4       	brne	.+32     	; 0x30a <read_command+0x56>
		token = strtok(NULL, delim);
     2ea:	be 01       	movw	r22, r28
     2ec:	6f 5f       	subi	r22, 0xFF	; 255
     2ee:	7f 4f       	sbci	r23, 0xFF	; 255
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strtok>
		print_adc_value(get_adc_value());
     2f8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <get_adc_value>
     2fc:	0e 94 30 01 	call	0x260	; 0x260 <print_adc_value>
		printf("G\n");
     300:	8d e0       	ldi	r24, 0x0D	; 13
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 f4 06 	call	0xde8	; 0xde8 <puts>
     308:	34 c0       	rjmp	.+104    	; 0x372 <read_command+0xbe>
		} else if(strcmp(token, "W") == 0) {
     30a:	6f e0       	ldi	r22, 0x0F	; 15
     30c:	71 e0       	ldi	r23, 0x01	; 1
     30e:	c8 01       	movw	r24, r16
     310:	0e 94 c4 06 	call	0xd88	; 0xd88 <strcmp>
     314:	89 2b       	or	r24, r25
     316:	b1 f4       	brne	.+44     	; 0x344 <read_command+0x90>
		uint8_t dac = atoi(strtok(NULL, delim));
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strtok>
		uint8_t freq = atoi(strtok(NULL, delim));
     326:	be 01       	movw	r22, r28
     328:	6f 5f       	subi	r22, 0xFF	; 255
     32a:	7f 4f       	sbci	r23, 0xFF	; 255
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strtok>
		uint8_t cycles = atoi(strtok(NULL, delim));
     334:	be 01       	movw	r22, r28
     336:	6f 5f       	subi	r22, 0xFF	; 255
     338:	7f 4f       	sbci	r23, 0xFF	; 255
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strtok>
     342:	17 c0       	rjmp	.+46     	; 0x372 <read_command+0xbe>
		gen_wave_form(dac, freq, cycles);
		
		} else if(strcmp(token, "S") == 0) {
     344:	61 e1       	ldi	r22, 0x11	; 17
     346:	71 e0       	ldi	r23, 0x01	; 1
     348:	c8 01       	movw	r24, r16
     34a:	0e 94 c4 06 	call	0xd88	; 0xd88 <strcmp>
     34e:	89 2b       	or	r24, r25
     350:	81 f4       	brne	.+32     	; 0x372 <read_command+0xbe>
			uint8_t dac = atoi(strtok(NULL, delim));
     352:	be 01       	movw	r22, r28
     354:	6f 5f       	subi	r22, 0xFF	; 255
     356:	7f 4f       	sbci	r23, 0xFF	; 255
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strtok>
			float voltage = atof(strtok(NULL, delim));
     360:	be 01       	movw	r22, r28
     362:	6f 5f       	subi	r22, 0xFF	; 255
     364:	7f 4f       	sbci	r23, 0xFF	; 255
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strtok>
     36e:	0e 94 bb 06 	call	0xd76	; 0xd76 <atof>
			set_dac_output(dac, voltage);
	}
	
	free(command);
     372:	c7 01       	movw	r24, r14
     374:	0e 94 32 06 	call	0xc64	; 0xc64 <free>
}
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	08 95       	ret

0000038a <main>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
	ADMUX = 0b00000000;   // clear ADMUX for ADC0 pin 
	ADMUX |= (1<<REFS0); // setup internal reference voltage of 1.1V
}

int main(void) {
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	2a 97       	sbiw	r28, 0x0a	; 10
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
	char str[] = "Started!";
     39e:	89 e0       	ldi	r24, 0x09	; 9
     3a0:	e3 e1       	ldi	r30, 0x13	; 19
     3a2:	f1 e0       	ldi	r31, 0x01	; 1
     3a4:	de 01       	movw	r26, r28
     3a6:	11 96       	adiw	r26, 0x01	; 1
     3a8:	01 90       	ld	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	8a 95       	dec	r24
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0x1e>
	uint8_t voltage = 0;
	uint32_t speed = 100000;
	uint32_t baud = 9600; 	 
	char * adc; 
	uint8_t err = 0; 
	setup();
     3b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setup>
	twi_init(speed);
     3b4:	60 ea       	ldi	r22, 0xA0	; 160
     3b6:	76 e8       	ldi	r23, 0x86	; 134
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 43 04 	call	0x886	; 0x886 <twi_init>
	uart_init(baud);
     3c0:	60 e8       	ldi	r22, 0x80	; 128
     3c2:	75 e2       	ldi	r23, 0x25	; 37
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 5f 02 	call	0x4be	; 0x4be <uart_init>

	voltage = 100;
	uint8_t data[1] = {voltage};
     3cc:	84 e6       	ldi	r24, 0x64	; 100
     3ce:	8a 87       	std	Y+10, r24	; 0x0a
	sei();
     3d0:	78 94       	sei
	adc = get_adc_value();  // initalize adc for faster computations. 
     3d2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <get_adc_value>
	
	uart_send_string(str);
     3d6:	ce 01       	movw	r24, r28
     3d8:	01 96       	adiw	r24, 0x01	; 1
     3da:	0e 94 a3 02 	call	0x546	; 0x546 <uart_send_string>
	uart_send_byte('\n');	
     3de:	8a e0       	ldi	r24, 0x0A	; 10
     3e0:	0e 94 9a 02 	call	0x534	; 0x534 <uart_send_byte>
	err = twi_wire(MAX518, DAC0, data, sizeof(data));
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	ae 01       	movw	r20, r28
     3ea:	46 5f       	subi	r20, 0xF6	; 246
     3ec:	5f 4f       	sbci	r21, 0xFF	; 255
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	80 e4       	ldi	r24, 0x40	; 64
     3f2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <twi_wire>
	adc = get_adc_value();
     3f6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <get_adc_value>
	print_adc_value(adc);
     3fa:	0e 94 30 01 	call	0x260	; 0x260 <print_adc_value>
	
	while (1) {	
		if(uart_string_complete()){
     3fe:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <uart_string_complete>
     402:	88 23       	and	r24, r24
     404:	e1 f3       	breq	.-8      	; 0x3fe <main+0x74>
			read_command(uart_get_command());
     406:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <uart_get_command>
     40a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <read_command>
     40e:	f7 cf       	rjmp	.-18     	; 0x3fe <main+0x74>

00000410 <set_dac_output>:
	}
	
	free(command);
}

void set_dac_output(uint8_t dac, float voltage){
     410:	08 95       	ret

00000412 <gen_wave_form>:
	
}

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
     412:	08 95       	ret

00000414 <__vector_18>:

volatile static uint8_t uart_tx_busy = 1;
volatile static uint8_t uart_fetch_complete = 0;		// when the buffer has reached a '\n' char flag set to 1. once the string has been read from flag set to 0. 
UARTBuffer uart_buffer; 

ISR(USART_RX_vect){
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	2f 93       	push	r18
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	af 93       	push	r26
     426:	bf 93       	push	r27
     428:	ef 93       	push	r30
     42a:	ff 93       	push	r31
	if (UDR0 == '\n' || UDR0 == '\r') { // if a newline or carriage return is received
     42c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     430:	8a 30       	cpi	r24, 0x0A	; 10
     432:	21 f0       	breq	.+8      	; 0x43c <__vector_18+0x28>
     434:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     438:	8d 30       	cpi	r24, 0x0D	; 13
     43a:	21 f4       	brne	.+8      	; 0x444 <__vector_18+0x30>
		uart_fetch_complete = 1;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
     442:	14 c0       	rjmp	.+40     	; 0x46c <__vector_18+0x58>
	} else {
		uart_buffer.buffer[uart_buffer.head] = UDR0;			 // read in the UDR0 register
     444:	e1 ea       	ldi	r30, 0xA1	; 161
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	80 81       	ld	r24, Z
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     450:	dc 01       	movw	r26, r24
     452:	a1 5e       	subi	r26, 0xE1	; 225
     454:	be 4f       	sbci	r27, 0xFE	; 254
     456:	2c 93       	st	X, r18
		uart_buffer.head++;
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	91 83       	std	Z+1, r25	; 0x01
     45c:	80 83       	st	Z, r24
		uart_buffer.size++;
     45e:	ef e9       	ldi	r30, 0x9F	; 159
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	80 81       	ld	r24, Z
     464:	91 81       	ldd	r25, Z+1	; 0x01
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	91 83       	std	Z+1, r25	; 0x01
     46a:	80 83       	st	Z, r24
	}
	
	if (uart_buffer.head >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
     46c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <uart_buffer+0x82>
     470:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <uart_buffer+0x83>
     474:	80 38       	cpi	r24, 0x80	; 128
     476:	91 05       	cpc	r25, r1
     478:	20 f0       	brcs	.+8      	; 0x482 <__vector_18+0x6e>
		uart_buffer.head = 0;
     47a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <uart_buffer+0x83>
     47e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <uart_buffer+0x82>
	}
	
}
     482:	ff 91       	pop	r31
     484:	ef 91       	pop	r30
     486:	bf 91       	pop	r27
     488:	af 91       	pop	r26
     48a:	9f 91       	pop	r25
     48c:	8f 91       	pop	r24
     48e:	2f 91       	pop	r18
     490:	0f 90       	pop	r0
     492:	0f be       	out	0x3f, r0	; 63
     494:	0f 90       	pop	r0
     496:	1f 90       	pop	r1
     498:	18 95       	reti

0000049a <__vector_20>:

ISR(USART_TX_vect){
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	8f 93       	push	r24
	uart_tx_busy = 1;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     4ac:	8f 91       	pop	r24
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <uart_string_complete>:

uint8_t uart_string_complete(){
	return uart_fetch_complete;
     4b8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
}
     4bc:	08 95       	ret

000004be <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	aa 1f       	adc	r26, r26
     4c8:	bb 1f       	adc	r27, r27
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	aa 1f       	adc	r26, r26
     4d0:	bb 1f       	adc	r27, r27
     4d2:	9c 01       	movw	r18, r24
     4d4:	ad 01       	movw	r20, r26
     4d6:	22 0f       	add	r18, r18
     4d8:	33 1f       	adc	r19, r19
     4da:	44 1f       	adc	r20, r20
     4dc:	55 1f       	adc	r21, r21
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	44 1f       	adc	r20, r20
     4e4:	55 1f       	adc	r21, r21
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	74 e2       	ldi	r23, 0x24	; 36
     4ea:	84 ef       	ldi	r24, 0xF4	; 244
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 58 05 	call	0xab0	; 0xab0 <__udivmodsi4>
     4f2:	ba 01       	movw	r22, r20
     4f4:	a9 01       	movw	r20, r18
     4f6:	41 50       	subi	r20, 0x01	; 1
     4f8:	51 09       	sbc	r21, r1
     4fa:	61 09       	sbc	r22, r1
     4fc:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
     4fe:	db 01       	movw	r26, r22
     500:	ca 01       	movw	r24, r20
     502:	88 27       	eor	r24, r24
     504:	9f 70       	andi	r25, 0x0F	; 15
     506:	aa 27       	eor	r26, r26
     508:	bb 27       	eor	r27, r27
     50a:	89 2f       	mov	r24, r25
     50c:	9a 2f       	mov	r25, r26
     50e:	ab 2f       	mov	r26, r27
     510:	bb 27       	eor	r27, r27
     512:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
     516:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
     51a:	e1 ec       	ldi	r30, 0xC1	; 193
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	88 6d       	ori	r24, 0xD8	; 216
     522:	80 83       	st	Z, r24
	
	/* Initialize Objects */
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};		
     524:	ef e1       	ldi	r30, 0x1F	; 31
     526:	f1 e0       	ldi	r31, 0x01	; 1
     528:	86 e8       	ldi	r24, 0x86	; 134
     52a:	df 01       	movw	r26, r30
     52c:	1d 92       	st	X+, r1
     52e:	8a 95       	dec	r24
     530:	e9 f7       	brne	.-6      	; 0x52c <uart_init+0x6e>
     532:	08 95       	ret

00000534 <uart_send_byte>:
}


void uart_send_byte(char data){
	while(uart_tx_busy == 0); // while UART is not transmitting
     534:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     538:	99 23       	and	r25, r25
     53a:	e1 f3       	breq	.-8      	; 0x534 <uart_send_byte>
	
	uart_tx_busy = 0; 
     53c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = data;				// load byte passed into the function to the uart buffer
     540:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     544:	08 95       	ret

00000546 <uart_send_string>:
}

void uart_send_string(char *arr) {
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
     54c:	89 91       	ld	r24, Y+
     54e:	0e 94 9a 02 	call	0x534	; 0x534 <uart_send_byte>
		i++;
	} while(arr[i] != '\0');
     552:	88 81       	ld	r24, Y
     554:	81 11       	cpse	r24, r1
     556:	fa cf       	rjmp	.-12     	; 0x54c <uart_send_string+0x6>

}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <uart_get_buffer_size>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
     55e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <uart_buffer+0x80>
     562:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <uart_buffer+0x81>
     566:	08 95       	ret

00000568 <uart_read_buffer>:
	command[i] = '\0';
	return command; 
}

uint8_t uart_read_buffer(void){
	uint8_t data = uart_buffer.buffer[uart_buffer.tail];		// pull the data out of the buffer at the tail.
     568:	e3 ea       	ldi	r30, 0xA3	; 163
     56a:	f1 e0       	ldi	r31, 0x01	; 1
     56c:	20 81       	ld	r18, Z
     56e:	31 81       	ldd	r19, Z+1	; 0x01
     570:	d9 01       	movw	r26, r18
     572:	a1 5e       	subi	r26, 0xE1	; 225
     574:	be 4f       	sbci	r27, 0xFE	; 254
     576:	8c 91       	ld	r24, X
	uart_buffer.tail++;								// increment the position of the tail
     578:	2f 5f       	subi	r18, 0xFF	; 255
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	31 83       	std	Z+1, r19	; 0x01
     57e:	20 83       	st	Z, r18
	uart_buffer.size--; 							// decrement the size of the queue.
     580:	ef e9       	ldi	r30, 0x9F	; 159
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	40 81       	ld	r20, Z
     586:	51 81       	ldd	r21, Z+1	; 0x01
     588:	41 50       	subi	r20, 0x01	; 1
     58a:	51 09       	sbc	r21, r1
     58c:	51 83       	std	Z+1, r21	; 0x01
     58e:	40 83       	st	Z, r20

	if(uart_buffer.tail >= MAX_BUFFER_SIZE){		// reading has gone past the buffers size wrap the tail to the start.
     590:	20 38       	cpi	r18, 0x80	; 128
     592:	31 05       	cpc	r19, r1
     594:	20 f0       	brcs	.+8      	; 0x59e <uart_read_buffer+0x36>
		uart_buffer.tail = 0;
     596:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <uart_buffer+0x85>
     59a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <uart_buffer+0x84>
	}
	
	return data;
     59e:	08 95       	ret

000005a0 <uart_get_command>:
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
char * uart_get_command(void) {
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
	uart_fetch_complete = 0; 
     5ae:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
	} while(arr[i] != '\0');

}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     5b2:	00 91 9f 01 	lds	r16, 0x019F	; 0x80019f <uart_buffer+0x80>
     5b6:	10 91 a0 01 	lds	r17, 0x01A0	; 0x8001a0 <uart_buffer+0x81>
}
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
     5ba:	c8 01       	movw	r24, r16
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	0e 94 9a 05 	call	0xb34	; 0xb34 <malloc>
     5c2:	7c 01       	movw	r14, r24
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     5c4:	01 2b       	or	r16, r17
     5c6:	a9 f0       	breq	.+42     	; 0x5f2 <uart_get_command+0x52>
     5c8:	c0 e0       	ldi	r28, 0x00	; 0
	} while(arr[i] != '\0');

}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     5ca:	0f 2e       	mov	r0, r31
     5cc:	ff e9       	ldi	r31, 0x9F	; 159
     5ce:	cf 2e       	mov	r12, r31
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	df 2e       	mov	r13, r31
     5d4:	f0 2d       	mov	r31, r0
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
     5d6:	87 01       	movw	r16, r14
     5d8:	0c 0f       	add	r16, r28
     5da:	11 1d       	adc	r17, r1
     5dc:	0e 94 b4 02 	call	0x568	; 0x568 <uart_read_buffer>
     5e0:	f8 01       	movw	r30, r16
     5e2:	80 83       	st	Z, r24
		++i; 
     5e4:	cf 5f       	subi	r28, 0xFF	; 255
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     5e6:	f6 01       	movw	r30, r12
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	89 2b       	or	r24, r25
     5ee:	99 f7       	brne	.-26     	; 0x5d6 <uart_get_command+0x36>
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <uart_get_command+0x54>
}
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
	uint8_t i = 0;
     5f2:	c0 e0       	ldi	r28, 0x00	; 0
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
		++i; 
	}
	command[i] = '\0';
     5f4:	f7 01       	movw	r30, r14
     5f6:	ec 0f       	add	r30, r28
     5f8:	f1 1d       	adc	r31, r1
     5fa:	10 82       	st	Z, r1
	return command; 
}
     5fc:	c7 01       	movw	r24, r14
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	08 95       	ret

0000060e <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     60e:	85 e8       	ldi	r24, 0x85	; 133
     610:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(status != TWIT_DATA_ACK){
     614:	80 e4       	ldi	r24, 0x40	; 64
     616:	96 e0       	ldi	r25, 0x06	; 6
     618:	02 c0       	rjmp	.+4      	; 0x61e <twi_data_write_ack+0x10>
     61a:	01 97       	sbiw	r24, 0x01	; 1
		i++;
		if(i >= TWI_TIMEOUT){
     61c:	31 f0       	breq	.+12     	; 0x62a <twi_data_write_ack+0x1c>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     61e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <status>
     622:	28 32       	cpi	r18, 0x28	; 40
     624:	d1 f7       	brne	.-12     	; 0x61a <twi_data_write_ack+0xc>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	08 95       	ret
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     62a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     62c:	08 95       	ret

0000062e <__vector_24>:
 */ 
#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI_vect){
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	8f 93       	push	r24
	status = (TWSR & 0xF8);
     63a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     63e:	88 7f       	andi	r24, 0xF8	; 248
     640:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
}
     644:	8f 91       	pop	r24
     646:	0f 90       	pop	r0
     648:	0f be       	out	0x3f, r0	; 63
     64a:	0f 90       	pop	r0
     64c:	1f 90       	pop	r1
     64e:	18 95       	reti

00000650 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     65e:	95 ea       	ldi	r25, 0xA5	; 165
     660:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     664:	e0 e4       	ldi	r30, 0x40	; 64
     666:	f6 e0       	ldi	r31, 0x06	; 6
     668:	03 c0       	rjmp	.+6      	; 0x670 <twi_read+0x20>
     66a:	31 97       	sbiw	r30, 0x01	; 1
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
     66c:	09 f4       	brne	.+2      	; 0x670 <twi_read+0x20>
     66e:	54 c0       	rjmp	.+168    	; 0x718 <twi_read+0xc8>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     670:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     674:	98 30       	cpi	r25, 0x08	; 8
     676:	c9 f7       	brne	.-14     	; 0x66a <twi_read+0x1a>
     678:	45 c0       	rjmp	.+138    	; 0x704 <twi_read+0xb4>
     67a:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     67c:	09 f4       	brne	.+2      	; 0x680 <twi_read+0x30>
     67e:	51 c0       	rjmp	.+162    	; 0x722 <twi_read+0xd2>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     680:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     684:	98 31       	cpi	r25, 0x18	; 24
     686:	c9 f7       	brne	.-14     	; 0x67a <twi_read+0x2a>
     688:	51 c0       	rjmp	.+162    	; 0x72c <twi_read+0xdc>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     68a:	95 e9       	ldi	r25, 0x95	; 149
     68c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     690:	91 c0       	rjmp	.+290    	; 0x7b4 <twi_read+0x164>
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     692:	85 ea       	ldi	r24, 0xA5	; 165
     694:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     698:	60 e4       	ldi	r22, 0x40	; 64
     69a:	76 e0       	ldi	r23, 0x06	; 6
     69c:	04 c0       	rjmp	.+8      	; 0x6a6 <twi_read+0x56>
     69e:	61 50       	subi	r22, 0x01	; 1
     6a0:	71 09       	sbc	r23, r1
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <twi_read+0x56>
     6a4:	4e c0       	rjmp	.+156    	; 0x742 <twi_read+0xf2>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     6a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     6aa:	90 31       	cpi	r25, 0x10	; 16
     6ac:	c1 f7       	brne	.-16     	; 0x69e <twi_read+0x4e>
     6ae:	4e c0       	rjmp	.+156    	; 0x74c <twi_read+0xfc>
     6b0:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <twi_read+0x66>
     6b4:	5d c0       	rjmp	.+186    	; 0x770 <twi_read+0x120>

static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     6b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <status>
     6ba:	30 34       	cpi	r19, 0x40	; 64
     6bc:	c9 f7       	brne	.-14     	; 0x6b0 <twi_read+0x60>
     6be:	51 c0       	rjmp	.+162    	; 0x762 <twi_read+0x112>
     6c0:	f6 01       	movw	r30, r12
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     6c6:	ac eb       	ldi	r26, 0xBC	; 188
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	35 ec       	ldi	r19, 0xC5	; 197
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR;
     6cc:	cb eb       	ldi	r28, 0xBB	; 187
     6ce:	d0 e0       	ldi	r29, 0x00	; 0


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     6d0:	3c 93       	st	X, r19
     6d2:	80 e4       	ldi	r24, 0x40	; 64
     6d4:	96 e0       	ldi	r25, 0x06	; 6
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <twi_read+0x8e>
     6d8:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
     6da:	09 f4       	brne	.+2      	; 0x6de <twi_read+0x8e>
     6dc:	4e c0       	rjmp	.+156    	; 0x77a <twi_read+0x12a>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     6de:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <status>
     6e2:	20 35       	cpi	r18, 0x50	; 80
     6e4:	c9 f7       	brne	.-14     	; 0x6d8 <twi_read+0x88>
     6e6:	4e c0       	rjmp	.+156    	; 0x784 <twi_read+0x134>
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     6e8:	85 e8       	ldi	r24, 0x85	; 133
     6ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6ee:	80 e4       	ldi	r24, 0x40	; 64
     6f0:	96 e0       	ldi	r25, 0x06	; 6
     6f2:	03 c0       	rjmp	.+6      	; 0x6fa <twi_read+0xaa>
     6f4:	01 97       	sbiw	r24, 0x01	; 1
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
     6f6:	09 f4       	brne	.+2      	; 0x6fa <twi_read+0xaa>
     6f8:	4e c0       	rjmp	.+156    	; 0x796 <twi_read+0x146>
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     6fa:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <status>
     6fe:	28 35       	cpi	r18, 0x58	; 88
     700:	c9 f7       	brne	.-14     	; 0x6f4 <twi_read+0xa4>
     702:	4e c0       	rjmp	.+156    	; 0x7a0 <twi_read+0x150>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR = (addr << 1) | 0;
     704:	98 2f       	mov	r25, r24
     706:	99 0f       	add	r25, r25
     708:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     70c:	95 e8       	ldi	r25, 0x85	; 133
     70e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     712:	e0 e4       	ldi	r30, 0x40	; 64
     714:	f6 e0       	ldi	r31, 0x06	; 6
     716:	b4 cf       	rjmp	.-152    	; 0x680 <twi_read+0x30>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     718:	85 e9       	ldi	r24, 0x95	; 149
     71a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	49 c0       	rjmp	.+146    	; 0x7b4 <twi_read+0x164>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     722:	85 e9       	ldi	r24, 0x95	; 149
     724:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	44 c0       	rjmp	.+136    	; 0x7b4 <twi_read+0x164>
     72c:	89 01       	movw	r16, r18
     72e:	6a 01       	movw	r12, r20
     730:	f8 2e       	mov	r15, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR = reg;
     732:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	err = twi_data_write_ack();
     736:	0e 94 07 03 	call	0x60e	; 0x60e <twi_data_write_ack>
	if(err != TWI_OK){
     73a:	88 23       	and	r24, r24
     73c:	09 f4       	brne	.+2      	; 0x740 <twi_read+0xf0>
     73e:	a9 cf       	rjmp	.-174    	; 0x692 <twi_read+0x42>
     740:	a4 cf       	rjmp	.-184    	; 0x68a <twi_read+0x3a>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     742:	85 e9       	ldi	r24, 0x95	; 149
     744:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	34 c0       	rjmp	.+104    	; 0x7b4 <twi_read+0x164>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR = (addr << 1) | 1;
     74c:	8f 2d       	mov	r24, r15
     74e:	88 0f       	add	r24, r24
     750:	81 60       	ori	r24, 0x01	; 1
     752:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     756:	85 e8       	ldi	r24, 0x85	; 133
     758:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     75c:	80 e4       	ldi	r24, 0x40	; 64
     75e:	96 e0       	ldi	r25, 0x06	; 6
     760:	aa cf       	rjmp	.-172    	; 0x6b6 <twi_read+0x66>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     762:	01 50       	subi	r16, 0x01	; 1
     764:	11 09       	sbc	r17, r1
     766:	09 f0       	breq	.+2      	; 0x76a <twi_read+0x11a>
     768:	ab cf       	rjmp	.-170    	; 0x6c0 <twi_read+0x70>
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	bc cf       	rjmp	.-136    	; 0x6e8 <twi_read+0x98>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     770:	85 e9       	ldi	r24, 0x95	; 149
     772:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	1d c0       	rjmp	.+58     	; 0x7b4 <twi_read+0x164>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     77a:	85 e9       	ldi	r24, 0x95	; 149
     77c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	18 c0       	rjmp	.+48     	; 0x7b4 <twi_read+0x164>
		err = twi_data_read_ack(1);
		if(err != TWI_OK){
			twi_stop();
			return err;
		}
		data[i] = TWDR;
     784:	88 81       	ld	r24, Y
     786:	81 93       	st	Z+, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     788:	4f 5f       	subi	r20, 0xFF	; 255
     78a:	5f 4f       	sbci	r21, 0xFF	; 255
     78c:	40 17       	cp	r20, r16
     78e:	51 07       	cpc	r21, r17
     790:	08 f4       	brcc	.+2      	; 0x794 <twi_read+0x144>
     792:	9e cf       	rjmp	.-196    	; 0x6d0 <twi_read+0x80>
     794:	a9 cf       	rjmp	.-174    	; 0x6e8 <twi_read+0x98>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     796:	85 e9       	ldi	r24, 0x95	; 149
     798:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	0a c0       	rjmp	.+20     	; 0x7b4 <twi_read+0x164>
	err = twi_data_read_ack(0);
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	data[i] = TWDR;
     7a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7a4:	e6 01       	movw	r28, r12
     7a6:	c4 0f       	add	r28, r20
     7a8:	d5 1f       	adc	r29, r21
     7aa:	88 83       	st	Y, r24
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     7ac:	85 e9       	ldi	r24, 0x95	; 149
     7ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	data[i] = TWDR;
	
	twi_stop();
	
	return err;
     7b2:	80 e0       	ldi	r24, 0x00	; 0
}
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	08 95       	ret

000007c4 <twi_wire>:


uint8_t twi_wire(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	89 01       	movw	r16, r18
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     7d2:	95 ea       	ldi	r25, 0xA5	; 165
     7d4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7d8:	e0 e4       	ldi	r30, 0x40	; 64
     7da:	f6 e0       	ldi	r31, 0x06	; 6
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <twi_wire+0x1e>
     7de:	31 97       	sbiw	r30, 0x01	; 1
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
     7e0:	c1 f1       	breq	.+112    	; 0x852 <__DATA_REGION_LENGTH__+0x52>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     7e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status>
     7e6:	98 30       	cpi	r25, 0x08	; 8
     7e8:	d1 f7       	brne	.-12     	; 0x7de <twi_wire+0x1a>
     7ea:	2a c0       	rjmp	.+84     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     7ec:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
     7ee:	b1 f1       	breq	.+108    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     7f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <status>
     7f4:	38 31       	cpi	r19, 0x18	; 24
     7f6:	d1 f7       	brne	.-12     	; 0x7ec <twi_wire+0x28>
     7f8:	36 c0       	rjmp	.+108    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     7fa:	e1 14       	cp	r14, r1
     7fc:	f1 04       	cpc	r15, r1
     7fe:	29 f4       	brne	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     800:	1a c0       	rjmp	.+52     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     802:	95 e9       	ldi	r25, 0x95	; 149
     804:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     808:	37 c0       	rjmp	.+110    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     80a:	e8 01       	movw	r28, r16
     80c:	0e 0d       	add	r16, r14
     80e:	1f 1d       	adc	r17, r15
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
		TWDR = data[i];
     810:	0f 2e       	mov	r0, r31
     812:	fb eb       	ldi	r31, 0xBB	; 187
     814:	ef 2e       	mov	r14, r31
     816:	f1 2c       	mov	r15, r1
     818:	f0 2d       	mov	r31, r0
     81a:	89 91       	ld	r24, Y+
     81c:	f7 01       	movw	r30, r14
     81e:	80 83       	st	Z, r24
		err = twi_data_write_ack();
     820:	0e 94 07 03 	call	0x60e	; 0x60e <twi_data_write_ack>
		if(err != TWI_OK){
     824:	88 23       	and	r24, r24
     826:	21 f0       	breq	.+8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     828:	95 e9       	ldi	r25, 0x95	; 149
     82a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     82e:	24 c0       	rjmp	.+72     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     830:	c0 17       	cp	r28, r16
     832:	d1 07       	cpc	r29, r17
     834:	91 f7       	brne	.-28     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     836:	85 e9       	ldi	r24, 0x95	; 149
     838:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	1c c0       	rjmp	.+56     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
	err = twi_start();
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	TWDR = (addr << 1) | 0;
     840:	88 0f       	add	r24, r24
     842:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     846:	85 e8       	ldi	r24, 0x85	; 133
     848:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     84c:	80 e4       	ldi	r24, 0x40	; 64
     84e:	96 e0       	ldi	r25, 0x06	; 6
     850:	cf cf       	rjmp	.-98     	; 0x7f0 <twi_wire+0x2c>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     852:	85 e9       	ldi	r24, 0x95	; 149
     854:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	0e c0       	rjmp	.+28     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
	return TWI_OK;
}

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     85c:	85 e9       	ldi	r24, 0x95	; 149
     85e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	09 c0       	rjmp	.+18     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     866:	78 01       	movw	r14, r16
     868:	8a 01       	movw	r16, r20
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	TWDR = reg;
     86a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	err = twi_data_write_ack();
     86e:	0e 94 07 03 	call	0x60e	; 0x60e <twi_data_write_ack>
	if(err != TWI_OK){
     872:	88 23       	and	r24, r24
     874:	11 f2       	breq	.-124    	; 0x7fa <twi_wire+0x36>
     876:	c5 cf       	rjmp	.-118    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	
	
	twi_stop();
	
	return err;
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	08 95       	ret

00000886 <twi_init>:





void twi_init(uint32_t speed){
     886:	9b 01       	movw	r18, r22
     888:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
	TWBR = gen_t & 0xFF;
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	74 e2       	ldi	r23, 0x24	; 36
     88e:	84 ef       	ldi	r24, 0xF4	; 244
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 58 05 	call	0xab0	; 0xab0 <__udivmodsi4>
     896:	da 01       	movw	r26, r20
     898:	c9 01       	movw	r24, r18
     89a:	40 97       	sbiw	r24, 0x10	; 16
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	b6 95       	lsr	r27
     8a2:	a7 95       	ror	r26
     8a4:	97 95       	ror	r25
     8a6:	87 95       	ror	r24
     8a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWEN) | (1 << TWIE);
     8ac:	85 e0       	ldi	r24, 0x05	; 5
     8ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	PORTC |= (1 << PORTC5 | 1 << PORTC4);
     8b2:	88 b1       	in	r24, 0x08	; 8
     8b4:	80 63       	ori	r24, 0x30	; 48
     8b6:	88 b9       	out	0x08, r24	; 8
     8b8:	08 95       	ret

000008ba <__floatunsisf>:
     8ba:	e8 94       	clt
     8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <__floatsisf+0x12>

000008be <__floatsisf>:
     8be:	97 fb       	bst	r25, 7
     8c0:	3e f4       	brtc	.+14     	; 0x8d0 <__floatsisf+0x12>
     8c2:	90 95       	com	r25
     8c4:	80 95       	com	r24
     8c6:	70 95       	com	r23
     8c8:	61 95       	neg	r22
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	8f 4f       	sbci	r24, 0xFF	; 255
     8ce:	9f 4f       	sbci	r25, 0xFF	; 255
     8d0:	99 23       	and	r25, r25
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x40>
     8d4:	f9 2f       	mov	r31, r25
     8d6:	96 e9       	ldi	r25, 0x96	; 150
     8d8:	bb 27       	eor	r27, r27
     8da:	93 95       	inc	r25
     8dc:	f6 95       	lsr	r31
     8de:	87 95       	ror	r24
     8e0:	77 95       	ror	r23
     8e2:	67 95       	ror	r22
     8e4:	b7 95       	ror	r27
     8e6:	f1 11       	cpse	r31, r1
     8e8:	f8 cf       	rjmp	.-16     	; 0x8da <__floatsisf+0x1c>
     8ea:	fa f4       	brpl	.+62     	; 0x92a <__stack+0x2b>
     8ec:	bb 0f       	add	r27, r27
     8ee:	11 f4       	brne	.+4      	; 0x8f4 <__floatsisf+0x36>
     8f0:	60 ff       	sbrs	r22, 0
     8f2:	1b c0       	rjmp	.+54     	; 0x92a <__stack+0x2b>
     8f4:	6f 5f       	subi	r22, 0xFF	; 255
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	8f 4f       	sbci	r24, 0xFF	; 255
     8fa:	9f 4f       	sbci	r25, 0xFF	; 255
     8fc:	16 c0       	rjmp	.+44     	; 0x92a <__stack+0x2b>
     8fe:	88 23       	and	r24, r24
     900:	11 f0       	breq	.+4      	; 0x906 <__stack+0x7>
     902:	96 e9       	ldi	r25, 0x96	; 150
     904:	11 c0       	rjmp	.+34     	; 0x928 <__stack+0x29>
     906:	77 23       	and	r23, r23
     908:	21 f0       	breq	.+8      	; 0x912 <__stack+0x13>
     90a:	9e e8       	ldi	r25, 0x8E	; 142
     90c:	87 2f       	mov	r24, r23
     90e:	76 2f       	mov	r23, r22
     910:	05 c0       	rjmp	.+10     	; 0x91c <__stack+0x1d>
     912:	66 23       	and	r22, r22
     914:	71 f0       	breq	.+28     	; 0x932 <__stack+0x33>
     916:	96 e8       	ldi	r25, 0x86	; 134
     918:	86 2f       	mov	r24, r22
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	2a f0       	brmi	.+10     	; 0x92a <__stack+0x2b>
     920:	9a 95       	dec	r25
     922:	66 0f       	add	r22, r22
     924:	77 1f       	adc	r23, r23
     926:	88 1f       	adc	r24, r24
     928:	da f7       	brpl	.-10     	; 0x920 <__stack+0x21>
     92a:	88 0f       	add	r24, r24
     92c:	96 95       	lsr	r25
     92e:	87 95       	ror	r24
     930:	97 f9       	bld	r25, 7
     932:	08 95       	ret

00000934 <__mulsf3>:
     934:	0e 94 ad 04 	call	0x95a	; 0x95a <__mulsf3x>
     938:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_round>
     93c:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_pscA>
     940:	38 f0       	brcs	.+14     	; 0x950 <__mulsf3+0x1c>
     942:	0e 94 17 05 	call	0xa2e	; 0xa2e <__fp_pscB>
     946:	20 f0       	brcs	.+8      	; 0x950 <__mulsf3+0x1c>
     948:	95 23       	and	r25, r21
     94a:	11 f0       	breq	.+4      	; 0x950 <__mulsf3+0x1c>
     94c:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_inf>
     950:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_nan>
     954:	11 24       	eor	r1, r1
     956:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__fp_szero>

0000095a <__mulsf3x>:
     95a:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_split3>
     95e:	70 f3       	brcs	.-36     	; 0x93c <__mulsf3+0x8>

00000960 <__mulsf3_pse>:
     960:	95 9f       	mul	r25, r21
     962:	c1 f3       	breq	.-16     	; 0x954 <__mulsf3+0x20>
     964:	95 0f       	add	r25, r21
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	55 1f       	adc	r21, r21
     96a:	62 9f       	mul	r22, r18
     96c:	f0 01       	movw	r30, r0
     96e:	72 9f       	mul	r23, r18
     970:	bb 27       	eor	r27, r27
     972:	f0 0d       	add	r31, r0
     974:	b1 1d       	adc	r27, r1
     976:	63 9f       	mul	r22, r19
     978:	aa 27       	eor	r26, r26
     97a:	f0 0d       	add	r31, r0
     97c:	b1 1d       	adc	r27, r1
     97e:	aa 1f       	adc	r26, r26
     980:	64 9f       	mul	r22, r20
     982:	66 27       	eor	r22, r22
     984:	b0 0d       	add	r27, r0
     986:	a1 1d       	adc	r26, r1
     988:	66 1f       	adc	r22, r22
     98a:	82 9f       	mul	r24, r18
     98c:	22 27       	eor	r18, r18
     98e:	b0 0d       	add	r27, r0
     990:	a1 1d       	adc	r26, r1
     992:	62 1f       	adc	r22, r18
     994:	73 9f       	mul	r23, r19
     996:	b0 0d       	add	r27, r0
     998:	a1 1d       	adc	r26, r1
     99a:	62 1f       	adc	r22, r18
     99c:	83 9f       	mul	r24, r19
     99e:	a0 0d       	add	r26, r0
     9a0:	61 1d       	adc	r22, r1
     9a2:	22 1f       	adc	r18, r18
     9a4:	74 9f       	mul	r23, r20
     9a6:	33 27       	eor	r19, r19
     9a8:	a0 0d       	add	r26, r0
     9aa:	61 1d       	adc	r22, r1
     9ac:	23 1f       	adc	r18, r19
     9ae:	84 9f       	mul	r24, r20
     9b0:	60 0d       	add	r22, r0
     9b2:	21 1d       	adc	r18, r1
     9b4:	82 2f       	mov	r24, r18
     9b6:	76 2f       	mov	r23, r22
     9b8:	6a 2f       	mov	r22, r26
     9ba:	11 24       	eor	r1, r1
     9bc:	9f 57       	subi	r25, 0x7F	; 127
     9be:	50 40       	sbci	r21, 0x00	; 0
     9c0:	9a f0       	brmi	.+38     	; 0x9e8 <__mulsf3_pse+0x88>
     9c2:	f1 f0       	breq	.+60     	; 0xa00 <__mulsf3_pse+0xa0>
     9c4:	88 23       	and	r24, r24
     9c6:	4a f0       	brmi	.+18     	; 0x9da <__mulsf3_pse+0x7a>
     9c8:	ee 0f       	add	r30, r30
     9ca:	ff 1f       	adc	r31, r31
     9cc:	bb 1f       	adc	r27, r27
     9ce:	66 1f       	adc	r22, r22
     9d0:	77 1f       	adc	r23, r23
     9d2:	88 1f       	adc	r24, r24
     9d4:	91 50       	subi	r25, 0x01	; 1
     9d6:	50 40       	sbci	r21, 0x00	; 0
     9d8:	a9 f7       	brne	.-22     	; 0x9c4 <__mulsf3_pse+0x64>
     9da:	9e 3f       	cpi	r25, 0xFE	; 254
     9dc:	51 05       	cpc	r21, r1
     9de:	80 f0       	brcs	.+32     	; 0xa00 <__mulsf3_pse+0xa0>
     9e0:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_inf>
     9e4:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__fp_szero>
     9e8:	5f 3f       	cpi	r21, 0xFF	; 255
     9ea:	e4 f3       	brlt	.-8      	; 0x9e4 <__mulsf3_pse+0x84>
     9ec:	98 3e       	cpi	r25, 0xE8	; 232
     9ee:	d4 f3       	brlt	.-12     	; 0x9e4 <__mulsf3_pse+0x84>
     9f0:	86 95       	lsr	r24
     9f2:	77 95       	ror	r23
     9f4:	67 95       	ror	r22
     9f6:	b7 95       	ror	r27
     9f8:	f7 95       	ror	r31
     9fa:	e7 95       	ror	r30
     9fc:	9f 5f       	subi	r25, 0xFF	; 255
     9fe:	c1 f7       	brne	.-16     	; 0x9f0 <__mulsf3_pse+0x90>
     a00:	fe 2b       	or	r31, r30
     a02:	88 0f       	add	r24, r24
     a04:	91 1d       	adc	r25, r1
     a06:	96 95       	lsr	r25
     a08:	87 95       	ror	r24
     a0a:	97 f9       	bld	r25, 7
     a0c:	08 95       	ret

00000a0e <__fp_inf>:
     a0e:	97 f9       	bld	r25, 7
     a10:	9f 67       	ori	r25, 0x7F	; 127
     a12:	80 e8       	ldi	r24, 0x80	; 128
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	08 95       	ret

00000a1a <__fp_nan>:
     a1a:	9f ef       	ldi	r25, 0xFF	; 255
     a1c:	80 ec       	ldi	r24, 0xC0	; 192
     a1e:	08 95       	ret

00000a20 <__fp_pscA>:
     a20:	00 24       	eor	r0, r0
     a22:	0a 94       	dec	r0
     a24:	16 16       	cp	r1, r22
     a26:	17 06       	cpc	r1, r23
     a28:	18 06       	cpc	r1, r24
     a2a:	09 06       	cpc	r0, r25
     a2c:	08 95       	ret

00000a2e <__fp_pscB>:
     a2e:	00 24       	eor	r0, r0
     a30:	0a 94       	dec	r0
     a32:	12 16       	cp	r1, r18
     a34:	13 06       	cpc	r1, r19
     a36:	14 06       	cpc	r1, r20
     a38:	05 06       	cpc	r0, r21
     a3a:	08 95       	ret

00000a3c <__fp_round>:
     a3c:	09 2e       	mov	r0, r25
     a3e:	03 94       	inc	r0
     a40:	00 0c       	add	r0, r0
     a42:	11 f4       	brne	.+4      	; 0xa48 <__fp_round+0xc>
     a44:	88 23       	and	r24, r24
     a46:	52 f0       	brmi	.+20     	; 0xa5c <__fp_round+0x20>
     a48:	bb 0f       	add	r27, r27
     a4a:	40 f4       	brcc	.+16     	; 0xa5c <__fp_round+0x20>
     a4c:	bf 2b       	or	r27, r31
     a4e:	11 f4       	brne	.+4      	; 0xa54 <__fp_round+0x18>
     a50:	60 ff       	sbrs	r22, 0
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__fp_round+0x20>
     a54:	6f 5f       	subi	r22, 0xFF	; 255
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	8f 4f       	sbci	r24, 0xFF	; 255
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	08 95       	ret

00000a5e <__fp_split3>:
     a5e:	57 fd       	sbrc	r21, 7
     a60:	90 58       	subi	r25, 0x80	; 128
     a62:	44 0f       	add	r20, r20
     a64:	55 1f       	adc	r21, r21
     a66:	59 f0       	breq	.+22     	; 0xa7e <__fp_splitA+0x10>
     a68:	5f 3f       	cpi	r21, 0xFF	; 255
     a6a:	71 f0       	breq	.+28     	; 0xa88 <__fp_splitA+0x1a>
     a6c:	47 95       	ror	r20

00000a6e <__fp_splitA>:
     a6e:	88 0f       	add	r24, r24
     a70:	97 fb       	bst	r25, 7
     a72:	99 1f       	adc	r25, r25
     a74:	61 f0       	breq	.+24     	; 0xa8e <__fp_splitA+0x20>
     a76:	9f 3f       	cpi	r25, 0xFF	; 255
     a78:	79 f0       	breq	.+30     	; 0xa98 <__fp_splitA+0x2a>
     a7a:	87 95       	ror	r24
     a7c:	08 95       	ret
     a7e:	12 16       	cp	r1, r18
     a80:	13 06       	cpc	r1, r19
     a82:	14 06       	cpc	r1, r20
     a84:	55 1f       	adc	r21, r21
     a86:	f2 cf       	rjmp	.-28     	; 0xa6c <__fp_split3+0xe>
     a88:	46 95       	lsr	r20
     a8a:	f1 df       	rcall	.-30     	; 0xa6e <__fp_splitA>
     a8c:	08 c0       	rjmp	.+16     	; 0xa9e <__fp_splitA+0x30>
     a8e:	16 16       	cp	r1, r22
     a90:	17 06       	cpc	r1, r23
     a92:	18 06       	cpc	r1, r24
     a94:	99 1f       	adc	r25, r25
     a96:	f1 cf       	rjmp	.-30     	; 0xa7a <__fp_splitA+0xc>
     a98:	86 95       	lsr	r24
     a9a:	71 05       	cpc	r23, r1
     a9c:	61 05       	cpc	r22, r1
     a9e:	08 94       	sec
     aa0:	08 95       	ret

00000aa2 <__fp_zero>:
     aa2:	e8 94       	clt

00000aa4 <__fp_szero>:
     aa4:	bb 27       	eor	r27, r27
     aa6:	66 27       	eor	r22, r22
     aa8:	77 27       	eor	r23, r23
     aaa:	cb 01       	movw	r24, r22
     aac:	97 f9       	bld	r25, 7
     aae:	08 95       	ret

00000ab0 <__udivmodsi4>:
     ab0:	a1 e2       	ldi	r26, 0x21	; 33
     ab2:	1a 2e       	mov	r1, r26
     ab4:	aa 1b       	sub	r26, r26
     ab6:	bb 1b       	sub	r27, r27
     ab8:	fd 01       	movw	r30, r26
     aba:	0d c0       	rjmp	.+26     	; 0xad6 <__udivmodsi4_ep>

00000abc <__udivmodsi4_loop>:
     abc:	aa 1f       	adc	r26, r26
     abe:	bb 1f       	adc	r27, r27
     ac0:	ee 1f       	adc	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	a2 17       	cp	r26, r18
     ac6:	b3 07       	cpc	r27, r19
     ac8:	e4 07       	cpc	r30, r20
     aca:	f5 07       	cpc	r31, r21
     acc:	20 f0       	brcs	.+8      	; 0xad6 <__udivmodsi4_ep>
     ace:	a2 1b       	sub	r26, r18
     ad0:	b3 0b       	sbc	r27, r19
     ad2:	e4 0b       	sbc	r30, r20
     ad4:	f5 0b       	sbc	r31, r21

00000ad6 <__udivmodsi4_ep>:
     ad6:	66 1f       	adc	r22, r22
     ad8:	77 1f       	adc	r23, r23
     ada:	88 1f       	adc	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	1a 94       	dec	r1
     ae0:	69 f7       	brne	.-38     	; 0xabc <__udivmodsi4_loop>
     ae2:	60 95       	com	r22
     ae4:	70 95       	com	r23
     ae6:	80 95       	com	r24
     ae8:	90 95       	com	r25
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	bd 01       	movw	r22, r26
     af0:	cf 01       	movw	r24, r30
     af2:	08 95       	ret

00000af4 <dtostrf>:
     af4:	ef 92       	push	r14
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	e8 01       	movw	r28, r16
     b00:	47 fd       	sbrc	r20, 7
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <dtostrf+0x14>
     b04:	34 e0       	ldi	r19, 0x04	; 4
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <dtostrf+0x16>
     b08:	34 e1       	ldi	r19, 0x14	; 20
     b0a:	04 2e       	mov	r0, r20
     b0c:	00 0c       	add	r0, r0
     b0e:	55 0b       	sbc	r21, r21
     b10:	57 ff       	sbrs	r21, 7
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <dtostrf+0x26>
     b14:	51 95       	neg	r21
     b16:	41 95       	neg	r20
     b18:	51 09       	sbc	r21, r1
     b1a:	e3 2e       	mov	r14, r19
     b1c:	02 2f       	mov	r16, r18
     b1e:	24 2f       	mov	r18, r20
     b20:	ae 01       	movw	r20, r28
     b22:	0e 94 24 07 	call	0xe48	; 0xe48 <dtoa_prf>
     b26:	ce 01       	movw	r24, r28
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ef 90       	pop	r14
     b32:	08 95       	ret

00000b34 <malloc>:
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	91 05       	cpc	r25, r1
     b40:	10 f4       	brcc	.+4      	; 0xb46 <malloc+0x12>
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <__flp>
     b4a:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <__flp+0x1>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	a0 e0       	ldi	r26, 0x00	; 0
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	30 97       	sbiw	r30, 0x00	; 0
     b58:	19 f1       	breq	.+70     	; 0xba0 <malloc+0x6c>
     b5a:	40 81       	ld	r20, Z
     b5c:	51 81       	ldd	r21, Z+1	; 0x01
     b5e:	02 81       	ldd	r16, Z+2	; 0x02
     b60:	13 81       	ldd	r17, Z+3	; 0x03
     b62:	48 17       	cp	r20, r24
     b64:	59 07       	cpc	r21, r25
     b66:	c8 f0       	brcs	.+50     	; 0xb9a <malloc+0x66>
     b68:	84 17       	cp	r24, r20
     b6a:	95 07       	cpc	r25, r21
     b6c:	69 f4       	brne	.+26     	; 0xb88 <malloc+0x54>
     b6e:	10 97       	sbiw	r26, 0x00	; 0
     b70:	31 f0       	breq	.+12     	; 0xb7e <malloc+0x4a>
     b72:	12 96       	adiw	r26, 0x02	; 2
     b74:	0c 93       	st	X, r16
     b76:	12 97       	sbiw	r26, 0x02	; 2
     b78:	13 96       	adiw	r26, 0x03	; 3
     b7a:	1c 93       	st	X, r17
     b7c:	27 c0       	rjmp	.+78     	; 0xbcc <malloc+0x98>
     b7e:	00 93 a7 01 	sts	0x01A7, r16	; 0x8001a7 <__flp>
     b82:	10 93 a8 01 	sts	0x01A8, r17	; 0x8001a8 <__flp+0x1>
     b86:	22 c0       	rjmp	.+68     	; 0xbcc <malloc+0x98>
     b88:	21 15       	cp	r18, r1
     b8a:	31 05       	cpc	r19, r1
     b8c:	19 f0       	breq	.+6      	; 0xb94 <malloc+0x60>
     b8e:	42 17       	cp	r20, r18
     b90:	53 07       	cpc	r21, r19
     b92:	18 f4       	brcc	.+6      	; 0xb9a <malloc+0x66>
     b94:	9a 01       	movw	r18, r20
     b96:	bd 01       	movw	r22, r26
     b98:	ef 01       	movw	r28, r30
     b9a:	df 01       	movw	r26, r30
     b9c:	f8 01       	movw	r30, r16
     b9e:	db cf       	rjmp	.-74     	; 0xb56 <malloc+0x22>
     ba0:	21 15       	cp	r18, r1
     ba2:	31 05       	cpc	r19, r1
     ba4:	f9 f0       	breq	.+62     	; 0xbe4 <malloc+0xb0>
     ba6:	28 1b       	sub	r18, r24
     ba8:	39 0b       	sbc	r19, r25
     baa:	24 30       	cpi	r18, 0x04	; 4
     bac:	31 05       	cpc	r19, r1
     bae:	80 f4       	brcc	.+32     	; 0xbd0 <malloc+0x9c>
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	9b 81       	ldd	r25, Y+3	; 0x03
     bb4:	61 15       	cp	r22, r1
     bb6:	71 05       	cpc	r23, r1
     bb8:	21 f0       	breq	.+8      	; 0xbc2 <malloc+0x8e>
     bba:	fb 01       	movw	r30, r22
     bbc:	93 83       	std	Z+3, r25	; 0x03
     bbe:	82 83       	std	Z+2, r24	; 0x02
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <malloc+0x96>
     bc2:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <__flp+0x1>
     bc6:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <__flp>
     bca:	fe 01       	movw	r30, r28
     bcc:	32 96       	adiw	r30, 0x02	; 2
     bce:	44 c0       	rjmp	.+136    	; 0xc58 <malloc+0x124>
     bd0:	fe 01       	movw	r30, r28
     bd2:	e2 0f       	add	r30, r18
     bd4:	f3 1f       	adc	r31, r19
     bd6:	81 93       	st	Z+, r24
     bd8:	91 93       	st	Z+, r25
     bda:	22 50       	subi	r18, 0x02	; 2
     bdc:	31 09       	sbc	r19, r1
     bde:	39 83       	std	Y+1, r19	; 0x01
     be0:	28 83       	st	Y, r18
     be2:	3a c0       	rjmp	.+116    	; 0xc58 <malloc+0x124>
     be4:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
     be8:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
     bec:	23 2b       	or	r18, r19
     bee:	41 f4       	brne	.+16     	; 0xc00 <malloc+0xcc>
     bf0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
     bf4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
     bf8:	30 93 a6 01 	sts	0x01A6, r19	; 0x8001a6 <__brkval+0x1>
     bfc:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <__brkval>
     c00:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
     c04:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
     c08:	21 15       	cp	r18, r1
     c0a:	31 05       	cpc	r19, r1
     c0c:	41 f4       	brne	.+16     	; 0xc1e <malloc+0xea>
     c0e:	2d b7       	in	r18, 0x3d	; 61
     c10:	3e b7       	in	r19, 0x3e	; 62
     c12:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
     c16:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
     c1a:	24 1b       	sub	r18, r20
     c1c:	35 0b       	sbc	r19, r21
     c1e:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <__brkval>
     c22:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <__brkval+0x1>
     c26:	e2 17       	cp	r30, r18
     c28:	f3 07       	cpc	r31, r19
     c2a:	a0 f4       	brcc	.+40     	; 0xc54 <malloc+0x120>
     c2c:	2e 1b       	sub	r18, r30
     c2e:	3f 0b       	sbc	r19, r31
     c30:	28 17       	cp	r18, r24
     c32:	39 07       	cpc	r19, r25
     c34:	78 f0       	brcs	.+30     	; 0xc54 <malloc+0x120>
     c36:	ac 01       	movw	r20, r24
     c38:	4e 5f       	subi	r20, 0xFE	; 254
     c3a:	5f 4f       	sbci	r21, 0xFF	; 255
     c3c:	24 17       	cp	r18, r20
     c3e:	35 07       	cpc	r19, r21
     c40:	48 f0       	brcs	.+18     	; 0xc54 <malloc+0x120>
     c42:	4e 0f       	add	r20, r30
     c44:	5f 1f       	adc	r21, r31
     c46:	50 93 a6 01 	sts	0x01A6, r21	; 0x8001a6 <__brkval+0x1>
     c4a:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <__brkval>
     c4e:	81 93       	st	Z+, r24
     c50:	91 93       	st	Z+, r25
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <malloc+0x124>
     c54:	e0 e0       	ldi	r30, 0x00	; 0
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	cf 01       	movw	r24, r30
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	08 95       	ret

00000c64 <free>:
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	09 f4       	brne	.+2      	; 0xc6e <free+0xa>
     c6c:	81 c0       	rjmp	.+258    	; 0xd70 <free+0x10c>
     c6e:	fc 01       	movw	r30, r24
     c70:	32 97       	sbiw	r30, 0x02	; 2
     c72:	13 82       	std	Z+3, r1	; 0x03
     c74:	12 82       	std	Z+2, r1	; 0x02
     c76:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <__flp>
     c7a:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <__flp+0x1>
     c7e:	10 97       	sbiw	r26, 0x00	; 0
     c80:	81 f4       	brne	.+32     	; 0xca2 <free+0x3e>
     c82:	20 81       	ld	r18, Z
     c84:	31 81       	ldd	r19, Z+1	; 0x01
     c86:	82 0f       	add	r24, r18
     c88:	93 1f       	adc	r25, r19
     c8a:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
     c8e:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	51 f5       	brne	.+84     	; 0xcec <free+0x88>
     c98:	f0 93 a6 01 	sts	0x01A6, r31	; 0x8001a6 <__brkval+0x1>
     c9c:	e0 93 a5 01 	sts	0x01A5, r30	; 0x8001a5 <__brkval>
     ca0:	67 c0       	rjmp	.+206    	; 0xd70 <free+0x10c>
     ca2:	ed 01       	movw	r28, r26
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	ce 17       	cp	r28, r30
     caa:	df 07       	cpc	r29, r31
     cac:	40 f4       	brcc	.+16     	; 0xcbe <free+0x5a>
     cae:	4a 81       	ldd	r20, Y+2	; 0x02
     cb0:	5b 81       	ldd	r21, Y+3	; 0x03
     cb2:	9e 01       	movw	r18, r28
     cb4:	41 15       	cp	r20, r1
     cb6:	51 05       	cpc	r21, r1
     cb8:	f1 f0       	breq	.+60     	; 0xcf6 <free+0x92>
     cba:	ea 01       	movw	r28, r20
     cbc:	f5 cf       	rjmp	.-22     	; 0xca8 <free+0x44>
     cbe:	d3 83       	std	Z+3, r29	; 0x03
     cc0:	c2 83       	std	Z+2, r28	; 0x02
     cc2:	40 81       	ld	r20, Z
     cc4:	51 81       	ldd	r21, Z+1	; 0x01
     cc6:	84 0f       	add	r24, r20
     cc8:	95 1f       	adc	r25, r21
     cca:	c8 17       	cp	r28, r24
     ccc:	d9 07       	cpc	r29, r25
     cce:	59 f4       	brne	.+22     	; 0xce6 <free+0x82>
     cd0:	88 81       	ld	r24, Y
     cd2:	99 81       	ldd	r25, Y+1	; 0x01
     cd4:	84 0f       	add	r24, r20
     cd6:	95 1f       	adc	r25, r21
     cd8:	02 96       	adiw	r24, 0x02	; 2
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	9b 81       	ldd	r25, Y+3	; 0x03
     ce2:	93 83       	std	Z+3, r25	; 0x03
     ce4:	82 83       	std	Z+2, r24	; 0x02
     ce6:	21 15       	cp	r18, r1
     ce8:	31 05       	cpc	r19, r1
     cea:	29 f4       	brne	.+10     	; 0xcf6 <free+0x92>
     cec:	f0 93 a8 01 	sts	0x01A8, r31	; 0x8001a8 <__flp+0x1>
     cf0:	e0 93 a7 01 	sts	0x01A7, r30	; 0x8001a7 <__flp>
     cf4:	3d c0       	rjmp	.+122    	; 0xd70 <free+0x10c>
     cf6:	e9 01       	movw	r28, r18
     cf8:	fb 83       	std	Y+3, r31	; 0x03
     cfa:	ea 83       	std	Y+2, r30	; 0x02
     cfc:	49 91       	ld	r20, Y+
     cfe:	59 91       	ld	r21, Y+
     d00:	c4 0f       	add	r28, r20
     d02:	d5 1f       	adc	r29, r21
     d04:	ec 17       	cp	r30, r28
     d06:	fd 07       	cpc	r31, r29
     d08:	61 f4       	brne	.+24     	; 0xd22 <free+0xbe>
     d0a:	80 81       	ld	r24, Z
     d0c:	91 81       	ldd	r25, Z+1	; 0x01
     d0e:	84 0f       	add	r24, r20
     d10:	95 1f       	adc	r25, r21
     d12:	02 96       	adiw	r24, 0x02	; 2
     d14:	e9 01       	movw	r28, r18
     d16:	99 83       	std	Y+1, r25	; 0x01
     d18:	88 83       	st	Y, r24
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	9b 83       	std	Y+3, r25	; 0x03
     d20:	8a 83       	std	Y+2, r24	; 0x02
     d22:	e0 e0       	ldi	r30, 0x00	; 0
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	12 96       	adiw	r26, 0x02	; 2
     d28:	8d 91       	ld	r24, X+
     d2a:	9c 91       	ld	r25, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	19 f0       	breq	.+6      	; 0xd38 <free+0xd4>
     d32:	fd 01       	movw	r30, r26
     d34:	dc 01       	movw	r26, r24
     d36:	f7 cf       	rjmp	.-18     	; 0xd26 <free+0xc2>
     d38:	8d 91       	ld	r24, X+
     d3a:	9c 91       	ld	r25, X
     d3c:	11 97       	sbiw	r26, 0x01	; 1
     d3e:	9d 01       	movw	r18, r26
     d40:	2e 5f       	subi	r18, 0xFE	; 254
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
     d4c:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
     d50:	28 17       	cp	r18, r24
     d52:	39 07       	cpc	r19, r25
     d54:	69 f4       	brne	.+26     	; 0xd70 <free+0x10c>
     d56:	30 97       	sbiw	r30, 0x00	; 0
     d58:	29 f4       	brne	.+10     	; 0xd64 <free+0x100>
     d5a:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__flp+0x1>
     d5e:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__flp>
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <free+0x104>
     d64:	13 82       	std	Z+3, r1	; 0x03
     d66:	12 82       	std	Z+2, r1	; 0x02
     d68:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <__brkval+0x1>
     d6c:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <__brkval>
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <atof>:
     d76:	66 27       	eor	r22, r22
     d78:	77 27       	eor	r23, r23
     d7a:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <strtod>

00000d7e <strtok>:
     d7e:	4d e1       	ldi	r20, 0x1D	; 29
     d80:	51 e0       	ldi	r21, 0x01	; 1
     d82:	0e 94 cd 06 	call	0xd9a	; 0xd9a <strtok_r>
     d86:	08 95       	ret

00000d88 <strcmp>:
     d88:	fb 01       	movw	r30, r22
     d8a:	dc 01       	movw	r26, r24
     d8c:	8d 91       	ld	r24, X+
     d8e:	01 90       	ld	r0, Z+
     d90:	80 19       	sub	r24, r0
     d92:	01 10       	cpse	r0, r1
     d94:	d9 f3       	breq	.-10     	; 0xd8c <strcmp+0x4>
     d96:	99 0b       	sbc	r25, r25
     d98:	08 95       	ret

00000d9a <strtok_r>:
     d9a:	fa 01       	movw	r30, r20
     d9c:	a1 91       	ld	r26, Z+
     d9e:	b0 81       	ld	r27, Z
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	19 f4       	brne	.+6      	; 0xdaa <strtok_r+0x10>
     da4:	10 97       	sbiw	r26, 0x00	; 0
     da6:	e1 f0       	breq	.+56     	; 0xde0 <strtok_r+0x46>
     da8:	cd 01       	movw	r24, r26
     daa:	dc 01       	movw	r26, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0d 90       	ld	r0, X+
     db0:	00 20       	and	r0, r0
     db2:	11 f4       	brne	.+4      	; 0xdb8 <strtok_r+0x1e>
     db4:	c0 01       	movw	r24, r0
     db6:	13 c0       	rjmp	.+38     	; 0xdde <strtok_r+0x44>
     db8:	fb 01       	movw	r30, r22
     dba:	21 91       	ld	r18, Z+
     dbc:	22 23       	and	r18, r18
     dbe:	19 f0       	breq	.+6      	; 0xdc6 <strtok_r+0x2c>
     dc0:	20 15       	cp	r18, r0
     dc2:	d9 f7       	brne	.-10     	; 0xdba <strtok_r+0x20>
     dc4:	f3 cf       	rjmp	.-26     	; 0xdac <strtok_r+0x12>
     dc6:	fb 01       	movw	r30, r22
     dc8:	21 91       	ld	r18, Z+
     dca:	20 15       	cp	r18, r0
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <strtok_r+0x3a>
     dce:	1e 92       	st	-X, r1
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <strtok_r+0x46>
     dd4:	22 23       	and	r18, r18
     dd6:	c1 f7       	brne	.-16     	; 0xdc8 <strtok_r+0x2e>
     dd8:	0d 90       	ld	r0, X+
     dda:	00 20       	and	r0, r0
     ddc:	a1 f7       	brne	.-24     	; 0xdc6 <strtok_r+0x2c>
     dde:	d0 01       	movw	r26, r0
     de0:	fa 01       	movw	r30, r20
     de2:	a1 93       	st	Z+, r26
     de4:	b0 83       	st	Z, r27
     de6:	08 95       	ret

00000de8 <puts>:
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <__iob+0x2>
     df4:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <__iob+0x3>
     df8:	23 81       	ldd	r18, Z+3	; 0x03
     dfa:	21 ff       	sbrs	r18, 1
     dfc:	1b c0       	rjmp	.+54     	; 0xe34 <puts+0x4c>
     dfe:	8c 01       	movw	r16, r24
     e00:	d0 e0       	ldi	r29, 0x00	; 0
     e02:	c0 e0       	ldi	r28, 0x00	; 0
     e04:	f8 01       	movw	r30, r16
     e06:	81 91       	ld	r24, Z+
     e08:	8f 01       	movw	r16, r30
     e0a:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <__iob+0x2>
     e0e:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <__iob+0x3>
     e12:	db 01       	movw	r26, r22
     e14:	18 96       	adiw	r26, 0x08	; 8
     e16:	ed 91       	ld	r30, X+
     e18:	fc 91       	ld	r31, X
     e1a:	19 97       	sbiw	r26, 0x09	; 9
     e1c:	88 23       	and	r24, r24
     e1e:	31 f0       	breq	.+12     	; 0xe2c <puts+0x44>
     e20:	09 95       	icall
     e22:	89 2b       	or	r24, r25
     e24:	79 f3       	breq	.-34     	; 0xe04 <puts+0x1c>
     e26:	df ef       	ldi	r29, 0xFF	; 255
     e28:	cf ef       	ldi	r28, 0xFF	; 255
     e2a:	ec cf       	rjmp	.-40     	; 0xe04 <puts+0x1c>
     e2c:	8a e0       	ldi	r24, 0x0A	; 10
     e2e:	09 95       	icall
     e30:	89 2b       	or	r24, r25
     e32:	19 f0       	breq	.+6      	; 0xe3a <puts+0x52>
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	9f ef       	ldi	r25, 0xFF	; 255
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <puts+0x56>
     e3a:	8d 2f       	mov	r24, r29
     e3c:	9c 2f       	mov	r25, r28
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <dtoa_prf>:
     e48:	a9 e0       	ldi	r26, 0x09	; 9
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea e2       	ldi	r30, 0x2A	; 42
     e4e:	f7 e0       	ldi	r31, 0x07	; 7
     e50:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__prologue_saves__+0xc>
     e54:	6a 01       	movw	r12, r20
     e56:	12 2f       	mov	r17, r18
     e58:	b0 2e       	mov	r11, r16
     e5a:	2b e3       	ldi	r18, 0x3B	; 59
     e5c:	20 17       	cp	r18, r16
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <dtoa_prf+0x20>
     e60:	ff 24       	eor	r15, r15
     e62:	f3 94       	inc	r15
     e64:	f0 0e       	add	r15, r16
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <dtoa_prf+0x24>
     e68:	2c e3       	ldi	r18, 0x3C	; 60
     e6a:	f2 2e       	mov	r15, r18
     e6c:	0f 2d       	mov	r16, r15
     e6e:	27 e0       	ldi	r18, 0x07	; 7
     e70:	ae 01       	movw	r20, r28
     e72:	4f 5f       	subi	r20, 0xFF	; 255
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
     e76:	0e 94 cc 09 	call	0x1398	; 0x1398 <__ftoa_engine>
     e7a:	bc 01       	movw	r22, r24
     e7c:	49 81       	ldd	r20, Y+1	; 0x01
     e7e:	84 2f       	mov	r24, r20
     e80:	89 70       	andi	r24, 0x09	; 9
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	31 f0       	breq	.+12     	; 0xe92 <dtoa_prf+0x4a>
     e86:	e1 fc       	sbrc	r14, 1
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <dtoa_prf+0x4e>
     e8a:	e0 fe       	sbrs	r14, 0
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <dtoa_prf+0x52>
     e8e:	90 e2       	ldi	r25, 0x20	; 32
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <dtoa_prf+0x54>
     e92:	9d e2       	ldi	r25, 0x2D	; 45
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <dtoa_prf+0x54>
     e96:	9b e2       	ldi	r25, 0x2B	; 43
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <dtoa_prf+0x54>
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	5e 2d       	mov	r21, r14
     e9e:	50 71       	andi	r21, 0x10	; 16
     ea0:	43 ff       	sbrs	r20, 3
     ea2:	3c c0       	rjmp	.+120    	; 0xf1c <dtoa_prf+0xd4>
     ea4:	91 11       	cpse	r25, r1
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <dtoa_prf+0x64>
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <dtoa_prf+0x66>
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	81 17       	cp	r24, r17
     eb0:	18 f4       	brcc	.+6      	; 0xeb8 <dtoa_prf+0x70>
     eb2:	21 2f       	mov	r18, r17
     eb4:	28 1b       	sub	r18, r24
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <dtoa_prf+0x72>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	51 11       	cpse	r21, r1
     ebc:	0b c0       	rjmp	.+22     	; 0xed4 <dtoa_prf+0x8c>
     ebe:	f6 01       	movw	r30, r12
     ec0:	82 2f       	mov	r24, r18
     ec2:	30 e2       	ldi	r19, 0x20	; 32
     ec4:	88 23       	and	r24, r24
     ec6:	19 f0       	breq	.+6      	; 0xece <dtoa_prf+0x86>
     ec8:	31 93       	st	Z+, r19
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	fb cf       	rjmp	.-10     	; 0xec4 <dtoa_prf+0x7c>
     ece:	c2 0e       	add	r12, r18
     ed0:	d1 1c       	adc	r13, r1
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	99 23       	and	r25, r25
     ed6:	29 f0       	breq	.+10     	; 0xee2 <dtoa_prf+0x9a>
     ed8:	d6 01       	movw	r26, r12
     eda:	9c 93       	st	X, r25
     edc:	f6 01       	movw	r30, r12
     ede:	31 96       	adiw	r30, 0x01	; 1
     ee0:	6f 01       	movw	r12, r30
     ee2:	c6 01       	movw	r24, r12
     ee4:	03 96       	adiw	r24, 0x03	; 3
     ee6:	e2 fe       	sbrs	r14, 2
     ee8:	0a c0       	rjmp	.+20     	; 0xefe <dtoa_prf+0xb6>
     eea:	3e e4       	ldi	r19, 0x4E	; 78
     eec:	d6 01       	movw	r26, r12
     eee:	3c 93       	st	X, r19
     ef0:	41 e4       	ldi	r20, 0x41	; 65
     ef2:	11 96       	adiw	r26, 0x01	; 1
     ef4:	4c 93       	st	X, r20
     ef6:	11 97       	sbiw	r26, 0x01	; 1
     ef8:	12 96       	adiw	r26, 0x02	; 2
     efa:	3c 93       	st	X, r19
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <dtoa_prf+0xc2>
     efe:	3e e6       	ldi	r19, 0x6E	; 110
     f00:	f6 01       	movw	r30, r12
     f02:	30 83       	st	Z, r19
     f04:	41 e6       	ldi	r20, 0x61	; 97
     f06:	41 83       	std	Z+1, r20	; 0x01
     f08:	32 83       	std	Z+2, r19	; 0x02
     f0a:	fc 01       	movw	r30, r24
     f0c:	32 2f       	mov	r19, r18
     f0e:	40 e2       	ldi	r20, 0x20	; 32
     f10:	33 23       	and	r19, r19
     f12:	09 f4       	brne	.+2      	; 0xf16 <dtoa_prf+0xce>
     f14:	42 c0       	rjmp	.+132    	; 0xf9a <dtoa_prf+0x152>
     f16:	41 93       	st	Z+, r20
     f18:	31 50       	subi	r19, 0x01	; 1
     f1a:	fa cf       	rjmp	.-12     	; 0xf10 <dtoa_prf+0xc8>
     f1c:	42 ff       	sbrs	r20, 2
     f1e:	44 c0       	rjmp	.+136    	; 0xfa8 <dtoa_prf+0x160>
     f20:	91 11       	cpse	r25, r1
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <dtoa_prf+0xe0>
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <dtoa_prf+0xe2>
     f28:	84 e0       	ldi	r24, 0x04	; 4
     f2a:	81 17       	cp	r24, r17
     f2c:	18 f4       	brcc	.+6      	; 0xf34 <dtoa_prf+0xec>
     f2e:	21 2f       	mov	r18, r17
     f30:	28 1b       	sub	r18, r24
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <dtoa_prf+0xee>
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	51 11       	cpse	r21, r1
     f38:	0b c0       	rjmp	.+22     	; 0xf50 <dtoa_prf+0x108>
     f3a:	f6 01       	movw	r30, r12
     f3c:	82 2f       	mov	r24, r18
     f3e:	30 e2       	ldi	r19, 0x20	; 32
     f40:	88 23       	and	r24, r24
     f42:	19 f0       	breq	.+6      	; 0xf4a <dtoa_prf+0x102>
     f44:	31 93       	st	Z+, r19
     f46:	81 50       	subi	r24, 0x01	; 1
     f48:	fb cf       	rjmp	.-10     	; 0xf40 <dtoa_prf+0xf8>
     f4a:	c2 0e       	add	r12, r18
     f4c:	d1 1c       	adc	r13, r1
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	99 23       	and	r25, r25
     f52:	29 f0       	breq	.+10     	; 0xf5e <dtoa_prf+0x116>
     f54:	d6 01       	movw	r26, r12
     f56:	9c 93       	st	X, r25
     f58:	f6 01       	movw	r30, r12
     f5a:	31 96       	adiw	r30, 0x01	; 1
     f5c:	6f 01       	movw	r12, r30
     f5e:	c6 01       	movw	r24, r12
     f60:	03 96       	adiw	r24, 0x03	; 3
     f62:	e2 fe       	sbrs	r14, 2
     f64:	0b c0       	rjmp	.+22     	; 0xf7c <dtoa_prf+0x134>
     f66:	39 e4       	ldi	r19, 0x49	; 73
     f68:	d6 01       	movw	r26, r12
     f6a:	3c 93       	st	X, r19
     f6c:	3e e4       	ldi	r19, 0x4E	; 78
     f6e:	11 96       	adiw	r26, 0x01	; 1
     f70:	3c 93       	st	X, r19
     f72:	11 97       	sbiw	r26, 0x01	; 1
     f74:	36 e4       	ldi	r19, 0x46	; 70
     f76:	12 96       	adiw	r26, 0x02	; 2
     f78:	3c 93       	st	X, r19
     f7a:	07 c0       	rjmp	.+14     	; 0xf8a <dtoa_prf+0x142>
     f7c:	39 e6       	ldi	r19, 0x69	; 105
     f7e:	f6 01       	movw	r30, r12
     f80:	30 83       	st	Z, r19
     f82:	3e e6       	ldi	r19, 0x6E	; 110
     f84:	31 83       	std	Z+1, r19	; 0x01
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	32 83       	std	Z+2, r19	; 0x02
     f8a:	fc 01       	movw	r30, r24
     f8c:	32 2f       	mov	r19, r18
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	33 23       	and	r19, r19
     f92:	19 f0       	breq	.+6      	; 0xf9a <dtoa_prf+0x152>
     f94:	41 93       	st	Z+, r20
     f96:	31 50       	subi	r19, 0x01	; 1
     f98:	fb cf       	rjmp	.-10     	; 0xf90 <dtoa_prf+0x148>
     f9a:	fc 01       	movw	r30, r24
     f9c:	e2 0f       	add	r30, r18
     f9e:	f1 1d       	adc	r31, r1
     fa0:	10 82       	st	Z, r1
     fa2:	8e ef       	ldi	r24, 0xFE	; 254
     fa4:	9f ef       	ldi	r25, 0xFF	; 255
     fa6:	a6 c0       	rjmp	.+332    	; 0x10f4 <dtoa_prf+0x2ac>
     fa8:	21 e0       	ldi	r18, 0x01	; 1
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	91 11       	cpse	r25, r1
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <dtoa_prf+0x16c>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	16 16       	cp	r1, r22
     fb6:	17 06       	cpc	r1, r23
     fb8:	1c f4       	brge	.+6      	; 0xfc0 <dtoa_prf+0x178>
     fba:	fb 01       	movw	r30, r22
     fbc:	31 96       	adiw	r30, 0x01	; 1
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <dtoa_prf+0x17c>
     fc0:	e1 e0       	ldi	r30, 0x01	; 1
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	2e 0f       	add	r18, r30
     fc6:	3f 1f       	adc	r19, r31
     fc8:	bb 20       	and	r11, r11
     fca:	21 f0       	breq	.+8      	; 0xfd4 <dtoa_prf+0x18c>
     fcc:	eb 2d       	mov	r30, r11
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	31 96       	adiw	r30, 0x01	; 1
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <dtoa_prf+0x190>
     fd4:	e0 e0       	ldi	r30, 0x00	; 0
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	2e 0f       	add	r18, r30
     fda:	3f 1f       	adc	r19, r31
     fdc:	e1 2f       	mov	r30, r17
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	2e 17       	cp	r18, r30
     fe2:	3f 07       	cpc	r19, r31
     fe4:	1c f4       	brge	.+6      	; 0xfec <dtoa_prf+0x1a4>
     fe6:	12 1b       	sub	r17, r18
     fe8:	21 2f       	mov	r18, r17
     fea:	01 c0       	rjmp	.+2      	; 0xfee <dtoa_prf+0x1a6>
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	8e 2d       	mov	r24, r14
     ff0:	88 71       	andi	r24, 0x18	; 24
     ff2:	59 f4       	brne	.+22     	; 0x100a <dtoa_prf+0x1c2>
     ff4:	f6 01       	movw	r30, r12
     ff6:	82 2f       	mov	r24, r18
     ff8:	30 e2       	ldi	r19, 0x20	; 32
     ffa:	88 23       	and	r24, r24
     ffc:	19 f0       	breq	.+6      	; 0x1004 <dtoa_prf+0x1bc>
     ffe:	31 93       	st	Z+, r19
    1000:	81 50       	subi	r24, 0x01	; 1
    1002:	fb cf       	rjmp	.-10     	; 0xffa <dtoa_prf+0x1b2>
    1004:	c2 0e       	add	r12, r18
    1006:	d1 1c       	adc	r13, r1
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	99 23       	and	r25, r25
    100c:	29 f0       	breq	.+10     	; 0x1018 <dtoa_prf+0x1d0>
    100e:	d6 01       	movw	r26, r12
    1010:	9c 93       	st	X, r25
    1012:	f6 01       	movw	r30, r12
    1014:	31 96       	adiw	r30, 0x01	; 1
    1016:	6f 01       	movw	r12, r30
    1018:	51 11       	cpse	r21, r1
    101a:	0b c0       	rjmp	.+22     	; 0x1032 <dtoa_prf+0x1ea>
    101c:	f6 01       	movw	r30, r12
    101e:	82 2f       	mov	r24, r18
    1020:	90 e3       	ldi	r25, 0x30	; 48
    1022:	88 23       	and	r24, r24
    1024:	19 f0       	breq	.+6      	; 0x102c <dtoa_prf+0x1e4>
    1026:	91 93       	st	Z+, r25
    1028:	81 50       	subi	r24, 0x01	; 1
    102a:	fb cf       	rjmp	.-10     	; 0x1022 <dtoa_prf+0x1da>
    102c:	c2 0e       	add	r12, r18
    102e:	d1 1c       	adc	r13, r1
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	0f 2d       	mov	r16, r15
    1034:	06 0f       	add	r16, r22
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	34 2f       	mov	r19, r20
    103a:	30 71       	andi	r19, 0x10	; 16
    103c:	44 ff       	sbrs	r20, 4
    103e:	03 c0       	rjmp	.+6      	; 0x1046 <dtoa_prf+0x1fe>
    1040:	91 33       	cpi	r25, 0x31	; 49
    1042:	09 f4       	brne	.+2      	; 0x1046 <dtoa_prf+0x1fe>
    1044:	01 50       	subi	r16, 0x01	; 1
    1046:	10 16       	cp	r1, r16
    1048:	24 f4       	brge	.+8      	; 0x1052 <dtoa_prf+0x20a>
    104a:	09 30       	cpi	r16, 0x09	; 9
    104c:	18 f0       	brcs	.+6      	; 0x1054 <dtoa_prf+0x20c>
    104e:	08 e0       	ldi	r16, 0x08	; 8
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <dtoa_prf+0x20c>
    1052:	01 e0       	ldi	r16, 0x01	; 1
    1054:	ab 01       	movw	r20, r22
    1056:	77 ff       	sbrs	r23, 7
    1058:	02 c0       	rjmp	.+4      	; 0x105e <dtoa_prf+0x216>
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	fb 01       	movw	r30, r22
    1060:	e4 1b       	sub	r30, r20
    1062:	f5 0b       	sbc	r31, r21
    1064:	a1 e0       	ldi	r26, 0x01	; 1
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ac 0f       	add	r26, r28
    106a:	bd 1f       	adc	r27, r29
    106c:	ea 0f       	add	r30, r26
    106e:	fb 1f       	adc	r31, r27
    1070:	8e e2       	ldi	r24, 0x2E	; 46
    1072:	a8 2e       	mov	r10, r24
    1074:	4b 01       	movw	r8, r22
    1076:	80 1a       	sub	r8, r16
    1078:	91 08       	sbc	r9, r1
    107a:	0b 2d       	mov	r16, r11
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	11 95       	neg	r17
    1080:	01 95       	neg	r16
    1082:	11 09       	sbc	r17, r1
    1084:	4f 3f       	cpi	r20, 0xFF	; 255
    1086:	bf ef       	ldi	r27, 0xFF	; 255
    1088:	5b 07       	cpc	r21, r27
    108a:	21 f4       	brne	.+8      	; 0x1094 <dtoa_prf+0x24c>
    108c:	d6 01       	movw	r26, r12
    108e:	ac 92       	st	X, r10
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	6d 01       	movw	r12, r26
    1094:	64 17       	cp	r22, r20
    1096:	75 07       	cpc	r23, r21
    1098:	2c f0       	brlt	.+10     	; 0x10a4 <dtoa_prf+0x25c>
    109a:	84 16       	cp	r8, r20
    109c:	95 06       	cpc	r9, r21
    109e:	14 f4       	brge	.+4      	; 0x10a4 <dtoa_prf+0x25c>
    10a0:	81 81       	ldd	r24, Z+1	; 0x01
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <dtoa_prf+0x25e>
    10a4:	80 e3       	ldi	r24, 0x30	; 48
    10a6:	41 50       	subi	r20, 0x01	; 1
    10a8:	51 09       	sbc	r21, r1
    10aa:	31 96       	adiw	r30, 0x01	; 1
    10ac:	d6 01       	movw	r26, r12
    10ae:	11 96       	adiw	r26, 0x01	; 1
    10b0:	7d 01       	movw	r14, r26
    10b2:	40 17       	cp	r20, r16
    10b4:	51 07       	cpc	r21, r17
    10b6:	24 f0       	brlt	.+8      	; 0x10c0 <dtoa_prf+0x278>
    10b8:	d6 01       	movw	r26, r12
    10ba:	8c 93       	st	X, r24
    10bc:	67 01       	movw	r12, r14
    10be:	e2 cf       	rjmp	.-60     	; 0x1084 <dtoa_prf+0x23c>
    10c0:	64 17       	cp	r22, r20
    10c2:	75 07       	cpc	r23, r21
    10c4:	39 f4       	brne	.+14     	; 0x10d4 <dtoa_prf+0x28c>
    10c6:	96 33       	cpi	r25, 0x36	; 54
    10c8:	20 f4       	brcc	.+8      	; 0x10d2 <dtoa_prf+0x28a>
    10ca:	95 33       	cpi	r25, 0x35	; 53
    10cc:	19 f4       	brne	.+6      	; 0x10d4 <dtoa_prf+0x28c>
    10ce:	31 11       	cpse	r19, r1
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <dtoa_prf+0x28c>
    10d2:	81 e3       	ldi	r24, 0x31	; 49
    10d4:	f6 01       	movw	r30, r12
    10d6:	80 83       	st	Z, r24
    10d8:	f7 01       	movw	r30, r14
    10da:	82 2f       	mov	r24, r18
    10dc:	90 e2       	ldi	r25, 0x20	; 32
    10de:	88 23       	and	r24, r24
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <dtoa_prf+0x2a0>
    10e2:	91 93       	st	Z+, r25
    10e4:	81 50       	subi	r24, 0x01	; 1
    10e6:	fb cf       	rjmp	.-10     	; 0x10de <dtoa_prf+0x296>
    10e8:	f7 01       	movw	r30, r14
    10ea:	e2 0f       	add	r30, r18
    10ec:	f1 1d       	adc	r31, r1
    10ee:	10 82       	st	Z, r1
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	29 96       	adiw	r28, 0x09	; 9
    10f6:	ec e0       	ldi	r30, 0x0C	; 12
    10f8:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__epilogue_restores__+0xc>

000010fc <strtod>:
    10fc:	a0 e0       	ldi	r26, 0x00	; 0
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e4 e8       	ldi	r30, 0x84	; 132
    1102:	f8 e0       	ldi	r31, 0x08	; 8
    1104:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__prologue_saves__+0xc>
    1108:	ec 01       	movw	r28, r24
    110a:	6b 01       	movw	r12, r22
    110c:	61 15       	cp	r22, r1
    110e:	71 05       	cpc	r23, r1
    1110:	19 f0       	breq	.+6      	; 0x1118 <strtod+0x1c>
    1112:	fb 01       	movw	r30, r22
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	80 83       	st	Z, r24
    1118:	7e 01       	movw	r14, r28
    111a:	ff ef       	ldi	r31, 0xFF	; 255
    111c:	ef 1a       	sub	r14, r31
    111e:	ff 0a       	sbc	r15, r31
    1120:	08 81       	ld	r16, Y
    1122:	80 2f       	mov	r24, r16
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 a4 0a 	call	0x1548	; 0x1548 <isspace>
    112a:	89 2b       	or	r24, r25
    112c:	11 f0       	breq	.+4      	; 0x1132 <strtod+0x36>
    112e:	e7 01       	movw	r28, r14
    1130:	f3 cf       	rjmp	.-26     	; 0x1118 <strtod+0x1c>
    1132:	0d 32       	cpi	r16, 0x2D	; 45
    1134:	39 f4       	brne	.+14     	; 0x1144 <strtod+0x48>
    1136:	7e 01       	movw	r14, r28
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	e8 0e       	add	r14, r24
    113c:	f1 1c       	adc	r15, r1
    113e:	09 81       	ldd	r16, Y+1	; 0x01
    1140:	11 e0       	ldi	r17, 0x01	; 1
    1142:	08 c0       	rjmp	.+16     	; 0x1154 <strtod+0x58>
    1144:	0b 32       	cpi	r16, 0x2B	; 43
    1146:	29 f4       	brne	.+10     	; 0x1152 <strtod+0x56>
    1148:	7e 01       	movw	r14, r28
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	e9 0e       	add	r14, r25
    114e:	f1 1c       	adc	r15, r1
    1150:	09 81       	ldd	r16, Y+1	; 0x01
    1152:	10 e0       	ldi	r17, 0x00	; 0
    1154:	e7 01       	movw	r28, r14
    1156:	21 97       	sbiw	r28, 0x01	; 1
    1158:	43 e0       	ldi	r20, 0x03	; 3
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	60 e7       	ldi	r22, 0x70	; 112
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	ce 01       	movw	r24, r28
    1162:	0e 94 ad 0a 	call	0x155a	; 0x155a <strncasecmp_P>
    1166:	89 2b       	or	r24, r25
    1168:	c1 f4       	brne	.+48     	; 0x119a <strtod+0x9e>
    116a:	23 96       	adiw	r28, 0x03	; 3
    116c:	45 e0       	ldi	r20, 0x05	; 5
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	6b e6       	ldi	r22, 0x6B	; 107
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	ce 01       	movw	r24, r28
    1176:	0e 94 ad 0a 	call	0x155a	; 0x155a <strncasecmp_P>
    117a:	89 2b       	or	r24, r25
    117c:	09 f4       	brne	.+2      	; 0x1180 <strtod+0x84>
    117e:	25 96       	adiw	r28, 0x05	; 5
    1180:	c1 14       	cp	r12, r1
    1182:	d1 04       	cpc	r13, r1
    1184:	19 f0       	breq	.+6      	; 0x118c <strtod+0x90>
    1186:	f6 01       	movw	r30, r12
    1188:	d1 83       	std	Z+1, r29	; 0x01
    118a:	c0 83       	st	Z, r28
    118c:	11 11       	cpse	r17, r1
    118e:	f6 c0       	rjmp	.+492    	; 0x137c <strtod+0x280>
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	80 e8       	ldi	r24, 0x80	; 128
    1196:	9f e7       	ldi	r25, 0x7F	; 127
    1198:	fa c0       	rjmp	.+500    	; 0x138e <strtod+0x292>
    119a:	43 e0       	ldi	r20, 0x03	; 3
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	68 e6       	ldi	r22, 0x68	; 104
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	ce 01       	movw	r24, r28
    11a4:	0e 94 ad 0a 	call	0x155a	; 0x155a <strncasecmp_P>
    11a8:	89 2b       	or	r24, r25
    11aa:	59 f4       	brne	.+22     	; 0x11c2 <strtod+0xc6>
    11ac:	c1 14       	cp	r12, r1
    11ae:	d1 04       	cpc	r13, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <strtod+0xb8>
    11b2:	e9 c0       	rjmp	.+466    	; 0x1386 <strtod+0x28a>
    11b4:	f2 e0       	ldi	r31, 0x02	; 2
    11b6:	ef 0e       	add	r14, r31
    11b8:	f1 1c       	adc	r15, r1
    11ba:	f6 01       	movw	r30, r12
    11bc:	f1 82       	std	Z+1, r15	; 0x01
    11be:	e0 82       	st	Z, r14
    11c0:	e2 c0       	rjmp	.+452    	; 0x1386 <strtod+0x28a>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	c0 e0       	ldi	r28, 0x00	; 0
    11ca:	d0 e0       	ldi	r29, 0x00	; 0
    11cc:	f7 01       	movw	r30, r14
    11ce:	80 ed       	ldi	r24, 0xD0	; 208
    11d0:	a8 2e       	mov	r10, r24
    11d2:	a0 0e       	add	r10, r16
    11d4:	89 e0       	ldi	r24, 0x09	; 9
    11d6:	8a 15       	cp	r24, r10
    11d8:	30 f1       	brcs	.+76     	; 0x1226 <strtod+0x12a>
    11da:	91 2f       	mov	r25, r17
    11dc:	92 60       	ori	r25, 0x02	; 2
    11de:	b9 2e       	mov	r11, r25
    11e0:	81 2f       	mov	r24, r17
    11e2:	88 70       	andi	r24, 0x08	; 8
    11e4:	12 ff       	sbrs	r17, 2
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <strtod+0xf4>
    11e8:	81 11       	cpse	r24, r1
    11ea:	24 c0       	rjmp	.+72     	; 0x1234 <strtod+0x138>
    11ec:	21 96       	adiw	r28, 0x01	; 1
    11ee:	22 c0       	rjmp	.+68     	; 0x1234 <strtod+0x138>
    11f0:	81 11       	cpse	r24, r1
    11f2:	21 97       	sbiw	r28, 0x01	; 1
    11f4:	a5 e0       	ldi	r26, 0x05	; 5
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__muluhisi3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	aa 1f       	adc	r26, r26
    1206:	bb 1f       	adc	r27, r27
    1208:	9c 01       	movw	r18, r24
    120a:	ad 01       	movw	r20, r26
    120c:	2a 0d       	add	r18, r10
    120e:	31 1d       	adc	r19, r1
    1210:	41 1d       	adc	r20, r1
    1212:	51 1d       	adc	r21, r1
    1214:	28 39       	cpi	r18, 0x98	; 152
    1216:	89 e9       	ldi	r24, 0x99	; 153
    1218:	38 07       	cpc	r19, r24
    121a:	48 07       	cpc	r20, r24
    121c:	89 e1       	ldi	r24, 0x19	; 25
    121e:	58 07       	cpc	r21, r24
    1220:	48 f0       	brcs	.+18     	; 0x1234 <strtod+0x138>
    1222:	16 60       	ori	r17, 0x06	; 6
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <strtod+0x136>
    1226:	9e ef       	ldi	r25, 0xFE	; 254
    1228:	a9 12       	cpse	r10, r25
    122a:	0a c0       	rjmp	.+20     	; 0x1240 <strtod+0x144>
    122c:	13 fd       	sbrc	r17, 3
    122e:	40 c0       	rjmp	.+128    	; 0x12b0 <strtod+0x1b4>
    1230:	18 60       	ori	r17, 0x08	; 8
    1232:	b1 2e       	mov	r11, r17
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	e8 1a       	sub	r14, r24
    1238:	f8 0a       	sbc	r15, r24
    123a:	00 81       	ld	r16, Z
    123c:	1b 2d       	mov	r17, r11
    123e:	c6 cf       	rjmp	.-116    	; 0x11cc <strtod+0xd0>
    1240:	80 2f       	mov	r24, r16
    1242:	8f 7d       	andi	r24, 0xDF	; 223
    1244:	85 34       	cpi	r24, 0x45	; 69
    1246:	a1 f5       	brne	.+104    	; 0x12b0 <strtod+0x1b4>
    1248:	80 81       	ld	r24, Z
    124a:	8d 32       	cpi	r24, 0x2D	; 45
    124c:	11 f4       	brne	.+4      	; 0x1252 <strtod+0x156>
    124e:	10 61       	ori	r17, 0x10	; 16
    1250:	06 c0       	rjmp	.+12     	; 0x125e <strtod+0x162>
    1252:	8b 32       	cpi	r24, 0x2B	; 43
    1254:	21 f0       	breq	.+8      	; 0x125e <strtod+0x162>
    1256:	31 96       	adiw	r30, 0x01	; 1
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <strtod+0x16a>
    125e:	81 81       	ldd	r24, Z+1	; 0x01
    1260:	32 96       	adiw	r30, 0x02	; 2
    1262:	62 e0       	ldi	r22, 0x02	; 2
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	80 53       	subi	r24, 0x30	; 48
    1268:	8a 30       	cpi	r24, 0x0A	; 10
    126a:	18 f0       	brcs	.+6      	; 0x1272 <strtod+0x176>
    126c:	e6 1b       	sub	r30, r22
    126e:	f7 0b       	sbc	r31, r23
    1270:	1f c0       	rjmp	.+62     	; 0x12b0 <strtod+0x1b4>
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	60 38       	cpi	r22, 0x80	; 128
    1278:	9c e0       	ldi	r25, 0x0C	; 12
    127a:	79 07       	cpc	r23, r25
    127c:	5c f4       	brge	.+22     	; 0x1294 <strtod+0x198>
    127e:	db 01       	movw	r26, r22
    1280:	aa 0f       	add	r26, r26
    1282:	bb 1f       	adc	r27, r27
    1284:	aa 0f       	add	r26, r26
    1286:	bb 1f       	adc	r27, r27
    1288:	6a 0f       	add	r22, r26
    128a:	7b 1f       	adc	r23, r27
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	68 0f       	add	r22, r24
    1292:	71 1d       	adc	r23, r1
    1294:	31 96       	adiw	r30, 0x01	; 1
    1296:	df 01       	movw	r26, r30
    1298:	11 97       	sbiw	r26, 0x01	; 1
    129a:	8c 91       	ld	r24, X
    129c:	80 53       	subi	r24, 0x30	; 48
    129e:	8a 30       	cpi	r24, 0x0A	; 10
    12a0:	50 f3       	brcs	.-44     	; 0x1276 <strtod+0x17a>
    12a2:	14 ff       	sbrs	r17, 4
    12a4:	03 c0       	rjmp	.+6      	; 0x12ac <strtod+0x1b0>
    12a6:	71 95       	neg	r23
    12a8:	61 95       	neg	r22
    12aa:	71 09       	sbc	r23, r1
    12ac:	c6 0f       	add	r28, r22
    12ae:	d7 1f       	adc	r29, r23
    12b0:	11 ff       	sbrs	r17, 1
    12b2:	08 c0       	rjmp	.+16     	; 0x12c4 <strtod+0x1c8>
    12b4:	c1 14       	cp	r12, r1
    12b6:	d1 04       	cpc	r13, r1
    12b8:	29 f0       	breq	.+10     	; 0x12c4 <strtod+0x1c8>
    12ba:	cf 01       	movw	r24, r30
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f6 01       	movw	r30, r12
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	80 83       	st	Z, r24
    12c4:	ca 01       	movw	r24, r20
    12c6:	b9 01       	movw	r22, r18
    12c8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    12cc:	21 2f       	mov	r18, r17
    12ce:	23 70       	andi	r18, 0x03	; 3
    12d0:	23 30       	cpi	r18, 0x03	; 3
    12d2:	19 f0       	breq	.+6      	; 0x12da <strtod+0x1de>
    12d4:	4b 01       	movw	r8, r22
    12d6:	5c 01       	movw	r10, r24
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <strtod+0x1ea>
    12da:	4b 01       	movw	r8, r22
    12dc:	5c 01       	movw	r10, r24
    12de:	b7 fa       	bst	r11, 7
    12e0:	b0 94       	com	r11
    12e2:	b7 f8       	bld	r11, 7
    12e4:	b0 94       	com	r11
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	a9 01       	movw	r20, r18
    12ec:	c5 01       	movw	r24, r10
    12ee:	b4 01       	movw	r22, r8
    12f0:	0e 94 c5 0a 	call	0x158a	; 0x158a <__cmpsf2>
    12f4:	88 23       	and	r24, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <strtod+0x1fe>
    12f8:	3e c0       	rjmp	.+124    	; 0x1376 <strtod+0x27a>
    12fa:	d7 ff       	sbrs	r29, 7
    12fc:	06 c0       	rjmp	.+12     	; 0x130a <strtod+0x20e>
    12fe:	d1 95       	neg	r29
    1300:	c1 95       	neg	r28
    1302:	d1 09       	sbc	r29, r1
    1304:	07 e8       	ldi	r16, 0x87	; 135
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <strtod+0x212>
    130a:	0f e9       	ldi	r16, 0x9F	; 159
    130c:	10 e0       	ldi	r17, 0x00	; 0
    130e:	68 01       	movw	r12, r16
    1310:	f8 e1       	ldi	r31, 0x18	; 24
    1312:	cf 1a       	sub	r12, r31
    1314:	d1 08       	sbc	r13, r1
    1316:	90 e2       	ldi	r25, 0x20	; 32
    1318:	e9 2e       	mov	r14, r25
    131a:	f1 2c       	mov	r15, r1
    131c:	ce 15       	cp	r28, r14
    131e:	df 05       	cpc	r29, r15
    1320:	74 f0       	brlt	.+28     	; 0x133e <strtod+0x242>
    1322:	f8 01       	movw	r30, r16
    1324:	25 91       	lpm	r18, Z+
    1326:	35 91       	lpm	r19, Z+
    1328:	45 91       	lpm	r20, Z+
    132a:	54 91       	lpm	r21, Z
    132c:	c5 01       	movw	r24, r10
    132e:	b4 01       	movw	r22, r8
    1330:	0e 94 9a 04 	call	0x934	; 0x934 <__mulsf3>
    1334:	4b 01       	movw	r8, r22
    1336:	5c 01       	movw	r10, r24
    1338:	ce 19       	sub	r28, r14
    133a:	df 09       	sbc	r29, r15
    133c:	ef cf       	rjmp	.-34     	; 0x131c <strtod+0x220>
    133e:	04 50       	subi	r16, 0x04	; 4
    1340:	11 09       	sbc	r17, r1
    1342:	f5 94       	asr	r15
    1344:	e7 94       	ror	r14
    1346:	0c 15       	cp	r16, r12
    1348:	1d 05       	cpc	r17, r13
    134a:	41 f7       	brne	.-48     	; 0x131c <strtod+0x220>
    134c:	8a 2d       	mov	r24, r10
    134e:	88 0f       	add	r24, r24
    1350:	8b 2d       	mov	r24, r11
    1352:	88 1f       	adc	r24, r24
    1354:	8f 3f       	cpi	r24, 0xFF	; 255
    1356:	49 f0       	breq	.+18     	; 0x136a <strtod+0x26e>
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	c5 01       	movw	r24, r10
    1360:	b4 01       	movw	r22, r8
    1362:	0e 94 c5 0a 	call	0x158a	; 0x158a <__cmpsf2>
    1366:	81 11       	cpse	r24, r1
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <strtod+0x27a>
    136a:	82 e2       	ldi	r24, 0x22	; 34
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <errno+0x1>
    1372:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <errno>
    1376:	c5 01       	movw	r24, r10
    1378:	b4 01       	movw	r22, r8
    137a:	09 c0       	rjmp	.+18     	; 0x138e <strtod+0x292>
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	80 e8       	ldi	r24, 0x80	; 128
    1382:	9f ef       	ldi	r25, 0xFF	; 255
    1384:	04 c0       	rjmp	.+8      	; 0x138e <strtod+0x292>
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	80 ec       	ldi	r24, 0xC0	; 192
    138c:	9f e7       	ldi	r25, 0x7F	; 127
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	ec e0       	ldi	r30, 0x0C	; 12
    1394:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__epilogue_restores__+0xc>

00001398 <__ftoa_engine>:
    1398:	28 30       	cpi	r18, 0x08	; 8
    139a:	08 f0       	brcs	.+2      	; 0x139e <__ftoa_engine+0x6>
    139c:	27 e0       	ldi	r18, 0x07	; 7
    139e:	33 27       	eor	r19, r19
    13a0:	da 01       	movw	r26, r20
    13a2:	99 0f       	add	r25, r25
    13a4:	31 1d       	adc	r19, r1
    13a6:	87 fd       	sbrc	r24, 7
    13a8:	91 60       	ori	r25, 0x01	; 1
    13aa:	00 96       	adiw	r24, 0x00	; 0
    13ac:	61 05       	cpc	r22, r1
    13ae:	71 05       	cpc	r23, r1
    13b0:	39 f4       	brne	.+14     	; 0x13c0 <__ftoa_engine+0x28>
    13b2:	32 60       	ori	r19, 0x02	; 2
    13b4:	2e 5f       	subi	r18, 0xFE	; 254
    13b6:	3d 93       	st	X+, r19
    13b8:	30 e3       	ldi	r19, 0x30	; 48
    13ba:	2a 95       	dec	r18
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <__ftoa_engine+0x1e>
    13be:	08 95       	ret
    13c0:	9f 3f       	cpi	r25, 0xFF	; 255
    13c2:	30 f0       	brcs	.+12     	; 0x13d0 <__ftoa_engine+0x38>
    13c4:	80 38       	cpi	r24, 0x80	; 128
    13c6:	71 05       	cpc	r23, r1
    13c8:	61 05       	cpc	r22, r1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <__ftoa_engine+0x36>
    13cc:	3c 5f       	subi	r19, 0xFC	; 252
    13ce:	3c 5f       	subi	r19, 0xFC	; 252
    13d0:	3d 93       	st	X+, r19
    13d2:	91 30       	cpi	r25, 0x01	; 1
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <__ftoa_engine+0x40>
    13d6:	80 68       	ori	r24, 0x80	; 128
    13d8:	91 1d       	adc	r25, r1
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	1f 93       	push	r17
    13e0:	0f 93       	push	r16
    13e2:	ff 92       	push	r15
    13e4:	ef 92       	push	r14
    13e6:	19 2f       	mov	r17, r25
    13e8:	98 7f       	andi	r25, 0xF8	; 248
    13ea:	96 95       	lsr	r25
    13ec:	e9 2f       	mov	r30, r25
    13ee:	96 95       	lsr	r25
    13f0:	96 95       	lsr	r25
    13f2:	e9 0f       	add	r30, r25
    13f4:	ff 27       	eor	r31, r31
    13f6:	e3 50       	subi	r30, 0x03	; 3
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	99 27       	eor	r25, r25
    13fc:	33 27       	eor	r19, r19
    13fe:	ee 24       	eor	r14, r14
    1400:	ff 24       	eor	r15, r15
    1402:	a7 01       	movw	r20, r14
    1404:	e7 01       	movw	r28, r14
    1406:	05 90       	lpm	r0, Z+
    1408:	08 94       	sec
    140a:	07 94       	ror	r0
    140c:	28 f4       	brcc	.+10     	; 0x1418 <__ftoa_engine+0x80>
    140e:	36 0f       	add	r19, r22
    1410:	e7 1e       	adc	r14, r23
    1412:	f8 1e       	adc	r15, r24
    1414:	49 1f       	adc	r20, r25
    1416:	51 1d       	adc	r21, r1
    1418:	66 0f       	add	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	06 94       	lsr	r0
    1422:	a1 f7       	brne	.-24     	; 0x140c <__ftoa_engine+0x74>
    1424:	05 90       	lpm	r0, Z+
    1426:	07 94       	ror	r0
    1428:	28 f4       	brcc	.+10     	; 0x1434 <__ftoa_engine+0x9c>
    142a:	e7 0e       	add	r14, r23
    142c:	f8 1e       	adc	r15, r24
    142e:	49 1f       	adc	r20, r25
    1430:	56 1f       	adc	r21, r22
    1432:	c1 1d       	adc	r28, r1
    1434:	77 0f       	add	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	66 1f       	adc	r22, r22
    143c:	06 94       	lsr	r0
    143e:	a1 f7       	brne	.-24     	; 0x1428 <__ftoa_engine+0x90>
    1440:	05 90       	lpm	r0, Z+
    1442:	07 94       	ror	r0
    1444:	28 f4       	brcc	.+10     	; 0x1450 <__ftoa_engine+0xb8>
    1446:	f8 0e       	add	r15, r24
    1448:	49 1f       	adc	r20, r25
    144a:	56 1f       	adc	r21, r22
    144c:	c7 1f       	adc	r28, r23
    144e:	d1 1d       	adc	r29, r1
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	66 1f       	adc	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	06 94       	lsr	r0
    145a:	a1 f7       	brne	.-24     	; 0x1444 <__ftoa_engine+0xac>
    145c:	05 90       	lpm	r0, Z+
    145e:	07 94       	ror	r0
    1460:	20 f4       	brcc	.+8      	; 0x146a <__ftoa_engine+0xd2>
    1462:	49 0f       	add	r20, r25
    1464:	56 1f       	adc	r21, r22
    1466:	c7 1f       	adc	r28, r23
    1468:	d8 1f       	adc	r29, r24
    146a:	99 0f       	add	r25, r25
    146c:	66 1f       	adc	r22, r22
    146e:	77 1f       	adc	r23, r23
    1470:	88 1f       	adc	r24, r24
    1472:	06 94       	lsr	r0
    1474:	a9 f7       	brne	.-22     	; 0x1460 <__ftoa_engine+0xc8>
    1476:	84 91       	lpm	r24, Z
    1478:	10 95       	com	r17
    147a:	17 70       	andi	r17, 0x07	; 7
    147c:	41 f0       	breq	.+16     	; 0x148e <__ftoa_engine+0xf6>
    147e:	d6 95       	lsr	r29
    1480:	c7 95       	ror	r28
    1482:	57 95       	ror	r21
    1484:	47 95       	ror	r20
    1486:	f7 94       	ror	r15
    1488:	e7 94       	ror	r14
    148a:	1a 95       	dec	r17
    148c:	c1 f7       	brne	.-16     	; 0x147e <__ftoa_engine+0xe6>
    148e:	e3 ea       	ldi	r30, 0xA3	; 163
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	68 94       	set
    1494:	15 90       	lpm	r1, Z+
    1496:	15 91       	lpm	r17, Z+
    1498:	35 91       	lpm	r19, Z+
    149a:	65 91       	lpm	r22, Z+
    149c:	95 91       	lpm	r25, Z+
    149e:	05 90       	lpm	r0, Z+
    14a0:	7f e2       	ldi	r23, 0x2F	; 47
    14a2:	73 95       	inc	r23
    14a4:	e1 18       	sub	r14, r1
    14a6:	f1 0a       	sbc	r15, r17
    14a8:	43 0b       	sbc	r20, r19
    14aa:	56 0b       	sbc	r21, r22
    14ac:	c9 0b       	sbc	r28, r25
    14ae:	d0 09       	sbc	r29, r0
    14b0:	c0 f7       	brcc	.-16     	; 0x14a2 <__ftoa_engine+0x10a>
    14b2:	e1 0c       	add	r14, r1
    14b4:	f1 1e       	adc	r15, r17
    14b6:	43 1f       	adc	r20, r19
    14b8:	56 1f       	adc	r21, r22
    14ba:	c9 1f       	adc	r28, r25
    14bc:	d0 1d       	adc	r29, r0
    14be:	7e f4       	brtc	.+30     	; 0x14de <__ftoa_engine+0x146>
    14c0:	70 33       	cpi	r23, 0x30	; 48
    14c2:	11 f4       	brne	.+4      	; 0x14c8 <__ftoa_engine+0x130>
    14c4:	8a 95       	dec	r24
    14c6:	e6 cf       	rjmp	.-52     	; 0x1494 <__ftoa_engine+0xfc>
    14c8:	e8 94       	clt
    14ca:	01 50       	subi	r16, 0x01	; 1
    14cc:	30 f0       	brcs	.+12     	; 0x14da <__ftoa_engine+0x142>
    14ce:	08 0f       	add	r16, r24
    14d0:	0a f4       	brpl	.+2      	; 0x14d4 <__ftoa_engine+0x13c>
    14d2:	00 27       	eor	r16, r16
    14d4:	02 17       	cp	r16, r18
    14d6:	08 f4       	brcc	.+2      	; 0x14da <__ftoa_engine+0x142>
    14d8:	20 2f       	mov	r18, r16
    14da:	23 95       	inc	r18
    14dc:	02 2f       	mov	r16, r18
    14de:	7a 33       	cpi	r23, 0x3A	; 58
    14e0:	28 f0       	brcs	.+10     	; 0x14ec <__ftoa_engine+0x154>
    14e2:	79 e3       	ldi	r23, 0x39	; 57
    14e4:	7d 93       	st	X+, r23
    14e6:	2a 95       	dec	r18
    14e8:	e9 f7       	brne	.-6      	; 0x14e4 <__ftoa_engine+0x14c>
    14ea:	10 c0       	rjmp	.+32     	; 0x150c <__ftoa_engine+0x174>
    14ec:	7d 93       	st	X+, r23
    14ee:	2a 95       	dec	r18
    14f0:	89 f6       	brne	.-94     	; 0x1494 <__ftoa_engine+0xfc>
    14f2:	06 94       	lsr	r0
    14f4:	97 95       	ror	r25
    14f6:	67 95       	ror	r22
    14f8:	37 95       	ror	r19
    14fa:	17 95       	ror	r17
    14fc:	17 94       	ror	r1
    14fe:	e1 18       	sub	r14, r1
    1500:	f1 0a       	sbc	r15, r17
    1502:	43 0b       	sbc	r20, r19
    1504:	56 0b       	sbc	r21, r22
    1506:	c9 0b       	sbc	r28, r25
    1508:	d0 09       	sbc	r29, r0
    150a:	98 f0       	brcs	.+38     	; 0x1532 <__ftoa_engine+0x19a>
    150c:	23 95       	inc	r18
    150e:	7e 91       	ld	r23, -X
    1510:	73 95       	inc	r23
    1512:	7a 33       	cpi	r23, 0x3A	; 58
    1514:	08 f0       	brcs	.+2      	; 0x1518 <__ftoa_engine+0x180>
    1516:	70 e3       	ldi	r23, 0x30	; 48
    1518:	7c 93       	st	X, r23
    151a:	20 13       	cpse	r18, r16
    151c:	b8 f7       	brcc	.-18     	; 0x150c <__ftoa_engine+0x174>
    151e:	7e 91       	ld	r23, -X
    1520:	70 61       	ori	r23, 0x10	; 16
    1522:	7d 93       	st	X+, r23
    1524:	30 f0       	brcs	.+12     	; 0x1532 <__ftoa_engine+0x19a>
    1526:	83 95       	inc	r24
    1528:	71 e3       	ldi	r23, 0x31	; 49
    152a:	7d 93       	st	X+, r23
    152c:	70 e3       	ldi	r23, 0x30	; 48
    152e:	2a 95       	dec	r18
    1530:	e1 f7       	brne	.-8      	; 0x152a <__ftoa_engine+0x192>
    1532:	11 24       	eor	r1, r1
    1534:	ef 90       	pop	r14
    1536:	ff 90       	pop	r15
    1538:	0f 91       	pop	r16
    153a:	1f 91       	pop	r17
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	99 27       	eor	r25, r25
    1542:	87 fd       	sbrc	r24, 7
    1544:	90 95       	com	r25
    1546:	08 95       	ret

00001548 <isspace>:
    1548:	91 11       	cpse	r25, r1
    154a:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__ctype_isfalse>
    154e:	80 32       	cpi	r24, 0x20	; 32
    1550:	19 f0       	breq	.+6      	; 0x1558 <isspace+0x10>
    1552:	89 50       	subi	r24, 0x09	; 9
    1554:	85 50       	subi	r24, 0x05	; 5
    1556:	c8 f7       	brcc	.-14     	; 0x154a <isspace+0x2>
    1558:	08 95       	ret

0000155a <strncasecmp_P>:
    155a:	fb 01       	movw	r30, r22
    155c:	dc 01       	movw	r26, r24
    155e:	41 50       	subi	r20, 0x01	; 1
    1560:	50 40       	sbci	r21, 0x00	; 0
    1562:	88 f0       	brcs	.+34     	; 0x1586 <strncasecmp_P+0x2c>
    1564:	8d 91       	ld	r24, X+
    1566:	81 34       	cpi	r24, 0x41	; 65
    1568:	1c f0       	brlt	.+6      	; 0x1570 <strncasecmp_P+0x16>
    156a:	8b 35       	cpi	r24, 0x5B	; 91
    156c:	0c f4       	brge	.+2      	; 0x1570 <strncasecmp_P+0x16>
    156e:	80 5e       	subi	r24, 0xE0	; 224
    1570:	65 91       	lpm	r22, Z+
    1572:	61 34       	cpi	r22, 0x41	; 65
    1574:	1c f0       	brlt	.+6      	; 0x157c <strncasecmp_P+0x22>
    1576:	6b 35       	cpi	r22, 0x5B	; 91
    1578:	0c f4       	brge	.+2      	; 0x157c <strncasecmp_P+0x22>
    157a:	60 5e       	subi	r22, 0xE0	; 224
    157c:	86 1b       	sub	r24, r22
    157e:	61 11       	cpse	r22, r1
    1580:	71 f3       	breq	.-36     	; 0x155e <strncasecmp_P+0x4>
    1582:	99 0b       	sbc	r25, r25
    1584:	08 95       	ret
    1586:	88 1b       	sub	r24, r24
    1588:	fc cf       	rjmp	.-8      	; 0x1582 <strncasecmp_P+0x28>

0000158a <__cmpsf2>:
    158a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__fp_cmp>
    158e:	08 f4       	brcc	.+2      	; 0x1592 <__cmpsf2+0x8>
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	08 95       	ret

00001594 <__fp_cmp>:
    1594:	99 0f       	add	r25, r25
    1596:	00 08       	sbc	r0, r0
    1598:	55 0f       	add	r21, r21
    159a:	aa 0b       	sbc	r26, r26
    159c:	e0 e8       	ldi	r30, 0x80	; 128
    159e:	fe ef       	ldi	r31, 0xFE	; 254
    15a0:	16 16       	cp	r1, r22
    15a2:	17 06       	cpc	r1, r23
    15a4:	e8 07       	cpc	r30, r24
    15a6:	f9 07       	cpc	r31, r25
    15a8:	c0 f0       	brcs	.+48     	; 0x15da <__fp_cmp+0x46>
    15aa:	12 16       	cp	r1, r18
    15ac:	13 06       	cpc	r1, r19
    15ae:	e4 07       	cpc	r30, r20
    15b0:	f5 07       	cpc	r31, r21
    15b2:	98 f0       	brcs	.+38     	; 0x15da <__fp_cmp+0x46>
    15b4:	62 1b       	sub	r22, r18
    15b6:	73 0b       	sbc	r23, r19
    15b8:	84 0b       	sbc	r24, r20
    15ba:	95 0b       	sbc	r25, r21
    15bc:	39 f4       	brne	.+14     	; 0x15cc <__fp_cmp+0x38>
    15be:	0a 26       	eor	r0, r26
    15c0:	61 f0       	breq	.+24     	; 0x15da <__fp_cmp+0x46>
    15c2:	23 2b       	or	r18, r19
    15c4:	24 2b       	or	r18, r20
    15c6:	25 2b       	or	r18, r21
    15c8:	21 f4       	brne	.+8      	; 0x15d2 <__fp_cmp+0x3e>
    15ca:	08 95       	ret
    15cc:	0a 26       	eor	r0, r26
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <__fp_cmp+0x3e>
    15d0:	a1 40       	sbci	r26, 0x01	; 1
    15d2:	a6 95       	lsr	r26
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	81 1d       	adc	r24, r1
    15d8:	81 1d       	adc	r24, r1
    15da:	08 95       	ret

000015dc <__ctype_isfalse>:
    15dc:	99 27       	eor	r25, r25
    15de:	88 27       	eor	r24, r24

000015e0 <__ctype_istrue>:
    15e0:	08 95       	ret

000015e2 <__muluhisi3>:
    15e2:	0e 94 33 0b 	call	0x1666	; 0x1666 <__umulhisi3>
    15e6:	a5 9f       	mul	r26, r21
    15e8:	90 0d       	add	r25, r0
    15ea:	b4 9f       	mul	r27, r20
    15ec:	90 0d       	add	r25, r0
    15ee:	a4 9f       	mul	r26, r20
    15f0:	80 0d       	add	r24, r0
    15f2:	91 1d       	adc	r25, r1
    15f4:	11 24       	eor	r1, r1
    15f6:	08 95       	ret

000015f8 <__prologue_saves__>:
    15f8:	2f 92       	push	r2
    15fa:	3f 92       	push	r3
    15fc:	4f 92       	push	r4
    15fe:	5f 92       	push	r5
    1600:	6f 92       	push	r6
    1602:	7f 92       	push	r7
    1604:	8f 92       	push	r8
    1606:	9f 92       	push	r9
    1608:	af 92       	push	r10
    160a:	bf 92       	push	r11
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	ca 1b       	sub	r28, r26
    1622:	db 0b       	sbc	r29, r27
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	09 94       	ijmp

00001630 <__epilogue_restores__>:
    1630:	2a 88       	ldd	r2, Y+18	; 0x12
    1632:	39 88       	ldd	r3, Y+17	; 0x11
    1634:	48 88       	ldd	r4, Y+16	; 0x10
    1636:	5f 84       	ldd	r5, Y+15	; 0x0f
    1638:	6e 84       	ldd	r6, Y+14	; 0x0e
    163a:	7d 84       	ldd	r7, Y+13	; 0x0d
    163c:	8c 84       	ldd	r8, Y+12	; 0x0c
    163e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1640:	aa 84       	ldd	r10, Y+10	; 0x0a
    1642:	b9 84       	ldd	r11, Y+9	; 0x09
    1644:	c8 84       	ldd	r12, Y+8	; 0x08
    1646:	df 80       	ldd	r13, Y+7	; 0x07
    1648:	ee 80       	ldd	r14, Y+6	; 0x06
    164a:	fd 80       	ldd	r15, Y+5	; 0x05
    164c:	0c 81       	ldd	r16, Y+4	; 0x04
    164e:	1b 81       	ldd	r17, Y+3	; 0x03
    1650:	aa 81       	ldd	r26, Y+2	; 0x02
    1652:	b9 81       	ldd	r27, Y+1	; 0x01
    1654:	ce 0f       	add	r28, r30
    1656:	d1 1d       	adc	r29, r1
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	ed 01       	movw	r28, r26
    1664:	08 95       	ret

00001666 <__umulhisi3>:
    1666:	a2 9f       	mul	r26, r18
    1668:	b0 01       	movw	r22, r0
    166a:	b3 9f       	mul	r27, r19
    166c:	c0 01       	movw	r24, r0
    166e:	a3 9f       	mul	r26, r19
    1670:	70 0d       	add	r23, r0
    1672:	81 1d       	adc	r24, r1
    1674:	11 24       	eor	r1, r1
    1676:	91 1d       	adc	r25, r1
    1678:	b2 9f       	mul	r27, r18
    167a:	70 0d       	add	r23, r0
    167c:	81 1d       	adc	r24, r1
    167e:	11 24       	eor	r1, r1
    1680:	91 1d       	adc	r25, r1
    1682:	08 95       	ret

00001684 <_exit>:
    1684:	f8 94       	cli

00001686 <__stop_program>:
    1686:	ff cf       	rjmp	.-2      	; 0x1686 <__stop_program>
