
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000020e  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094a  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  00000c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ba  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b3  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_20>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  8e:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "uart.h"


void setup(){
  96:	08 95       	ret

00000098 <main>:
	/*Initialize */
}

int main(void) {
	uart_init(9600);
  98:	60 e8       	ldi	r22, 0x80	; 128
  9a:	75 e2       	ldi	r23, 0x25	; 37
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 82 00 	call	0x104	; 0x104 <uart_init>
	uint8_t data = 'A';
	sei();
  a4:	78 94       	sei
	
    while (1) {
		uart_send_byte(data);
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_send_byte>
	/*Initialize */
}

int main(void) {
	uart_init(9600);
	uint8_t data = 'A';
  ac:	c1 e4       	ldi	r28, 0x41	; 65
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <main+0x1a>
	sei();
	
    while (1) {
		uart_send_byte(data);
		if (data > 'Z'){
			data = 'A';
  b0:	c1 e4       	ldi	r28, 0x41	; 65
		}
		data++;
  b2:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	83 ed       	ldi	r24, 0xD3	; 211
  b8:	90 e3       	ldi	r25, 0x30	; 48
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x22>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x2c>
  c4:	00 00       	nop
	uart_init(9600);
	uint8_t data = 'A';
	sei();
	
    while (1) {
		uart_send_byte(data);
  c6:	8c 2f       	mov	r24, r28
  c8:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_send_byte>
		if (data > 'Z'){
  cc:	cb 35       	cpi	r28, 0x5B	; 91
  ce:	80 f7       	brcc	.-32     	; 0xb0 <main+0x18>
  d0:	f0 cf       	rjmp	.-32     	; 0xb2 <main+0x1a>

000000d2 <__vector_18>:
#include "uart.h"
#define F_CPU 16000000UL

volatile static uint8_t uart_tx_busy = 1;	

ISR(USART_RX_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
	
}
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_20>:

ISR(USART_TX_vect){
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
	uart_tx_busy = 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <uart_init>:

void uart_init(uint32_t baud){
	uint8_t speed = 16;
	
	baud = F_CPU/(speed*baud) - 1;
 104:	dc 01       	movw	r26, r24
 106:	cb 01       	movw	r24, r22
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	aa 1f       	adc	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	aa 1f       	adc	r26, r26
 116:	bb 1f       	adc	r27, r27
 118:	9c 01       	movw	r18, r24
 11a:	ad 01       	movw	r20, r26
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	44 1f       	adc	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	44 1f       	adc	r20, r20
 12a:	55 1f       	adc	r21, r21
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	74 e2       	ldi	r23, 0x24	; 36
 130:	84 ef       	ldi	r24, 0xF4	; 244
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__udivmodsi4>
 138:	ba 01       	movw	r22, r20
 13a:	a9 01       	movw	r20, r18
 13c:	41 50       	subi	r20, 0x01	; 1
 13e:	51 09       	sbc	r21, r1
 140:	61 09       	sbc	r22, r1
 142:	71 09       	sbc	r23, r1
	/*Set baud rate*/
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
 144:	db 01       	movw	r26, r22
 146:	ca 01       	movw	r24, r20
 148:	88 27       	eor	r24, r24
 14a:	9f 70       	andi	r25, 0x0F	; 15
 14c:	aa 27       	eor	r26, r26
 14e:	bb 27       	eor	r27, r27
 150:	89 2f       	mov	r24, r25
 152:	9a 2f       	mov	r25, r26
 154:	ab 2f       	mov	r26, r27
 156:	bb 27       	eor	r27, r27
 158:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
 15c:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
 160:	e1 ec       	ldi	r30, 0xC1	; 193
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 6d       	ori	r24, 0xD8	; 216
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <uart_send_byte>:
}


void uart_send_byte(uint8_t byte){
	while(uart_tx_busy == 0); // while UART is not transmitting
 16c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	99 23       	and	r25, r25
 172:	e1 f3       	breq	.-8      	; 0x16c <uart_send_byte>
	
	uart_tx_busy = 0; 
 174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = byte;				// load byte passed into the function to the buffer
 178:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17c:	08 95       	ret

0000017e <uart_send_array>:
}

void uart_send_array(uint8_t *arr, uint16_t len){
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	for(uint16_t i = 0; i < len; ++i){
 186:	61 15       	cp	r22, r1
 188:	71 05       	cpc	r23, r1
 18a:	51 f0       	breq	.+20     	; 0x1a0 <uart_send_array+0x22>
 18c:	8c 01       	movw	r16, r24
 18e:	ec 01       	movw	r28, r24
 190:	06 0f       	add	r16, r22
 192:	17 1f       	adc	r17, r23
		uart_send_byte(arr[i]);
 194:	89 91       	ld	r24, Y+
 196:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_send_byte>
	uart_tx_busy = 0; 
	UDR0 = byte;				// load byte passed into the function to the buffer
}

void uart_send_array(uint8_t *arr, uint16_t len){
	for(uint16_t i = 0; i < len; ++i){
 19a:	c0 17       	cp	r28, r16
 19c:	d1 07       	cpc	r29, r17
 19e:	d1 f7       	brne	.-12     	; 0x194 <uart_send_array+0x16>
		uart_send_byte(arr[i]);
	}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <uart_send_string>:

void uart_send_string(uint8_t *arr) {
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
 1b0:	89 91       	ld	r24, Y+
 1b2:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_send_byte>
		++i;
	} while(arr[i] != '\0');
 1b6:	88 81       	ld	r24, Y
 1b8:	81 11       	cpse	r24, r1
 1ba:	fa cf       	rjmp	.-12     	; 0x1b0 <uart_send_string+0x6>
	uart_send_byte(arr[i]);
 1bc:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_send_byte>

 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <__udivmodsi4>:
 1c6:	a1 e2       	ldi	r26, 0x21	; 33
 1c8:	1a 2e       	mov	r1, r26
 1ca:	aa 1b       	sub	r26, r26
 1cc:	bb 1b       	sub	r27, r27
 1ce:	fd 01       	movw	r30, r26
 1d0:	0d c0       	rjmp	.+26     	; 0x1ec <__udivmodsi4_ep>

000001d2 <__udivmodsi4_loop>:
 1d2:	aa 1f       	adc	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	ee 1f       	adc	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	a2 17       	cp	r26, r18
 1dc:	b3 07       	cpc	r27, r19
 1de:	e4 07       	cpc	r30, r20
 1e0:	f5 07       	cpc	r31, r21
 1e2:	20 f0       	brcs	.+8      	; 0x1ec <__udivmodsi4_ep>
 1e4:	a2 1b       	sub	r26, r18
 1e6:	b3 0b       	sbc	r27, r19
 1e8:	e4 0b       	sbc	r30, r20
 1ea:	f5 0b       	sbc	r31, r21

000001ec <__udivmodsi4_ep>:
 1ec:	66 1f       	adc	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	88 1f       	adc	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	1a 94       	dec	r1
 1f6:	69 f7       	brne	.-38     	; 0x1d2 <__udivmodsi4_loop>
 1f8:	60 95       	com	r22
 1fa:	70 95       	com	r23
 1fc:	80 95       	com	r24
 1fe:	90 95       	com	r25
 200:	9b 01       	movw	r18, r22
 202:	ac 01       	movw	r20, r24
 204:	bd 01       	movw	r22, r26
 206:	cf 01       	movw	r24, r30
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
