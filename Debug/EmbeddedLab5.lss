
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  0000191a  000019ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000191a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800170  00800170  00001a1e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001340  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac5  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093b  00000000  00000000  00003921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  0000425c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cc  00000000  00000000  00004554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba4  00000000  00000000  00004b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000056c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 22 03 	jmp	0x644	; 0x644 <__vector_18>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_20>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     10b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     11b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     12b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     13b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     14b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     15b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     16b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     17b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     18b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     19b:	3d 27 00                                            ='.

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d8 e0       	ldi	r29, 0x08	; 8
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	ea e1       	ldi	r30, 0x1A	; 26
     1b2:	f9 e1       	ldi	r31, 0x19	; 25
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a0 37       	cpi	r26, 0x70	; 112
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	a0 e7       	ldi	r26, 0x70	; 112
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	af 3f       	cpi	r26, 0xFF	; 255
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <main>
     1d4:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <setup>:
#define MAX518_ADDR 0b01011000
#define DAC0 0x00
#define DAC1 0x01

void setup(uint32_t scl_clock, uint32_t baud){
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
     1dc:	ea e7       	ldi	r30, 0x7A	; 122
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	87 68       	ori	r24, 0x87	; 135
     1e4:	80 83       	st	Z, r24
	ADMUX = 0b00000000;		// clear ADMUX for ADC0 pin 
     1e6:	ec e7       	ldi	r30, 0x7C	; 124
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);	
     1ec:	80 81       	ld	r24, Z
     1ee:	80 64       	ori	r24, 0x40	; 64
     1f0:	80 83       	st	Z, r24
	i2c_init();
     1f2:	0e 94 1f 04 	call	0x83e	; 0x83e <i2c_init>
     1f6:	08 95       	ret

000001f8 <get_adc_value>:
			read_command(uart_get_command());
		}
	}
}

char * get_adc_value(){
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
	ADCSRA |= (1<<ADSC);      // enable a single conversion
     200:	ea e7       	ldi	r30, 0x7A	; 122
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	80 64       	ori	r24, 0x40	; 64
     208:	80 83       	st	Z, r24
	
	while (!(ADCSRA & (1<<ADIF))); // wait for the conversion to be completed		
     20a:	80 81       	ld	r24, Z
     20c:	84 ff       	sbrs	r24, 4
     20e:	fd cf       	rjmp	.-6      	; 0x20a <get_adc_value+0x12>
	
	float result = (ADC * 5.0)/1024;	// convert to float 
     210:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     214:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
	char * buffer = (char* ) malloc(6 * sizeof(char));	
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <malloc>
     220:	ec 01       	movw	r28, r24
	dtostrf(result, 3, 2, buffer); // convert float to string 
     222:	b8 01       	movw	r22, r16
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 b9 05 	call	0xb72	; 0xb72 <__floatunsisf>
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	40 ea       	ldi	r20, 0xA0	; 160
     232:	50 e4       	ldi	r21, 0x40	; 64
     234:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3>
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	40 e8       	ldi	r20, 0x80	; 128
     23e:	5a e3       	ldi	r21, 0x3A	; 58
     240:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3>
     244:	8e 01       	movw	r16, r28
     246:	22 e0       	ldi	r18, 0x02	; 2
     248:	43 e0       	ldi	r20, 0x03	; 3
     24a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <dtostrf>

	ADCSRA |= (1<<ADIF);		// reset AD complete flag for next conversion. 
     24e:	ea e7       	ldi	r30, 0x7A	; 122
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	80 61       	ori	r24, 0x10	; 16
     256:	80 83       	st	Z, r24
	
	return buffer; 
}
     258:	ce 01       	movw	r24, r28
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <print_adc_value>:

void print_adc_value(char * buffer){
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	ec 01       	movw	r28, r24
	uart_send_string("V = ");
     26a:	87 e4       	ldi	r24, 0x47	; 71
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 bb 03 	call	0x776	; 0x776 <uart_send_string>
	uart_send_string(buffer);
     272:	ce 01       	movw	r24, r28
     274:	0e 94 bb 03 	call	0x776	; 0x776 <uart_send_string>
	uart_send_byte('\n');
     278:	8a e0       	ldi	r24, 0x0A	; 10
     27a:	0e 94 b2 03 	call	0x764	; 0x764 <uart_send_byte>
	
	free(buffer); 
     27e:	ce 01       	movw	r24, r28
     280:	0e 94 b7 07 	call	0xf6e	; 0xf6e <free>
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <set_dac_output>:
	}
	
	free(command);
}

void set_dac_output(uint8_t dac, uint8_t voltage){
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	c8 2f       	mov	r28, r24
     290:	d6 2f       	mov	r29, r22
	if(dac != 1 && dac != 0){
     292:	82 30       	cpi	r24, 0x02	; 2
     294:	20 f0       	brcs	.+8      	; 0x29e <set_dac_output+0x14>
		uart_send_string("DAC must either be 0 or 1");
     296:	8c e4       	ldi	r24, 0x4C	; 76
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 bb 03 	call	0x776	; 0x776 <uart_send_string>
	}
	//if(voltage < 0 || voltage > 5){
	//	uart_send_string("Voltage must be bounded between 0 and 5");
	//}
	
	i2c_start(MAX518_ADDR | I2C_WRITE);     // send start signal to MAX518
     29e:	88 e5       	ldi	r24, 0x58	; 88
     2a0:	0e 94 28 04 	call	0x850	; 0x850 <i2c_start>
	i2c_write(dac);                        // write to DAC0
     2a4:	8c 2f       	mov	r24, r28
     2a6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <i2c_write>
	i2c_write(voltage);                      // write voltage to dac0
     2aa:	8d 2f       	mov	r24, r29
     2ac:	0e 94 7e 04 	call	0x8fc	; 0x8fc <i2c_write>
	i2c_stop();
     2b0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <i2c_stop>
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <gen_wave_form>:

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
     2ba:	2f 92       	push	r2
     2bc:	3f 92       	push	r3
     2be:	4f 92       	push	r4
     2c0:	5f 92       	push	r5
     2c2:	6f 92       	push	r6
     2c4:	7f 92       	push	r7
     2c6:	8f 92       	push	r8
     2c8:	9f 92       	push	r9
     2ca:	af 92       	push	r10
     2cc:	bf 92       	push	r11
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	2e 97       	sbiw	r28, 0x0e	; 14
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	68 2e       	mov	r6, r24
     2f0:	69 83       	std	Y+1, r22	; 0x01
     2f2:	4d 83       	std	Y+5, r20	; 0x05
	uart_send_byte('W');
     2f4:	87 e5       	ldi	r24, 0x57	; 87
     2f6:	0e 94 b2 03 	call	0x764	; 0x764 <uart_send_byte>
	int i = 0; 
	double dt = 1000000.0 / freq / 64 - 300;
     2fa:	29 81       	ldd	r18, Y+1	; 0x01
     2fc:	62 2f       	mov	r22, r18
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 bb 05 	call	0xb76	; 0xb76 <__floatsisf>
     308:	9b 01       	movw	r18, r22
     30a:	ac 01       	movw	r20, r24
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	74 e2       	ldi	r23, 0x24	; 36
     310:	84 e7       	ldi	r24, 0x74	; 116
     312:	99 e4       	ldi	r25, 0x49	; 73
     314:	0e 94 18 05 	call	0xa30	; 0xa30 <__divsf3>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 e8       	ldi	r20, 0x80	; 128
     31e:	5c e3       	ldi	r21, 0x3C	; 60
     320:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	46 e9       	ldi	r20, 0x96	; 150
     32a:	53 e4       	ldi	r21, 0x43	; 67
     32c:	0e 94 a6 04 	call	0x94c	; 0x94c <__subsf3>
     330:	69 87       	std	Y+9, r22	; 0x09
     332:	7a 87       	std	Y+10, r23	; 0x0a
     334:	8b 87       	std	Y+11, r24	; 0x0b
     336:	9c 87       	std	Y+12, r25	; 0x0c

	while( i < cycles){
     338:	9d 81       	ldd	r25, Y+5	; 0x05
     33a:	89 2f       	mov	r24, r25
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	98 87       	std	Y+8, r25	; 0x08
     340:	8f 83       	std	Y+7, r24	; 0x07
     342:	18 16       	cp	r1, r24
     344:	19 06       	cpc	r1, r25
     346:	0c f4       	brge	.+2      	; 0x34a <gen_wave_form+0x90>
     348:	a8 c0       	rjmp	.+336    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     34a:	bd c0       	rjmp	.+378    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
		for(int i = 0; i < 64; ++i){
			uint8_t voltage = wave_form[i];
     34c:	ed 85       	ldd	r30, Y+13	; 0x0d
     34e:	fe 85       	ldd	r31, Y+14	; 0x0e
     350:	61 91       	ld	r22, Z+
     352:	fe 87       	std	Y+14, r31	; 0x0e
     354:	ed 87       	std	Y+13, r30	; 0x0d
			set_dac_output(dac,voltage);
     356:	86 2d       	mov	r24, r6
     358:	0e 94 45 01 	call	0x28a	; 0x28a <set_dac_output>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     35c:	2b ea       	ldi	r18, 0xAB	; 171
     35e:	3a ea       	ldi	r19, 0xAA	; 170
     360:	4a ea       	ldi	r20, 0xAA	; 170
     362:	50 e4       	ldi	r21, 0x40	; 64
     364:	c7 01       	movw	r24, r14
     366:	b6 01       	movw	r22, r12
     368:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3>
     36c:	4b 01       	movw	r8, r22
     36e:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e8       	ldi	r20, 0x80	; 128
     376:	5f e3       	ldi	r21, 0x3F	; 63
     378:	0e 94 13 05 	call	0xa26	; 0xa26 <__cmpsf2>
     37c:	88 23       	and	r24, r24
     37e:	0c f4       	brge	.+2      	; 0x382 <gen_wave_form+0xc8>
     380:	76 c0       	rjmp	.+236    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e8       	ldi	r20, 0x80	; 128
     388:	50 e4       	ldi	r21, 0x40	; 64
     38a:	c7 01       	movw	r24, r14
     38c:	b6 01       	movw	r22, r12
     38e:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3>
     392:	69 83       	std	Y+1, r22	; 0x01
     394:	7a 83       	std	Y+2, r23	; 0x02
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	3f ef       	ldi	r19, 0xFF	; 255
     39e:	4f e7       	ldi	r20, 0x7F	; 127
     3a0:	57 e4       	ldi	r21, 0x47	; 71
     3a2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__gesf2>
     3a6:	18 16       	cp	r1, r24
     3a8:	0c f0       	brlt	.+2      	; 0x3ac <gen_wave_form+0xf2>
     3aa:	47 c0       	rjmp	.+142    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	{
		_delay_ms(__us / 1000.0);
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	4a e7       	ldi	r20, 0x7A	; 122
     3b2:	54 e4       	ldi	r21, 0x44	; 68
     3b4:	c7 01       	movw	r24, r14
     3b6:	b6 01       	movw	r22, r12
     3b8:	0e 94 18 05 	call	0xa30	; 0xa30 <__divsf3>
     3bc:	69 83       	std	Y+1, r22	; 0x01
     3be:	7a 83       	std	Y+2, r23	; 0x02
     3c0:	8b 83       	std	Y+3, r24	; 0x03
     3c2:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	4a e7       	ldi	r20, 0x7A	; 122
     3ca:	55 e4       	ldi	r21, 0x45	; 69
     3cc:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3>
     3d0:	4b 01       	movw	r8, r22
     3d2:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e8       	ldi	r20, 0x80	; 128
     3da:	5f e3       	ldi	r21, 0x3F	; 63
     3dc:	0e 94 13 05 	call	0xa26	; 0xa26 <__cmpsf2>
     3e0:	88 23       	and	r24, r24
     3e2:	2c f1       	brlt	.+74     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		__ticks = 1;
	else if (__tmp > 65535)
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	3f ef       	ldi	r19, 0xFF	; 255
     3e8:	4f e7       	ldi	r20, 0x7F	; 127
     3ea:	57 e4       	ldi	r21, 0x47	; 71
     3ec:	c5 01       	movw	r24, r10
     3ee:	b4 01       	movw	r22, r8
     3f0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__gesf2>
     3f4:	18 16       	cp	r1, r24
     3f6:	b4 f4       	brge	.+44     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	40 e2       	ldi	r20, 0x20	; 32
     3fe:	51 e4       	ldi	r21, 0x41	; 65
     400:	69 81       	ldd	r22, Y+1	; 0x01
     402:	7a 81       	ldd	r23, Y+2	; 0x02
     404:	8b 81       	ldd	r24, Y+3	; 0x03
     406:	9c 81       	ldd	r25, Y+4	; 0x04
     408:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3>
     40c:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixunssfsi>
		while(__ticks)
     410:	61 15       	cp	r22, r1
     412:	71 05       	cpc	r23, r1
     414:	69 f1       	breq	.+90     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     416:	c2 01       	movw	r24, r4
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     41c:	61 50       	subi	r22, 0x01	; 1
     41e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     420:	d1 f7       	brne	.-12     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     422:	26 c0       	rjmp	.+76     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     424:	c5 01       	movw	r24, r10
     426:	b4 01       	movw	r22, r8
     428:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixunssfsi>
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	72 2d       	mov	r23, r2
     432:	cb 01       	movw	r24, r22
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     438:	1b c0       	rjmp	.+54     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	4f e7       	ldi	r20, 0x7F	; 127
     440:	53 e4       	ldi	r21, 0x43	; 67
     442:	c5 01       	movw	r24, r10
     444:	b4 01       	movw	r22, r8
     446:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__gesf2>
     44a:	18 16       	cp	r1, r24
     44c:	54 f4       	brge	.+20     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     44e:	69 81       	ldd	r22, Y+1	; 0x01
     450:	7a 81       	ldd	r23, Y+2	; 0x02
     452:	8b 81       	ldd	r24, Y+3	; 0x03
     454:	9c 81       	ldd	r25, Y+4	; 0x04
     456:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixunssfsi>
     45a:	cb 01       	movw	r24, r22
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     460:	0a c0       	rjmp	.+20     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     462:	c5 01       	movw	r24, r10
     464:	b4 01       	movw	r22, r8
     466:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixunssfsi>
     46a:	76 2e       	mov	r7, r22
     46c:	01 c0       	rjmp	.+2      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     46e:	73 2c       	mov	r7, r3
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     470:	87 2d       	mov	r24, r7
     472:	8a 95       	dec	r24
     474:	f1 f7       	brne	.-4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
	uart_send_byte('W');
	int i = 0; 
	double dt = 1000000.0 / freq / 64 - 300;

	while( i < cycles){
		for(int i = 0; i < 64; ++i){
     476:	ed 85       	ldd	r30, Y+13	; 0x0d
     478:	fe 85       	ldd	r31, Y+14	; 0x0e
     47a:	0e 17       	cp	r16, r30
     47c:	1f 07       	cpc	r17, r31
     47e:	09 f0       	breq	.+2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     480:	65 cf       	rjmp	.-310    	; 0x34c <gen_wave_form+0x92>
			uint8_t voltage = wave_form[i];
			set_dac_output(dac,voltage);
			_delay_us(dt);

		}
		++i;
     482:	2d 81       	ldd	r18, Y+5	; 0x05
     484:	3e 81       	ldd	r19, Y+6	; 0x06
     486:	2f 5f       	subi	r18, 0xFF	; 255
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	3e 83       	std	Y+6, r19	; 0x06
     48c:	2d 83       	std	Y+5, r18	; 0x05
void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
	uart_send_byte('W');
	int i = 0; 
	double dt = 1000000.0 / freq / 64 - 300;

	while( i < cycles){
     48e:	8f 81       	ldd	r24, Y+7	; 0x07
     490:	98 85       	ldd	r25, Y+8	; 0x08
     492:	28 17       	cp	r18, r24
     494:	39 07       	cpc	r19, r25
     496:	71 f4       	brne	.+28     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
     498:	16 c0       	rjmp	.+44     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     49a:	1e 82       	std	Y+6, r1	; 0x06
     49c:	1d 82       	std	Y+5, r1	; 0x05
     49e:	07 e4       	ldi	r16, 0x47	; 71
     4a0:	11 e0       	ldi	r17, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f0 e9       	ldi	r31, 0x90	; 144
     4a6:	4f 2e       	mov	r4, r31
     4a8:	55 24       	eor	r5, r5
     4aa:	53 94       	inc	r5
     4ac:	f0 2d       	mov	r31, r0
     4ae:	33 24       	eor	r3, r3
     4b0:	33 94       	inc	r3

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4b2:	21 2c       	mov	r2, r1
     4b4:	e7 e0       	ldi	r30, 0x07	; 7
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	c9 84       	ldd	r12, Y+9	; 0x09
     4ba:	da 84       	ldd	r13, Y+10	; 0x0a
     4bc:	eb 84       	ldd	r14, Y+11	; 0x0b
     4be:	fc 84       	ldd	r15, Y+12	; 0x0c
     4c0:	fe 87       	std	Y+14, r31	; 0x0e
     4c2:	ed 87       	std	Y+13, r30	; 0x0d
     4c4:	43 cf       	rjmp	.-378    	; 0x34c <gen_wave_form+0x92>
			_delay_us(dt);

		}
		++i;
	}
     4c6:	2e 96       	adiw	r28, 0x0e	; 14
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	bf 90       	pop	r11
     4e4:	af 90       	pop	r10
     4e6:	9f 90       	pop	r9
     4e8:	8f 90       	pop	r8
     4ea:	7f 90       	pop	r7
     4ec:	6f 90       	pop	r6
     4ee:	5f 90       	pop	r5
     4f0:	4f 90       	pop	r4
     4f2:	3f 90       	pop	r3
     4f4:	2f 90       	pop	r2
     4f6:	08 95       	ret

000004f8 <read_command>:
	uart_send_string(buffer);
	uart_send_byte('\n');
	
	free(buffer); 
}
void read_command(char * command) {
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	00 d0       	rcall	.+0      	; 0x506 <read_command+0xe>
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	8c 01       	movw	r16, r24
	char delim[] = ",";
     50c:	8c e2       	ldi	r24, 0x2C	; 44
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	9a 83       	std	Y+2, r25	; 0x02
     512:	89 83       	std	Y+1, r24	; 0x01

	char * token = strtok(command, delim);
     514:	be 01       	movw	r22, r28
     516:	6f 5f       	subi	r22, 0xFF	; 255
     518:	7f 4f       	sbci	r23, 0xFF	; 255
     51a:	c8 01       	movw	r24, r16
     51c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <strtok>
	if(token[1] == 'G'){
     520:	fc 01       	movw	r30, r24
     522:	81 81       	ldd	r24, Z+1	; 0x01
     524:	87 34       	cpi	r24, 0x47	; 71
     526:	29 f4       	brne	.+10     	; 0x532 <read_command+0x3a>
		print_adc_value(get_adc_value());
     528:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <get_adc_value>
     52c:	0e 94 32 01 	call	0x264	; 0x264 <print_adc_value>
     530:	49 c0       	rjmp	.+146    	; 0x5c4 <read_command+0xcc>
	} else if(token[1] == 'W') {
     532:	87 35       	cpi	r24, 0x57	; 87
     534:	19 f5       	brne	.+70     	; 0x57c <read_command+0x84>
		uint8_t dac = atoi(strtok(NULL, delim));
     536:	be 01       	movw	r22, r28
     538:	6f 5f       	subi	r22, 0xFF	; 255
     53a:	7f 4f       	sbci	r23, 0xFF	; 255
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 62 08 	call	0x10c4	; 0x10c4 <strtok>
     544:	0e 94 44 08 	call	0x1088	; 0x1088 <atoi>
     548:	f8 2e       	mov	r15, r24
		uint8_t freq = atoi(strtok(NULL, delim));
     54a:	be 01       	movw	r22, r28
     54c:	6f 5f       	subi	r22, 0xFF	; 255
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 62 08 	call	0x10c4	; 0x10c4 <strtok>
     558:	0e 94 44 08 	call	0x1088	; 0x1088 <atoi>
     55c:	e8 2e       	mov	r14, r24
		uint8_t cycles = atoi(strtok(NULL, delim));
     55e:	be 01       	movw	r22, r28
     560:	6f 5f       	subi	r22, 0xFF	; 255
     562:	7f 4f       	sbci	r23, 0xFF	; 255
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 62 08 	call	0x10c4	; 0x10c4 <strtok>
     56c:	0e 94 44 08 	call	0x1088	; 0x1088 <atoi>
	
		gen_wave_form(dac, freq, cycles);
     570:	48 2f       	mov	r20, r24
     572:	6e 2d       	mov	r22, r14
     574:	8f 2d       	mov	r24, r15
     576:	0e 94 5d 01 	call	0x2ba	; 0x2ba <gen_wave_form>
     57a:	24 c0       	rjmp	.+72     	; 0x5c4 <read_command+0xcc>
	} else if(token[1] == 'S') {
     57c:	83 35       	cpi	r24, 0x53	; 83
     57e:	f9 f4       	brne	.+62     	; 0x5be <read_command+0xc6>
		uint8_t dac = atoi(strtok(NULL, delim));
     580:	be 01       	movw	r22, r28
     582:	6f 5f       	subi	r22, 0xFF	; 255
     584:	7f 4f       	sbci	r23, 0xFF	; 255
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <strtok>
     58e:	0e 94 44 08 	call	0x1088	; 0x1088 <atoi>
     592:	f8 2e       	mov	r15, r24
		float voltage = atof(strtok(NULL, delim));
     594:	be 01       	movw	r22, r28
     596:	6f 5f       	subi	r22, 0xFF	; 255
     598:	7f 4f       	sbci	r23, 0xFF	; 255
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <strtok>
     5a2:	0e 94 40 08 	call	0x1080	; 0x1080 <atof>
		set_dac_output(dac, 51*voltage);
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	4c e4       	ldi	r20, 0x4C	; 76
     5ac:	52 e4       	ldi	r21, 0x42	; 66
     5ae:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3>
     5b2:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixunssfsi>
     5b6:	8f 2d       	mov	r24, r15
     5b8:	0e 94 45 01 	call	0x28a	; 0x28a <set_dac_output>
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <read_command+0xcc>
	} else {
		uart_send_byte('X');
     5be:	88 e5       	ldi	r24, 0x58	; 88
     5c0:	0e 94 b2 03 	call	0x764	; 0x764 <uart_send_byte>
	}
	
	free(command);
     5c4:	c8 01       	movw	r24, r16
     5c6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <free>
}
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	08 95       	ret

000005dc <main>:
	ADMUX |= (1<<REFS0);	
	i2c_init();

}

int main(void) {
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	29 97       	sbiw	r28, 0x09	; 9
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
	char str[] = "Started!";
     5f0:	89 e0       	ldi	r24, 0x09	; 9
     5f2:	e6 e6       	ldi	r30, 0x66	; 102
     5f4:	f1 e0       	ldi	r31, 0x01	; 1
     5f6:	de 01       	movw	r26, r28
     5f8:	11 96       	adiw	r26, 0x01	; 1
     5fa:	01 90       	ld	r0, Z+
     5fc:	0d 92       	st	X+, r0
     5fe:	8a 95       	dec	r24
     600:	e1 f7       	brne	.-8      	; 0x5fa <main+0x1e>
	setup(100000, 9600);
     602:	20 e8       	ldi	r18, 0x80	; 128
     604:	35 e2       	ldi	r19, 0x25	; 37
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	60 ea       	ldi	r22, 0xA0	; 160
     60c:	76 e8       	ldi	r23, 0x86	; 134
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setup>
	uart_init(9600);
     616:	60 e8       	ldi	r22, 0x80	; 128
     618:	75 e2       	ldi	r23, 0x25	; 37
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 77 03 	call	0x6ee	; 0x6ee <uart_init>
	sei();
     622:	78 94       	sei

	//get_adc_value();  // initialize adc for faster future computations. 

	uart_send_string(str);
     624:	ce 01       	movw	r24, r28
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	0e 94 bb 03 	call	0x776	; 0x776 <uart_send_string>
	uart_send_byte('\n');
     62c:	8a e0       	ldi	r24, 0x0A	; 10
     62e:	0e 94 b2 03 	call	0x764	; 0x764 <uart_send_byte>

	while (1) {	
		if(uart_string_complete()){
     632:	0e 94 74 03 	call	0x6e8	; 0x6e8 <uart_string_complete>
     636:	88 23       	and	r24, r24
     638:	e1 f3       	breq	.-8      	; 0x632 <main+0x56>
			read_command(uart_get_command());
     63a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <uart_get_command>
     63e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <read_command>
     642:	f7 cf       	rjmp	.-18     	; 0x632 <main+0x56>

00000644 <__vector_18>:

volatile static uint8_t uart_tx_busy = 1;
volatile static uint8_t uart_fetch_complete = 0;		// when the buffer has reached a '\n' char flag set to 1. once the string has been read from flag set to 0. 
UARTBuffer uart_buffer; 

ISR(USART_RX_vect){
     644:	1f 92       	push	r1
     646:	0f 92       	push	r0
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	0f 92       	push	r0
     64c:	11 24       	eor	r1, r1
     64e:	2f 93       	push	r18
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
     654:	af 93       	push	r26
     656:	bf 93       	push	r27
     658:	ef 93       	push	r30
     65a:	ff 93       	push	r31
	if (UDR0 == '\n' || UDR0 == '\r') { // if a newline or carriage return is received
     65c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     660:	8a 30       	cpi	r24, 0x0A	; 10
     662:	21 f0       	breq	.+8      	; 0x66c <__vector_18+0x28>
     664:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     668:	8d 30       	cpi	r24, 0x0D	; 13
     66a:	21 f4       	brne	.+8      	; 0x674 <__vector_18+0x30>
		uart_fetch_complete = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__data_end>
     672:	14 c0       	rjmp	.+40     	; 0x69c <__vector_18+0x58>
	} else {
		uart_buffer.buffer[uart_buffer.head] = UDR0;			 // read in the UDR0 register
     674:	e5 ef       	ldi	r30, 0xF5	; 245
     676:	f1 e0       	ldi	r31, 0x01	; 1
     678:	80 81       	ld	r24, Z
     67a:	91 81       	ldd	r25, Z+1	; 0x01
     67c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     680:	dc 01       	movw	r26, r24
     682:	ad 58       	subi	r26, 0x8D	; 141
     684:	be 4f       	sbci	r27, 0xFE	; 254
     686:	2c 93       	st	X, r18
		uart_buffer.head++;
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	80 83       	st	Z, r24
		uart_buffer.size++;
     68e:	e3 ef       	ldi	r30, 0xF3	; 243
     690:	f1 e0       	ldi	r31, 0x01	; 1
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	91 83       	std	Z+1, r25	; 0x01
     69a:	80 83       	st	Z, r24
	}
	
	if (uart_buffer.head >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
     69c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <uart_buffer+0x82>
     6a0:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <uart_buffer+0x83>
     6a4:	80 38       	cpi	r24, 0x80	; 128
     6a6:	91 05       	cpc	r25, r1
     6a8:	20 f0       	brcs	.+8      	; 0x6b2 <__vector_18+0x6e>
		uart_buffer.head = 0;
     6aa:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <uart_buffer+0x83>
     6ae:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <uart_buffer+0x82>
	}
	
}
     6b2:	ff 91       	pop	r31
     6b4:	ef 91       	pop	r30
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	2f 91       	pop	r18
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <__vector_20>:

ISR(USART_TX_vect){
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	8f 93       	push	r24
	uart_tx_busy = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     6dc:	8f 91       	pop	r24
     6de:	0f 90       	pop	r0
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	0f 90       	pop	r0
     6e4:	1f 90       	pop	r1
     6e6:	18 95       	reti

000006e8 <uart_string_complete>:

uint8_t uart_string_complete(){
	return uart_fetch_complete;
     6e8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
}
     6ec:	08 95       	ret

000006ee <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	aa 1f       	adc	r26, r26
     6f8:	bb 1f       	adc	r27, r27
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	aa 1f       	adc	r26, r26
     700:	bb 1f       	adc	r27, r27
     702:	9c 01       	movw	r18, r24
     704:	ad 01       	movw	r20, r26
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	44 1f       	adc	r20, r20
     70c:	55 1f       	adc	r21, r21
     70e:	22 0f       	add	r18, r18
     710:	33 1f       	adc	r19, r19
     712:	44 1f       	adc	r20, r20
     714:	55 1f       	adc	r21, r21
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	74 e2       	ldi	r23, 0x24	; 36
     71a:	84 ef       	ldi	r24, 0xF4	; 244
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 dd 06 	call	0xdba	; 0xdba <__udivmodsi4>
     722:	ba 01       	movw	r22, r20
     724:	a9 01       	movw	r20, r18
     726:	41 50       	subi	r20, 0x01	; 1
     728:	51 09       	sbc	r21, r1
     72a:	61 09       	sbc	r22, r1
     72c:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
     72e:	db 01       	movw	r26, r22
     730:	ca 01       	movw	r24, r20
     732:	88 27       	eor	r24, r24
     734:	9f 70       	andi	r25, 0x0F	; 15
     736:	aa 27       	eor	r26, r26
     738:	bb 27       	eor	r27, r27
     73a:	89 2f       	mov	r24, r25
     73c:	9a 2f       	mov	r25, r26
     73e:	ab 2f       	mov	r26, r27
     740:	bb 27       	eor	r27, r27
     742:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
     746:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
     74a:	e1 ec       	ldi	r30, 0xC1	; 193
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	88 6d       	ori	r24, 0xD8	; 216
     752:	80 83       	st	Z, r24
	
	/* Initialize Objects */
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};		
     754:	e3 e7       	ldi	r30, 0x73	; 115
     756:	f1 e0       	ldi	r31, 0x01	; 1
     758:	86 e8       	ldi	r24, 0x86	; 134
     75a:	df 01       	movw	r26, r30
     75c:	1d 92       	st	X+, r1
     75e:	8a 95       	dec	r24
     760:	e9 f7       	brne	.-6      	; 0x75c <uart_init+0x6e>
     762:	08 95       	ret

00000764 <uart_send_byte>:
}


void uart_send_byte(char data){
	while(uart_tx_busy == 0); // while UART is not transmitting
     764:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     768:	99 23       	and	r25, r25
     76a:	e1 f3       	breq	.-8      	; 0x764 <uart_send_byte>
	
	uart_tx_busy = 0; 
     76c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = data;				// load byte passed into the function to the uart buffer
     770:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     774:	08 95       	ret

00000776 <uart_send_string>:
}

void uart_send_string(char *arr) {
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
     77c:	89 91       	ld	r24, Y+
     77e:	0e 94 b2 03 	call	0x764	; 0x764 <uart_send_byte>
		i++;
	} while(arr[i] != '\0');
     782:	88 81       	ld	r24, Y
     784:	81 11       	cpse	r24, r1
     786:	fa cf       	rjmp	.-12     	; 0x77c <uart_send_string+0x6>
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <uart_get_buffer_size>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
     78e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <uart_buffer+0x80>
     792:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <uart_buffer+0x81>
     796:	08 95       	ret

00000798 <uart_read_buffer>:
	command[i] = '\0';
	return command; 
}

uint8_t uart_read_buffer(void){
	uint8_t data = uart_buffer.buffer[uart_buffer.tail];		// pull the data out of the buffer at the tail.
     798:	e7 ef       	ldi	r30, 0xF7	; 247
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	20 81       	ld	r18, Z
     79e:	31 81       	ldd	r19, Z+1	; 0x01
     7a0:	d9 01       	movw	r26, r18
     7a2:	ad 58       	subi	r26, 0x8D	; 141
     7a4:	be 4f       	sbci	r27, 0xFE	; 254
     7a6:	8c 91       	ld	r24, X
	uart_buffer.tail++;								// increment the position of the tail
     7a8:	2f 5f       	subi	r18, 0xFF	; 255
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	31 83       	std	Z+1, r19	; 0x01
     7ae:	20 83       	st	Z, r18
	uart_buffer.size--; 							// decrement the size of the queue.
     7b0:	e3 ef       	ldi	r30, 0xF3	; 243
     7b2:	f1 e0       	ldi	r31, 0x01	; 1
     7b4:	40 81       	ld	r20, Z
     7b6:	51 81       	ldd	r21, Z+1	; 0x01
     7b8:	41 50       	subi	r20, 0x01	; 1
     7ba:	51 09       	sbc	r21, r1
     7bc:	51 83       	std	Z+1, r21	; 0x01
     7be:	40 83       	st	Z, r20

	if(uart_buffer.tail >= MAX_BUFFER_SIZE){		// reading has gone past the buffers size wrap the tail to the start.
     7c0:	20 38       	cpi	r18, 0x80	; 128
     7c2:	31 05       	cpc	r19, r1
     7c4:	20 f0       	brcs	.+8      	; 0x7ce <uart_read_buffer+0x36>
		uart_buffer.tail = 0;
     7c6:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <uart_buffer+0x85>
     7ca:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <uart_buffer+0x84>
	}
	
	return data;
     7ce:	08 95       	ret

000007d0 <uart_get_command>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}

char * uart_get_command(void) {
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
	uart_fetch_complete = 0; 
     7de:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <__data_end>
		i++;
	} while(arr[i] != '\0');
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     7e2:	00 91 f3 01 	lds	r16, 0x01F3	; 0x8001f3 <uart_buffer+0x80>
     7e6:	10 91 f4 01 	lds	r17, 0x01F4	; 0x8001f4 <uart_buffer+0x81>
}

char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
     7ea:	c8 01       	movw	r24, r16
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	0e 94 1f 07 	call	0xe3e	; 0xe3e <malloc>
     7f2:	7c 01       	movw	r14, r24
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     7f4:	01 2b       	or	r16, r17
     7f6:	a9 f0       	breq	.+42     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     7f8:	c0 e0       	ldi	r28, 0x00	; 0
		i++;
	} while(arr[i] != '\0');
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     7fa:	0f 2e       	mov	r0, r31
     7fc:	f3 ef       	ldi	r31, 0xF3	; 243
     7fe:	cf 2e       	mov	r12, r31
     800:	f1 e0       	ldi	r31, 0x01	; 1
     802:	df 2e       	mov	r13, r31
     804:	f0 2d       	mov	r31, r0
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
     806:	87 01       	movw	r16, r14
     808:	0c 0f       	add	r16, r28
     80a:	11 1d       	adc	r17, r1
     80c:	0e 94 cc 03 	call	0x798	; 0x798 <uart_read_buffer>
     810:	f8 01       	movw	r30, r16
     812:	80 83       	st	Z, r24
		++i; 
     814:	cf 5f       	subi	r28, 0xFF	; 255
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     816:	f6 01       	movw	r30, r12
     818:	80 81       	ld	r24, Z
     81a:	91 81       	ldd	r25, Z+1	; 0x01
     81c:	89 2b       	or	r24, r25
     81e:	99 f7       	brne	.-26     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     820:	01 c0       	rjmp	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>

char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
     822:	c0 e0       	ldi	r28, 0x00	; 0
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
		++i; 
	}
	command[i] = '\0';
     824:	f7 01       	movw	r30, r14
     826:	ec 0f       	add	r30, r28
     828:	f1 1d       	adc	r31, r1
     82a:	10 82       	st	Z, r1
	return command; 
}
     82c:	c7 01       	movw	r24, r14
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	08 95       	ret

0000083e <i2c_init>:
*************************************************************************/
void i2c_init()
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     83e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLK) - 16)/2;  /* must be > 10 for stable operation */
     842:	88 e4       	ldi	r24, 0x48	; 72
     844:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  TWCR = (1<<TWEN);
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     84e:	08 95       	ret

00000850 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     850:	94 ea       	ldi	r25, 0xA4	; 164
     852:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     856:	ec eb       	ldi	r30, 0xBC	; 188
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	90 81       	ld	r25, Z
     85c:	99 23       	and	r25, r25
     85e:	ec f7       	brge	.-6      	; 0x85a <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     860:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     864:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     866:	98 30       	cpi	r25, 0x08	; 8
     868:	11 f0       	breq	.+4      	; 0x86e <i2c_start+0x1e>
     86a:	90 31       	cpi	r25, 0x10	; 16
     86c:	a1 f4       	brne	.+40     	; 0x896 <i2c_start+0x46>

	// send device address
	TWDR = address;
     86e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     872:	84 e8       	ldi	r24, 0x84	; 132
     874:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     878:	ec eb       	ldi	r30, 0xBC	; 188
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	88 23       	and	r24, r24
     880:	ec f7       	brge	.-6      	; 0x87c <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     882:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     886:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     888:	98 31       	cpi	r25, 0x18	; 24
     88a:	39 f0       	breq	.+14     	; 0x89a <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 34       	cpi	r25, 0x40	; 64
     890:	29 f4       	brne	.+10     	; 0x89c <i2c_start+0x4c>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	08 95       	ret
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     89a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     89c:	08 95       	ret

0000089e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
    uint8_t   twst;

    while ( 1 ) {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     8a2:	ec eb       	ldi	r30, 0xBC	; 188
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     8a8:	a9 eb       	ldi	r26, 0xB9	; 185
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     8ac:	cb eb       	ldi	r28, 0xBB	; 187
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     8b0:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     8b2:	44 e9       	ldi	r20, 0x94	; 148
{
    uint8_t   twst;

    while ( 1 ) {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     8b4:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     8b6:	90 81       	ld	r25, Z
     8b8:	99 23       	and	r25, r25
     8ba:	ec f7       	brge	.-6      	; 0x8b6 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     8bc:	9c 91       	ld	r25, X
     8be:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     8c0:	98 30       	cpi	r25, 0x08	; 8
     8c2:	11 f0       	breq	.+4      	; 0x8c8 <i2c_start_wait+0x2a>
     8c4:	90 31       	cpi	r25, 0x10	; 16
     8c6:	b1 f7       	brne	.-20     	; 0x8b4 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
     8c8:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     8ca:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     8cc:	90 81       	ld	r25, Z
     8ce:	99 23       	and	r25, r25
     8d0:	ec f7       	brge	.-6      	; 0x8cc <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     8d2:	9c 91       	ld	r25, X
     8d4:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     8d6:	90 32       	cpi	r25, 0x20	; 32
     8d8:	11 f0       	breq	.+4      	; 0x8de <i2c_start_wait+0x40>
     8da:	98 35       	cpi	r25, 0x58	; 88
     8dc:	29 f4       	brne	.+10     	; 0x8e8 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     8de:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     8e0:	90 81       	ld	r25, Z
     8e2:	94 fd       	sbrc	r25, 4
     8e4:	fd cf       	rjmp	.-6      	; 0x8e0 <i2c_start_wait+0x42>
     8e6:	e6 cf       	rjmp	.-52     	; 0x8b4 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     8ee:	0e 94 28 04 	call	0x850	; 0x850 <i2c_start>

}/* i2c_rep_start */
     8f2:	08 95       	ret

000008f4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     8f4:	84 e9       	ldi	r24, 0x94	; 148
     8f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     8fa:	08 95       	ret

000008fc <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     8fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     900:	84 e8       	ldi	r24, 0x84	; 132
     902:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while((TWCR & (1<<TWINT)) == 0);
     906:	ec eb       	ldi	r30, 0xBC	; 188
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	88 23       	and	r24, r24
     90e:	ec f7       	brge	.-6      	; 0x90a <__stack+0xb>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     910:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     914:	98 7f       	andi	r25, 0xF8	; 248
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	98 32       	cpi	r25, 0x28	; 40
     91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0x1f>
     91c:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     91e:	08 95       	ret

00000920 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     920:	84 ec       	ldi	r24, 0xC4	; 196
     922:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
     926:	ec eb       	ldi	r30, 0xBC	; 188
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	88 23       	and	r24, r24
     92e:	ec f7       	brge	.-6      	; 0x92a <i2c_readAck+0xa>

    return TWDR;
     930:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
     934:	08 95       	ret

00000936 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     936:	84 e8       	ldi	r24, 0x84	; 132
     938:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     93c:	ec eb       	ldi	r30, 0xBC	; 188
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	88 23       	and	r24, r24
     944:	ec f7       	brge	.-6      	; 0x940 <i2c_readNak+0xa>
	
    return TWDR;
     946:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
     94a:	08 95       	ret

0000094c <__subsf3>:
     94c:	50 58       	subi	r21, 0x80	; 128

0000094e <__addsf3>:
     94e:	bb 27       	eor	r27, r27
     950:	aa 27       	eor	r26, r26
     952:	0e 94 be 04 	call	0x97c	; 0x97c <__addsf3x>
     956:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_round>
     95a:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_pscA>
     95e:	38 f0       	brcs	.+14     	; 0x96e <__addsf3+0x20>
     960:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_pscB>
     964:	20 f0       	brcs	.+8      	; 0x96e <__addsf3+0x20>
     966:	39 f4       	brne	.+14     	; 0x976 <__addsf3+0x28>
     968:	9f 3f       	cpi	r25, 0xFF	; 255
     96a:	19 f4       	brne	.+6      	; 0x972 <__addsf3+0x24>
     96c:	26 f4       	brtc	.+8      	; 0x976 <__addsf3+0x28>
     96e:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_nan>
     972:	0e f4       	brtc	.+2      	; 0x976 <__addsf3+0x28>
     974:	e0 95       	com	r30
     976:	e7 fb       	bst	r30, 7
     978:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_inf>

0000097c <__addsf3x>:
     97c:	e9 2f       	mov	r30, r25
     97e:	0e 94 42 06 	call	0xc84	; 0xc84 <__fp_split3>
     982:	58 f3       	brcs	.-42     	; 0x95a <__addsf3+0xc>
     984:	ba 17       	cp	r27, r26
     986:	62 07       	cpc	r22, r18
     988:	73 07       	cpc	r23, r19
     98a:	84 07       	cpc	r24, r20
     98c:	95 07       	cpc	r25, r21
     98e:	20 f0       	brcs	.+8      	; 0x998 <__addsf3x+0x1c>
     990:	79 f4       	brne	.+30     	; 0x9b0 <__addsf3x+0x34>
     992:	a6 f5       	brtc	.+104    	; 0x9fc <__addsf3x+0x80>
     994:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_zero>
     998:	0e f4       	brtc	.+2      	; 0x99c <__addsf3x+0x20>
     99a:	e0 95       	com	r30
     99c:	0b 2e       	mov	r0, r27
     99e:	ba 2f       	mov	r27, r26
     9a0:	a0 2d       	mov	r26, r0
     9a2:	0b 01       	movw	r0, r22
     9a4:	b9 01       	movw	r22, r18
     9a6:	90 01       	movw	r18, r0
     9a8:	0c 01       	movw	r0, r24
     9aa:	ca 01       	movw	r24, r20
     9ac:	a0 01       	movw	r20, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	ff 27       	eor	r31, r31
     9b2:	59 1b       	sub	r21, r25
     9b4:	99 f0       	breq	.+38     	; 0x9dc <__addsf3x+0x60>
     9b6:	59 3f       	cpi	r21, 0xF9	; 249
     9b8:	50 f4       	brcc	.+20     	; 0x9ce <__addsf3x+0x52>
     9ba:	50 3e       	cpi	r21, 0xE0	; 224
     9bc:	68 f1       	brcs	.+90     	; 0xa18 <__addsf3x+0x9c>
     9be:	1a 16       	cp	r1, r26
     9c0:	f0 40       	sbci	r31, 0x00	; 0
     9c2:	a2 2f       	mov	r26, r18
     9c4:	23 2f       	mov	r18, r19
     9c6:	34 2f       	mov	r19, r20
     9c8:	44 27       	eor	r20, r20
     9ca:	58 5f       	subi	r21, 0xF8	; 248
     9cc:	f3 cf       	rjmp	.-26     	; 0x9b4 <__addsf3x+0x38>
     9ce:	46 95       	lsr	r20
     9d0:	37 95       	ror	r19
     9d2:	27 95       	ror	r18
     9d4:	a7 95       	ror	r26
     9d6:	f0 40       	sbci	r31, 0x00	; 0
     9d8:	53 95       	inc	r21
     9da:	c9 f7       	brne	.-14     	; 0x9ce <__addsf3x+0x52>
     9dc:	7e f4       	brtc	.+30     	; 0x9fc <__addsf3x+0x80>
     9de:	1f 16       	cp	r1, r31
     9e0:	ba 0b       	sbc	r27, r26
     9e2:	62 0b       	sbc	r22, r18
     9e4:	73 0b       	sbc	r23, r19
     9e6:	84 0b       	sbc	r24, r20
     9e8:	ba f0       	brmi	.+46     	; 0xa18 <__addsf3x+0x9c>
     9ea:	91 50       	subi	r25, 0x01	; 1
     9ec:	a1 f0       	breq	.+40     	; 0xa16 <__addsf3x+0x9a>
     9ee:	ff 0f       	add	r31, r31
     9f0:	bb 1f       	adc	r27, r27
     9f2:	66 1f       	adc	r22, r22
     9f4:	77 1f       	adc	r23, r23
     9f6:	88 1f       	adc	r24, r24
     9f8:	c2 f7       	brpl	.-16     	; 0x9ea <__addsf3x+0x6e>
     9fa:	0e c0       	rjmp	.+28     	; 0xa18 <__addsf3x+0x9c>
     9fc:	ba 0f       	add	r27, r26
     9fe:	62 1f       	adc	r22, r18
     a00:	73 1f       	adc	r23, r19
     a02:	84 1f       	adc	r24, r20
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__addsf3x+0x9c>
     a06:	87 95       	ror	r24
     a08:	77 95       	ror	r23
     a0a:	67 95       	ror	r22
     a0c:	b7 95       	ror	r27
     a0e:	f7 95       	ror	r31
     a10:	9e 3f       	cpi	r25, 0xFE	; 254
     a12:	08 f0       	brcs	.+2      	; 0xa16 <__addsf3x+0x9a>
     a14:	b0 cf       	rjmp	.-160    	; 0x976 <__addsf3+0x28>
     a16:	93 95       	inc	r25
     a18:	88 0f       	add	r24, r24
     a1a:	08 f0       	brcs	.+2      	; 0xa1e <__addsf3x+0xa2>
     a1c:	99 27       	eor	r25, r25
     a1e:	ee 0f       	add	r30, r30
     a20:	97 95       	ror	r25
     a22:	87 95       	ror	r24
     a24:	08 95       	ret

00000a26 <__cmpsf2>:
     a26:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_cmp>
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <__cmpsf2+0x8>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	08 95       	ret

00000a30 <__divsf3>:
     a30:	0e 94 2c 05 	call	0xa58	; 0xa58 <__divsf3x>
     a34:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_round>
     a38:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_pscB>
     a3c:	58 f0       	brcs	.+22     	; 0xa54 <__divsf3+0x24>
     a3e:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_pscA>
     a42:	40 f0       	brcs	.+16     	; 0xa54 <__divsf3+0x24>
     a44:	29 f4       	brne	.+10     	; 0xa50 <__divsf3+0x20>
     a46:	5f 3f       	cpi	r21, 0xFF	; 255
     a48:	29 f0       	breq	.+10     	; 0xa54 <__divsf3+0x24>
     a4a:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_inf>
     a4e:	51 11       	cpse	r21, r1
     a50:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_szero>
     a54:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_nan>

00000a58 <__divsf3x>:
     a58:	0e 94 42 06 	call	0xc84	; 0xc84 <__fp_split3>
     a5c:	68 f3       	brcs	.-38     	; 0xa38 <__divsf3+0x8>

00000a5e <__divsf3_pse>:
     a5e:	99 23       	and	r25, r25
     a60:	b1 f3       	breq	.-20     	; 0xa4e <__divsf3+0x1e>
     a62:	55 23       	and	r21, r21
     a64:	91 f3       	breq	.-28     	; 0xa4a <__divsf3+0x1a>
     a66:	95 1b       	sub	r25, r21
     a68:	55 0b       	sbc	r21, r21
     a6a:	bb 27       	eor	r27, r27
     a6c:	aa 27       	eor	r26, r26
     a6e:	62 17       	cp	r22, r18
     a70:	73 07       	cpc	r23, r19
     a72:	84 07       	cpc	r24, r20
     a74:	38 f0       	brcs	.+14     	; 0xa84 <__divsf3_pse+0x26>
     a76:	9f 5f       	subi	r25, 0xFF	; 255
     a78:	5f 4f       	sbci	r21, 0xFF	; 255
     a7a:	22 0f       	add	r18, r18
     a7c:	33 1f       	adc	r19, r19
     a7e:	44 1f       	adc	r20, r20
     a80:	aa 1f       	adc	r26, r26
     a82:	a9 f3       	breq	.-22     	; 0xa6e <__divsf3_pse+0x10>
     a84:	35 d0       	rcall	.+106    	; 0xaf0 <__divsf3_pse+0x92>
     a86:	0e 2e       	mov	r0, r30
     a88:	3a f0       	brmi	.+14     	; 0xa98 <__divsf3_pse+0x3a>
     a8a:	e0 e8       	ldi	r30, 0x80	; 128
     a8c:	32 d0       	rcall	.+100    	; 0xaf2 <__divsf3_pse+0x94>
     a8e:	91 50       	subi	r25, 0x01	; 1
     a90:	50 40       	sbci	r21, 0x00	; 0
     a92:	e6 95       	lsr	r30
     a94:	00 1c       	adc	r0, r0
     a96:	ca f7       	brpl	.-14     	; 0xa8a <__divsf3_pse+0x2c>
     a98:	2b d0       	rcall	.+86     	; 0xaf0 <__divsf3_pse+0x92>
     a9a:	fe 2f       	mov	r31, r30
     a9c:	29 d0       	rcall	.+82     	; 0xaf0 <__divsf3_pse+0x92>
     a9e:	66 0f       	add	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	88 1f       	adc	r24, r24
     aa4:	bb 1f       	adc	r27, r27
     aa6:	26 17       	cp	r18, r22
     aa8:	37 07       	cpc	r19, r23
     aaa:	48 07       	cpc	r20, r24
     aac:	ab 07       	cpc	r26, r27
     aae:	b0 e8       	ldi	r27, 0x80	; 128
     ab0:	09 f0       	breq	.+2      	; 0xab4 <__divsf3_pse+0x56>
     ab2:	bb 0b       	sbc	r27, r27
     ab4:	80 2d       	mov	r24, r0
     ab6:	bf 01       	movw	r22, r30
     ab8:	ff 27       	eor	r31, r31
     aba:	93 58       	subi	r25, 0x83	; 131
     abc:	5f 4f       	sbci	r21, 0xFF	; 255
     abe:	3a f0       	brmi	.+14     	; 0xace <__divsf3_pse+0x70>
     ac0:	9e 3f       	cpi	r25, 0xFE	; 254
     ac2:	51 05       	cpc	r21, r1
     ac4:	78 f0       	brcs	.+30     	; 0xae4 <__divsf3_pse+0x86>
     ac6:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_inf>
     aca:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_szero>
     ace:	5f 3f       	cpi	r21, 0xFF	; 255
     ad0:	e4 f3       	brlt	.-8      	; 0xaca <__divsf3_pse+0x6c>
     ad2:	98 3e       	cpi	r25, 0xE8	; 232
     ad4:	d4 f3       	brlt	.-12     	; 0xaca <__divsf3_pse+0x6c>
     ad6:	86 95       	lsr	r24
     ad8:	77 95       	ror	r23
     ada:	67 95       	ror	r22
     adc:	b7 95       	ror	r27
     ade:	f7 95       	ror	r31
     ae0:	9f 5f       	subi	r25, 0xFF	; 255
     ae2:	c9 f7       	brne	.-14     	; 0xad6 <__divsf3_pse+0x78>
     ae4:	88 0f       	add	r24, r24
     ae6:	91 1d       	adc	r25, r1
     ae8:	96 95       	lsr	r25
     aea:	87 95       	ror	r24
     aec:	97 f9       	bld	r25, 7
     aee:	08 95       	ret
     af0:	e1 e0       	ldi	r30, 0x01	; 1
     af2:	66 0f       	add	r22, r22
     af4:	77 1f       	adc	r23, r23
     af6:	88 1f       	adc	r24, r24
     af8:	bb 1f       	adc	r27, r27
     afa:	62 17       	cp	r22, r18
     afc:	73 07       	cpc	r23, r19
     afe:	84 07       	cpc	r24, r20
     b00:	ba 07       	cpc	r27, r26
     b02:	20 f0       	brcs	.+8      	; 0xb0c <__divsf3_pse+0xae>
     b04:	62 1b       	sub	r22, r18
     b06:	73 0b       	sbc	r23, r19
     b08:	84 0b       	sbc	r24, r20
     b0a:	ba 0b       	sbc	r27, r26
     b0c:	ee 1f       	adc	r30, r30
     b0e:	88 f7       	brcc	.-30     	; 0xaf2 <__divsf3_pse+0x94>
     b10:	e0 95       	com	r30
     b12:	08 95       	ret

00000b14 <__fixunssfsi>:
     b14:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fp_splitA>
     b18:	88 f0       	brcs	.+34     	; 0xb3c <__fixunssfsi+0x28>
     b1a:	9f 57       	subi	r25, 0x7F	; 127
     b1c:	98 f0       	brcs	.+38     	; 0xb44 <__fixunssfsi+0x30>
     b1e:	b9 2f       	mov	r27, r25
     b20:	99 27       	eor	r25, r25
     b22:	b7 51       	subi	r27, 0x17	; 23
     b24:	b0 f0       	brcs	.+44     	; 0xb52 <__fixunssfsi+0x3e>
     b26:	e1 f0       	breq	.+56     	; 0xb60 <__fixunssfsi+0x4c>
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	88 1f       	adc	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	1a f0       	brmi	.+6      	; 0xb38 <__fixunssfsi+0x24>
     b32:	ba 95       	dec	r27
     b34:	c9 f7       	brne	.-14     	; 0xb28 <__fixunssfsi+0x14>
     b36:	14 c0       	rjmp	.+40     	; 0xb60 <__fixunssfsi+0x4c>
     b38:	b1 30       	cpi	r27, 0x01	; 1
     b3a:	91 f0       	breq	.+36     	; 0xb60 <__fixunssfsi+0x4c>
     b3c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_zero>
     b40:	b1 e0       	ldi	r27, 0x01	; 1
     b42:	08 95       	ret
     b44:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_zero>
     b48:	67 2f       	mov	r22, r23
     b4a:	78 2f       	mov	r23, r24
     b4c:	88 27       	eor	r24, r24
     b4e:	b8 5f       	subi	r27, 0xF8	; 248
     b50:	39 f0       	breq	.+14     	; 0xb60 <__fixunssfsi+0x4c>
     b52:	b9 3f       	cpi	r27, 0xF9	; 249
     b54:	cc f3       	brlt	.-14     	; 0xb48 <__fixunssfsi+0x34>
     b56:	86 95       	lsr	r24
     b58:	77 95       	ror	r23
     b5a:	67 95       	ror	r22
     b5c:	b3 95       	inc	r27
     b5e:	d9 f7       	brne	.-10     	; 0xb56 <__fixunssfsi+0x42>
     b60:	3e f4       	brtc	.+14     	; 0xb70 <__fixunssfsi+0x5c>
     b62:	90 95       	com	r25
     b64:	80 95       	com	r24
     b66:	70 95       	com	r23
     b68:	61 95       	neg	r22
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255
     b6c:	8f 4f       	sbci	r24, 0xFF	; 255
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	08 95       	ret

00000b72 <__floatunsisf>:
     b72:	e8 94       	clt
     b74:	09 c0       	rjmp	.+18     	; 0xb88 <__floatsisf+0x12>

00000b76 <__floatsisf>:
     b76:	97 fb       	bst	r25, 7
     b78:	3e f4       	brtc	.+14     	; 0xb88 <__floatsisf+0x12>
     b7a:	90 95       	com	r25
     b7c:	80 95       	com	r24
     b7e:	70 95       	com	r23
     b80:	61 95       	neg	r22
     b82:	7f 4f       	sbci	r23, 0xFF	; 255
     b84:	8f 4f       	sbci	r24, 0xFF	; 255
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	99 23       	and	r25, r25
     b8a:	a9 f0       	breq	.+42     	; 0xbb6 <__floatsisf+0x40>
     b8c:	f9 2f       	mov	r31, r25
     b8e:	96 e9       	ldi	r25, 0x96	; 150
     b90:	bb 27       	eor	r27, r27
     b92:	93 95       	inc	r25
     b94:	f6 95       	lsr	r31
     b96:	87 95       	ror	r24
     b98:	77 95       	ror	r23
     b9a:	67 95       	ror	r22
     b9c:	b7 95       	ror	r27
     b9e:	f1 11       	cpse	r31, r1
     ba0:	f8 cf       	rjmp	.-16     	; 0xb92 <__floatsisf+0x1c>
     ba2:	fa f4       	brpl	.+62     	; 0xbe2 <__floatsisf+0x6c>
     ba4:	bb 0f       	add	r27, r27
     ba6:	11 f4       	brne	.+4      	; 0xbac <__floatsisf+0x36>
     ba8:	60 ff       	sbrs	r22, 0
     baa:	1b c0       	rjmp	.+54     	; 0xbe2 <__floatsisf+0x6c>
     bac:	6f 5f       	subi	r22, 0xFF	; 255
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	8f 4f       	sbci	r24, 0xFF	; 255
     bb2:	9f 4f       	sbci	r25, 0xFF	; 255
     bb4:	16 c0       	rjmp	.+44     	; 0xbe2 <__floatsisf+0x6c>
     bb6:	88 23       	and	r24, r24
     bb8:	11 f0       	breq	.+4      	; 0xbbe <__floatsisf+0x48>
     bba:	96 e9       	ldi	r25, 0x96	; 150
     bbc:	11 c0       	rjmp	.+34     	; 0xbe0 <__floatsisf+0x6a>
     bbe:	77 23       	and	r23, r23
     bc0:	21 f0       	breq	.+8      	; 0xbca <__floatsisf+0x54>
     bc2:	9e e8       	ldi	r25, 0x8E	; 142
     bc4:	87 2f       	mov	r24, r23
     bc6:	76 2f       	mov	r23, r22
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <__floatsisf+0x5e>
     bca:	66 23       	and	r22, r22
     bcc:	71 f0       	breq	.+28     	; 0xbea <__floatsisf+0x74>
     bce:	96 e8       	ldi	r25, 0x86	; 134
     bd0:	86 2f       	mov	r24, r22
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	2a f0       	brmi	.+10     	; 0xbe2 <__floatsisf+0x6c>
     bd8:	9a 95       	dec	r25
     bda:	66 0f       	add	r22, r22
     bdc:	77 1f       	adc	r23, r23
     bde:	88 1f       	adc	r24, r24
     be0:	da f7       	brpl	.-10     	; 0xbd8 <__floatsisf+0x62>
     be2:	88 0f       	add	r24, r24
     be4:	96 95       	lsr	r25
     be6:	87 95       	ror	r24
     be8:	97 f9       	bld	r25, 7
     bea:	08 95       	ret

00000bec <__fp_cmp>:
     bec:	99 0f       	add	r25, r25
     bee:	00 08       	sbc	r0, r0
     bf0:	55 0f       	add	r21, r21
     bf2:	aa 0b       	sbc	r26, r26
     bf4:	e0 e8       	ldi	r30, 0x80	; 128
     bf6:	fe ef       	ldi	r31, 0xFE	; 254
     bf8:	16 16       	cp	r1, r22
     bfa:	17 06       	cpc	r1, r23
     bfc:	e8 07       	cpc	r30, r24
     bfe:	f9 07       	cpc	r31, r25
     c00:	c0 f0       	brcs	.+48     	; 0xc32 <__fp_cmp+0x46>
     c02:	12 16       	cp	r1, r18
     c04:	13 06       	cpc	r1, r19
     c06:	e4 07       	cpc	r30, r20
     c08:	f5 07       	cpc	r31, r21
     c0a:	98 f0       	brcs	.+38     	; 0xc32 <__fp_cmp+0x46>
     c0c:	62 1b       	sub	r22, r18
     c0e:	73 0b       	sbc	r23, r19
     c10:	84 0b       	sbc	r24, r20
     c12:	95 0b       	sbc	r25, r21
     c14:	39 f4       	brne	.+14     	; 0xc24 <__fp_cmp+0x38>
     c16:	0a 26       	eor	r0, r26
     c18:	61 f0       	breq	.+24     	; 0xc32 <__fp_cmp+0x46>
     c1a:	23 2b       	or	r18, r19
     c1c:	24 2b       	or	r18, r20
     c1e:	25 2b       	or	r18, r21
     c20:	21 f4       	brne	.+8      	; 0xc2a <__fp_cmp+0x3e>
     c22:	08 95       	ret
     c24:	0a 26       	eor	r0, r26
     c26:	09 f4       	brne	.+2      	; 0xc2a <__fp_cmp+0x3e>
     c28:	a1 40       	sbci	r26, 0x01	; 1
     c2a:	a6 95       	lsr	r26
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	81 1d       	adc	r24, r1
     c30:	81 1d       	adc	r24, r1
     c32:	08 95       	ret

00000c34 <__fp_inf>:
     c34:	97 f9       	bld	r25, 7
     c36:	9f 67       	ori	r25, 0x7F	; 127
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	08 95       	ret

00000c40 <__fp_nan>:
     c40:	9f ef       	ldi	r25, 0xFF	; 255
     c42:	80 ec       	ldi	r24, 0xC0	; 192
     c44:	08 95       	ret

00000c46 <__fp_pscA>:
     c46:	00 24       	eor	r0, r0
     c48:	0a 94       	dec	r0
     c4a:	16 16       	cp	r1, r22
     c4c:	17 06       	cpc	r1, r23
     c4e:	18 06       	cpc	r1, r24
     c50:	09 06       	cpc	r0, r25
     c52:	08 95       	ret

00000c54 <__fp_pscB>:
     c54:	00 24       	eor	r0, r0
     c56:	0a 94       	dec	r0
     c58:	12 16       	cp	r1, r18
     c5a:	13 06       	cpc	r1, r19
     c5c:	14 06       	cpc	r1, r20
     c5e:	05 06       	cpc	r0, r21
     c60:	08 95       	ret

00000c62 <__fp_round>:
     c62:	09 2e       	mov	r0, r25
     c64:	03 94       	inc	r0
     c66:	00 0c       	add	r0, r0
     c68:	11 f4       	brne	.+4      	; 0xc6e <__fp_round+0xc>
     c6a:	88 23       	and	r24, r24
     c6c:	52 f0       	brmi	.+20     	; 0xc82 <__fp_round+0x20>
     c6e:	bb 0f       	add	r27, r27
     c70:	40 f4       	brcc	.+16     	; 0xc82 <__fp_round+0x20>
     c72:	bf 2b       	or	r27, r31
     c74:	11 f4       	brne	.+4      	; 0xc7a <__fp_round+0x18>
     c76:	60 ff       	sbrs	r22, 0
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <__fp_round+0x20>
     c7a:	6f 5f       	subi	r22, 0xFF	; 255
     c7c:	7f 4f       	sbci	r23, 0xFF	; 255
     c7e:	8f 4f       	sbci	r24, 0xFF	; 255
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	08 95       	ret

00000c84 <__fp_split3>:
     c84:	57 fd       	sbrc	r21, 7
     c86:	90 58       	subi	r25, 0x80	; 128
     c88:	44 0f       	add	r20, r20
     c8a:	55 1f       	adc	r21, r21
     c8c:	59 f0       	breq	.+22     	; 0xca4 <__fp_splitA+0x10>
     c8e:	5f 3f       	cpi	r21, 0xFF	; 255
     c90:	71 f0       	breq	.+28     	; 0xcae <__fp_splitA+0x1a>
     c92:	47 95       	ror	r20

00000c94 <__fp_splitA>:
     c94:	88 0f       	add	r24, r24
     c96:	97 fb       	bst	r25, 7
     c98:	99 1f       	adc	r25, r25
     c9a:	61 f0       	breq	.+24     	; 0xcb4 <__fp_splitA+0x20>
     c9c:	9f 3f       	cpi	r25, 0xFF	; 255
     c9e:	79 f0       	breq	.+30     	; 0xcbe <__fp_splitA+0x2a>
     ca0:	87 95       	ror	r24
     ca2:	08 95       	ret
     ca4:	12 16       	cp	r1, r18
     ca6:	13 06       	cpc	r1, r19
     ca8:	14 06       	cpc	r1, r20
     caa:	55 1f       	adc	r21, r21
     cac:	f2 cf       	rjmp	.-28     	; 0xc92 <__fp_split3+0xe>
     cae:	46 95       	lsr	r20
     cb0:	f1 df       	rcall	.-30     	; 0xc94 <__fp_splitA>
     cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <__fp_splitA+0x30>
     cb4:	16 16       	cp	r1, r22
     cb6:	17 06       	cpc	r1, r23
     cb8:	18 06       	cpc	r1, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	f1 cf       	rjmp	.-30     	; 0xca0 <__fp_splitA+0xc>
     cbe:	86 95       	lsr	r24
     cc0:	71 05       	cpc	r23, r1
     cc2:	61 05       	cpc	r22, r1
     cc4:	08 94       	sec
     cc6:	08 95       	ret

00000cc8 <__fp_zero>:
     cc8:	e8 94       	clt

00000cca <__fp_szero>:
     cca:	bb 27       	eor	r27, r27
     ccc:	66 27       	eor	r22, r22
     cce:	77 27       	eor	r23, r23
     cd0:	cb 01       	movw	r24, r22
     cd2:	97 f9       	bld	r25, 7
     cd4:	08 95       	ret

00000cd6 <__gesf2>:
     cd6:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_cmp>
     cda:	08 f4       	brcc	.+2      	; 0xcde <__gesf2+0x8>
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	08 95       	ret

00000ce0 <__mulsf3>:
     ce0:	0e 94 83 06 	call	0xd06	; 0xd06 <__mulsf3x>
     ce4:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_round>
     ce8:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_pscA>
     cec:	38 f0       	brcs	.+14     	; 0xcfc <__mulsf3+0x1c>
     cee:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_pscB>
     cf2:	20 f0       	brcs	.+8      	; 0xcfc <__mulsf3+0x1c>
     cf4:	95 23       	and	r25, r21
     cf6:	11 f0       	breq	.+4      	; 0xcfc <__mulsf3+0x1c>
     cf8:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_inf>
     cfc:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_nan>
     d00:	11 24       	eor	r1, r1
     d02:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_szero>

00000d06 <__mulsf3x>:
     d06:	0e 94 42 06 	call	0xc84	; 0xc84 <__fp_split3>
     d0a:	70 f3       	brcs	.-36     	; 0xce8 <__mulsf3+0x8>

00000d0c <__mulsf3_pse>:
     d0c:	95 9f       	mul	r25, r21
     d0e:	c1 f3       	breq	.-16     	; 0xd00 <__mulsf3+0x20>
     d10:	95 0f       	add	r25, r21
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	55 1f       	adc	r21, r21
     d16:	62 9f       	mul	r22, r18
     d18:	f0 01       	movw	r30, r0
     d1a:	72 9f       	mul	r23, r18
     d1c:	bb 27       	eor	r27, r27
     d1e:	f0 0d       	add	r31, r0
     d20:	b1 1d       	adc	r27, r1
     d22:	63 9f       	mul	r22, r19
     d24:	aa 27       	eor	r26, r26
     d26:	f0 0d       	add	r31, r0
     d28:	b1 1d       	adc	r27, r1
     d2a:	aa 1f       	adc	r26, r26
     d2c:	64 9f       	mul	r22, r20
     d2e:	66 27       	eor	r22, r22
     d30:	b0 0d       	add	r27, r0
     d32:	a1 1d       	adc	r26, r1
     d34:	66 1f       	adc	r22, r22
     d36:	82 9f       	mul	r24, r18
     d38:	22 27       	eor	r18, r18
     d3a:	b0 0d       	add	r27, r0
     d3c:	a1 1d       	adc	r26, r1
     d3e:	62 1f       	adc	r22, r18
     d40:	73 9f       	mul	r23, r19
     d42:	b0 0d       	add	r27, r0
     d44:	a1 1d       	adc	r26, r1
     d46:	62 1f       	adc	r22, r18
     d48:	83 9f       	mul	r24, r19
     d4a:	a0 0d       	add	r26, r0
     d4c:	61 1d       	adc	r22, r1
     d4e:	22 1f       	adc	r18, r18
     d50:	74 9f       	mul	r23, r20
     d52:	33 27       	eor	r19, r19
     d54:	a0 0d       	add	r26, r0
     d56:	61 1d       	adc	r22, r1
     d58:	23 1f       	adc	r18, r19
     d5a:	84 9f       	mul	r24, r20
     d5c:	60 0d       	add	r22, r0
     d5e:	21 1d       	adc	r18, r1
     d60:	82 2f       	mov	r24, r18
     d62:	76 2f       	mov	r23, r22
     d64:	6a 2f       	mov	r22, r26
     d66:	11 24       	eor	r1, r1
     d68:	9f 57       	subi	r25, 0x7F	; 127
     d6a:	50 40       	sbci	r21, 0x00	; 0
     d6c:	9a f0       	brmi	.+38     	; 0xd94 <__mulsf3_pse+0x88>
     d6e:	f1 f0       	breq	.+60     	; 0xdac <__mulsf3_pse+0xa0>
     d70:	88 23       	and	r24, r24
     d72:	4a f0       	brmi	.+18     	; 0xd86 <__mulsf3_pse+0x7a>
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	bb 1f       	adc	r27, r27
     d7a:	66 1f       	adc	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 1f       	adc	r24, r24
     d80:	91 50       	subi	r25, 0x01	; 1
     d82:	50 40       	sbci	r21, 0x00	; 0
     d84:	a9 f7       	brne	.-22     	; 0xd70 <__mulsf3_pse+0x64>
     d86:	9e 3f       	cpi	r25, 0xFE	; 254
     d88:	51 05       	cpc	r21, r1
     d8a:	80 f0       	brcs	.+32     	; 0xdac <__mulsf3_pse+0xa0>
     d8c:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_inf>
     d90:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_szero>
     d94:	5f 3f       	cpi	r21, 0xFF	; 255
     d96:	e4 f3       	brlt	.-8      	; 0xd90 <__mulsf3_pse+0x84>
     d98:	98 3e       	cpi	r25, 0xE8	; 232
     d9a:	d4 f3       	brlt	.-12     	; 0xd90 <__mulsf3_pse+0x84>
     d9c:	86 95       	lsr	r24
     d9e:	77 95       	ror	r23
     da0:	67 95       	ror	r22
     da2:	b7 95       	ror	r27
     da4:	f7 95       	ror	r31
     da6:	e7 95       	ror	r30
     da8:	9f 5f       	subi	r25, 0xFF	; 255
     daa:	c1 f7       	brne	.-16     	; 0xd9c <__mulsf3_pse+0x90>
     dac:	fe 2b       	or	r31, r30
     dae:	88 0f       	add	r24, r24
     db0:	91 1d       	adc	r25, r1
     db2:	96 95       	lsr	r25
     db4:	87 95       	ror	r24
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret

00000dba <__udivmodsi4>:
     dba:	a1 e2       	ldi	r26, 0x21	; 33
     dbc:	1a 2e       	mov	r1, r26
     dbe:	aa 1b       	sub	r26, r26
     dc0:	bb 1b       	sub	r27, r27
     dc2:	fd 01       	movw	r30, r26
     dc4:	0d c0       	rjmp	.+26     	; 0xde0 <__udivmodsi4_ep>

00000dc6 <__udivmodsi4_loop>:
     dc6:	aa 1f       	adc	r26, r26
     dc8:	bb 1f       	adc	r27, r27
     dca:	ee 1f       	adc	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	a2 17       	cp	r26, r18
     dd0:	b3 07       	cpc	r27, r19
     dd2:	e4 07       	cpc	r30, r20
     dd4:	f5 07       	cpc	r31, r21
     dd6:	20 f0       	brcs	.+8      	; 0xde0 <__udivmodsi4_ep>
     dd8:	a2 1b       	sub	r26, r18
     dda:	b3 0b       	sbc	r27, r19
     ddc:	e4 0b       	sbc	r30, r20
     dde:	f5 0b       	sbc	r31, r21

00000de0 <__udivmodsi4_ep>:
     de0:	66 1f       	adc	r22, r22
     de2:	77 1f       	adc	r23, r23
     de4:	88 1f       	adc	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	1a 94       	dec	r1
     dea:	69 f7       	brne	.-38     	; 0xdc6 <__udivmodsi4_loop>
     dec:	60 95       	com	r22
     dee:	70 95       	com	r23
     df0:	80 95       	com	r24
     df2:	90 95       	com	r25
     df4:	9b 01       	movw	r18, r22
     df6:	ac 01       	movw	r20, r24
     df8:	bd 01       	movw	r22, r26
     dfa:	cf 01       	movw	r24, r30
     dfc:	08 95       	ret

00000dfe <dtostrf>:
     dfe:	ef 92       	push	r14
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	e8 01       	movw	r28, r16
     e0a:	47 fd       	sbrc	r20, 7
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <dtostrf+0x14>
     e0e:	34 e0       	ldi	r19, 0x04	; 4
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <dtostrf+0x16>
     e12:	34 e1       	ldi	r19, 0x14	; 20
     e14:	04 2e       	mov	r0, r20
     e16:	00 0c       	add	r0, r0
     e18:	55 0b       	sbc	r21, r21
     e1a:	57 ff       	sbrs	r21, 7
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <dtostrf+0x26>
     e1e:	51 95       	neg	r21
     e20:	41 95       	neg	r20
     e22:	51 09       	sbc	r21, r1
     e24:	e3 2e       	mov	r14, r19
     e26:	02 2f       	mov	r16, r18
     e28:	24 2f       	mov	r18, r20
     e2a:	ae 01       	movw	r20, r28
     e2c:	0e 94 96 08 	call	0x112c	; 0x112c <dtoa_prf>
     e30:	ce 01       	movw	r24, r28
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ef 90       	pop	r14
     e3c:	08 95       	ret

00000e3e <malloc>:
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	82 30       	cpi	r24, 0x02	; 2
     e48:	91 05       	cpc	r25, r1
     e4a:	10 f4       	brcc	.+4      	; 0xe50 <malloc+0x12>
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <__flp>
     e54:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <__flp+0x1>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	a0 e0       	ldi	r26, 0x00	; 0
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	30 97       	sbiw	r30, 0x00	; 0
     e62:	19 f1       	breq	.+70     	; 0xeaa <malloc+0x6c>
     e64:	40 81       	ld	r20, Z
     e66:	51 81       	ldd	r21, Z+1	; 0x01
     e68:	02 81       	ldd	r16, Z+2	; 0x02
     e6a:	13 81       	ldd	r17, Z+3	; 0x03
     e6c:	48 17       	cp	r20, r24
     e6e:	59 07       	cpc	r21, r25
     e70:	c8 f0       	brcs	.+50     	; 0xea4 <malloc+0x66>
     e72:	84 17       	cp	r24, r20
     e74:	95 07       	cpc	r25, r21
     e76:	69 f4       	brne	.+26     	; 0xe92 <malloc+0x54>
     e78:	10 97       	sbiw	r26, 0x00	; 0
     e7a:	31 f0       	breq	.+12     	; 0xe88 <malloc+0x4a>
     e7c:	12 96       	adiw	r26, 0x02	; 2
     e7e:	0c 93       	st	X, r16
     e80:	12 97       	sbiw	r26, 0x02	; 2
     e82:	13 96       	adiw	r26, 0x03	; 3
     e84:	1c 93       	st	X, r17
     e86:	27 c0       	rjmp	.+78     	; 0xed6 <malloc+0x98>
     e88:	00 93 fb 01 	sts	0x01FB, r16	; 0x8001fb <__flp>
     e8c:	10 93 fc 01 	sts	0x01FC, r17	; 0x8001fc <__flp+0x1>
     e90:	22 c0       	rjmp	.+68     	; 0xed6 <malloc+0x98>
     e92:	21 15       	cp	r18, r1
     e94:	31 05       	cpc	r19, r1
     e96:	19 f0       	breq	.+6      	; 0xe9e <malloc+0x60>
     e98:	42 17       	cp	r20, r18
     e9a:	53 07       	cpc	r21, r19
     e9c:	18 f4       	brcc	.+6      	; 0xea4 <malloc+0x66>
     e9e:	9a 01       	movw	r18, r20
     ea0:	bd 01       	movw	r22, r26
     ea2:	ef 01       	movw	r28, r30
     ea4:	df 01       	movw	r26, r30
     ea6:	f8 01       	movw	r30, r16
     ea8:	db cf       	rjmp	.-74     	; 0xe60 <malloc+0x22>
     eaa:	21 15       	cp	r18, r1
     eac:	31 05       	cpc	r19, r1
     eae:	f9 f0       	breq	.+62     	; 0xeee <malloc+0xb0>
     eb0:	28 1b       	sub	r18, r24
     eb2:	39 0b       	sbc	r19, r25
     eb4:	24 30       	cpi	r18, 0x04	; 4
     eb6:	31 05       	cpc	r19, r1
     eb8:	80 f4       	brcc	.+32     	; 0xeda <malloc+0x9c>
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	9b 81       	ldd	r25, Y+3	; 0x03
     ebe:	61 15       	cp	r22, r1
     ec0:	71 05       	cpc	r23, r1
     ec2:	21 f0       	breq	.+8      	; 0xecc <malloc+0x8e>
     ec4:	fb 01       	movw	r30, r22
     ec6:	93 83       	std	Z+3, r25	; 0x03
     ec8:	82 83       	std	Z+2, r24	; 0x02
     eca:	04 c0       	rjmp	.+8      	; 0xed4 <malloc+0x96>
     ecc:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <__flp+0x1>
     ed0:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <__flp>
     ed4:	fe 01       	movw	r30, r28
     ed6:	32 96       	adiw	r30, 0x02	; 2
     ed8:	44 c0       	rjmp	.+136    	; 0xf62 <malloc+0x124>
     eda:	fe 01       	movw	r30, r28
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	81 93       	st	Z+, r24
     ee2:	91 93       	st	Z+, r25
     ee4:	22 50       	subi	r18, 0x02	; 2
     ee6:	31 09       	sbc	r19, r1
     ee8:	39 83       	std	Y+1, r19	; 0x01
     eea:	28 83       	st	Y, r18
     eec:	3a c0       	rjmp	.+116    	; 0xf62 <malloc+0x124>
     eee:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <__brkval>
     ef2:	30 91 fa 01 	lds	r19, 0x01FA	; 0x8001fa <__brkval+0x1>
     ef6:	23 2b       	or	r18, r19
     ef8:	41 f4       	brne	.+16     	; 0xf0a <malloc+0xcc>
     efa:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__malloc_heap_start>
     efe:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__malloc_heap_start+0x1>
     f02:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <__brkval+0x1>
     f06:	20 93 f9 01 	sts	0x01F9, r18	; 0x8001f9 <__brkval>
     f0a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <__malloc_heap_end>
     f0e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <__malloc_heap_end+0x1>
     f12:	21 15       	cp	r18, r1
     f14:	31 05       	cpc	r19, r1
     f16:	41 f4       	brne	.+16     	; 0xf28 <malloc+0xea>
     f18:	2d b7       	in	r18, 0x3d	; 61
     f1a:	3e b7       	in	r19, 0x3e	; 62
     f1c:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <__malloc_margin>
     f20:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <__malloc_margin+0x1>
     f24:	24 1b       	sub	r18, r20
     f26:	35 0b       	sbc	r19, r21
     f28:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <__brkval>
     f2c:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <__brkval+0x1>
     f30:	e2 17       	cp	r30, r18
     f32:	f3 07       	cpc	r31, r19
     f34:	a0 f4       	brcc	.+40     	; 0xf5e <malloc+0x120>
     f36:	2e 1b       	sub	r18, r30
     f38:	3f 0b       	sbc	r19, r31
     f3a:	28 17       	cp	r18, r24
     f3c:	39 07       	cpc	r19, r25
     f3e:	78 f0       	brcs	.+30     	; 0xf5e <malloc+0x120>
     f40:	ac 01       	movw	r20, r24
     f42:	4e 5f       	subi	r20, 0xFE	; 254
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	24 17       	cp	r18, r20
     f48:	35 07       	cpc	r19, r21
     f4a:	48 f0       	brcs	.+18     	; 0xf5e <malloc+0x120>
     f4c:	4e 0f       	add	r20, r30
     f4e:	5f 1f       	adc	r21, r31
     f50:	50 93 fa 01 	sts	0x01FA, r21	; 0x8001fa <__brkval+0x1>
     f54:	40 93 f9 01 	sts	0x01F9, r20	; 0x8001f9 <__brkval>
     f58:	81 93       	st	Z+, r24
     f5a:	91 93       	st	Z+, r25
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <malloc+0x124>
     f5e:	e0 e0       	ldi	r30, 0x00	; 0
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	cf 01       	movw	r24, r30
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	08 95       	ret

00000f6e <free>:
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	09 f4       	brne	.+2      	; 0xf78 <free+0xa>
     f76:	81 c0       	rjmp	.+258    	; 0x107a <free+0x10c>
     f78:	fc 01       	movw	r30, r24
     f7a:	32 97       	sbiw	r30, 0x02	; 2
     f7c:	13 82       	std	Z+3, r1	; 0x03
     f7e:	12 82       	std	Z+2, r1	; 0x02
     f80:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <__flp>
     f84:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <__flp+0x1>
     f88:	10 97       	sbiw	r26, 0x00	; 0
     f8a:	81 f4       	brne	.+32     	; 0xfac <free+0x3e>
     f8c:	20 81       	ld	r18, Z
     f8e:	31 81       	ldd	r19, Z+1	; 0x01
     f90:	82 0f       	add	r24, r18
     f92:	93 1f       	adc	r25, r19
     f94:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <__brkval>
     f98:	30 91 fa 01 	lds	r19, 0x01FA	; 0x8001fa <__brkval+0x1>
     f9c:	28 17       	cp	r18, r24
     f9e:	39 07       	cpc	r19, r25
     fa0:	51 f5       	brne	.+84     	; 0xff6 <free+0x88>
     fa2:	f0 93 fa 01 	sts	0x01FA, r31	; 0x8001fa <__brkval+0x1>
     fa6:	e0 93 f9 01 	sts	0x01F9, r30	; 0x8001f9 <__brkval>
     faa:	67 c0       	rjmp	.+206    	; 0x107a <free+0x10c>
     fac:	ed 01       	movw	r28, r26
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	ce 17       	cp	r28, r30
     fb4:	df 07       	cpc	r29, r31
     fb6:	40 f4       	brcc	.+16     	; 0xfc8 <free+0x5a>
     fb8:	4a 81       	ldd	r20, Y+2	; 0x02
     fba:	5b 81       	ldd	r21, Y+3	; 0x03
     fbc:	9e 01       	movw	r18, r28
     fbe:	41 15       	cp	r20, r1
     fc0:	51 05       	cpc	r21, r1
     fc2:	f1 f0       	breq	.+60     	; 0x1000 <free+0x92>
     fc4:	ea 01       	movw	r28, r20
     fc6:	f5 cf       	rjmp	.-22     	; 0xfb2 <free+0x44>
     fc8:	d3 83       	std	Z+3, r29	; 0x03
     fca:	c2 83       	std	Z+2, r28	; 0x02
     fcc:	40 81       	ld	r20, Z
     fce:	51 81       	ldd	r21, Z+1	; 0x01
     fd0:	84 0f       	add	r24, r20
     fd2:	95 1f       	adc	r25, r21
     fd4:	c8 17       	cp	r28, r24
     fd6:	d9 07       	cpc	r29, r25
     fd8:	59 f4       	brne	.+22     	; 0xff0 <free+0x82>
     fda:	88 81       	ld	r24, Y
     fdc:	99 81       	ldd	r25, Y+1	; 0x01
     fde:	84 0f       	add	r24, r20
     fe0:	95 1f       	adc	r25, r21
     fe2:	02 96       	adiw	r24, 0x02	; 2
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	9b 81       	ldd	r25, Y+3	; 0x03
     fec:	93 83       	std	Z+3, r25	; 0x03
     fee:	82 83       	std	Z+2, r24	; 0x02
     ff0:	21 15       	cp	r18, r1
     ff2:	31 05       	cpc	r19, r1
     ff4:	29 f4       	brne	.+10     	; 0x1000 <free+0x92>
     ff6:	f0 93 fc 01 	sts	0x01FC, r31	; 0x8001fc <__flp+0x1>
     ffa:	e0 93 fb 01 	sts	0x01FB, r30	; 0x8001fb <__flp>
     ffe:	3d c0       	rjmp	.+122    	; 0x107a <free+0x10c>
    1000:	e9 01       	movw	r28, r18
    1002:	fb 83       	std	Y+3, r31	; 0x03
    1004:	ea 83       	std	Y+2, r30	; 0x02
    1006:	49 91       	ld	r20, Y+
    1008:	59 91       	ld	r21, Y+
    100a:	c4 0f       	add	r28, r20
    100c:	d5 1f       	adc	r29, r21
    100e:	ec 17       	cp	r30, r28
    1010:	fd 07       	cpc	r31, r29
    1012:	61 f4       	brne	.+24     	; 0x102c <free+0xbe>
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	84 0f       	add	r24, r20
    101a:	95 1f       	adc	r25, r21
    101c:	02 96       	adiw	r24, 0x02	; 2
    101e:	e9 01       	movw	r28, r18
    1020:	99 83       	std	Y+1, r25	; 0x01
    1022:	88 83       	st	Y, r24
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	9b 83       	std	Y+3, r25	; 0x03
    102a:	8a 83       	std	Y+2, r24	; 0x02
    102c:	e0 e0       	ldi	r30, 0x00	; 0
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	12 96       	adiw	r26, 0x02	; 2
    1032:	8d 91       	ld	r24, X+
    1034:	9c 91       	ld	r25, X
    1036:	13 97       	sbiw	r26, 0x03	; 3
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	19 f0       	breq	.+6      	; 0x1042 <free+0xd4>
    103c:	fd 01       	movw	r30, r26
    103e:	dc 01       	movw	r26, r24
    1040:	f7 cf       	rjmp	.-18     	; 0x1030 <free+0xc2>
    1042:	8d 91       	ld	r24, X+
    1044:	9c 91       	ld	r25, X
    1046:	11 97       	sbiw	r26, 0x01	; 1
    1048:	9d 01       	movw	r18, r26
    104a:	2e 5f       	subi	r18, 0xFE	; 254
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <__brkval>
    1056:	30 91 fa 01 	lds	r19, 0x01FA	; 0x8001fa <__brkval+0x1>
    105a:	28 17       	cp	r18, r24
    105c:	39 07       	cpc	r19, r25
    105e:	69 f4       	brne	.+26     	; 0x107a <free+0x10c>
    1060:	30 97       	sbiw	r30, 0x00	; 0
    1062:	29 f4       	brne	.+10     	; 0x106e <free+0x100>
    1064:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <__flp+0x1>
    1068:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <__flp>
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <free+0x104>
    106e:	13 82       	std	Z+3, r1	; 0x03
    1070:	12 82       	std	Z+2, r1	; 0x02
    1072:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <__brkval+0x1>
    1076:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <__brkval>
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <atof>:
    1080:	66 27       	eor	r22, r22
    1082:	77 27       	eor	r23, r23
    1084:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <strtod>

00001088 <atoi>:
    1088:	fc 01       	movw	r30, r24
    108a:	88 27       	eor	r24, r24
    108c:	99 27       	eor	r25, r25
    108e:	e8 94       	clt
    1090:	21 91       	ld	r18, Z+
    1092:	20 32       	cpi	r18, 0x20	; 32
    1094:	e9 f3       	breq	.-6      	; 0x1090 <atoi+0x8>
    1096:	29 30       	cpi	r18, 0x09	; 9
    1098:	10 f0       	brcs	.+4      	; 0x109e <atoi+0x16>
    109a:	2e 30       	cpi	r18, 0x0E	; 14
    109c:	c8 f3       	brcs	.-14     	; 0x1090 <atoi+0x8>
    109e:	2b 32       	cpi	r18, 0x2B	; 43
    10a0:	41 f0       	breq	.+16     	; 0x10b2 <atoi+0x2a>
    10a2:	2d 32       	cpi	r18, 0x2D	; 45
    10a4:	39 f4       	brne	.+14     	; 0x10b4 <atoi+0x2c>
    10a6:	68 94       	set
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <atoi+0x2a>
    10aa:	0e 94 8e 08 	call	0x111c	; 0x111c <__mulhi_const_10>
    10ae:	82 0f       	add	r24, r18
    10b0:	91 1d       	adc	r25, r1
    10b2:	21 91       	ld	r18, Z+
    10b4:	20 53       	subi	r18, 0x30	; 48
    10b6:	2a 30       	cpi	r18, 0x0A	; 10
    10b8:	c0 f3       	brcs	.-16     	; 0x10aa <atoi+0x22>
    10ba:	1e f4       	brtc	.+6      	; 0x10c2 <atoi+0x3a>
    10bc:	90 95       	com	r25
    10be:	81 95       	neg	r24
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	08 95       	ret

000010c4 <strtok>:
    10c4:	41 e7       	ldi	r20, 0x71	; 113
    10c6:	51 e0       	ldi	r21, 0x01	; 1
    10c8:	0e 94 67 08 	call	0x10ce	; 0x10ce <strtok_r>
    10cc:	08 95       	ret

000010ce <strtok_r>:
    10ce:	fa 01       	movw	r30, r20
    10d0:	a1 91       	ld	r26, Z+
    10d2:	b0 81       	ld	r27, Z
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	19 f4       	brne	.+6      	; 0x10de <strtok_r+0x10>
    10d8:	10 97       	sbiw	r26, 0x00	; 0
    10da:	e1 f0       	breq	.+56     	; 0x1114 <strtok_r+0x46>
    10dc:	cd 01       	movw	r24, r26
    10de:	dc 01       	movw	r26, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0d 90       	ld	r0, X+
    10e4:	00 20       	and	r0, r0
    10e6:	11 f4       	brne	.+4      	; 0x10ec <strtok_r+0x1e>
    10e8:	c0 01       	movw	r24, r0
    10ea:	13 c0       	rjmp	.+38     	; 0x1112 <strtok_r+0x44>
    10ec:	fb 01       	movw	r30, r22
    10ee:	21 91       	ld	r18, Z+
    10f0:	22 23       	and	r18, r18
    10f2:	19 f0       	breq	.+6      	; 0x10fa <strtok_r+0x2c>
    10f4:	20 15       	cp	r18, r0
    10f6:	d9 f7       	brne	.-10     	; 0x10ee <strtok_r+0x20>
    10f8:	f3 cf       	rjmp	.-26     	; 0x10e0 <strtok_r+0x12>
    10fa:	fb 01       	movw	r30, r22
    10fc:	21 91       	ld	r18, Z+
    10fe:	20 15       	cp	r18, r0
    1100:	19 f4       	brne	.+6      	; 0x1108 <strtok_r+0x3a>
    1102:	1e 92       	st	-X, r1
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <strtok_r+0x46>
    1108:	22 23       	and	r18, r18
    110a:	c1 f7       	brne	.-16     	; 0x10fc <strtok_r+0x2e>
    110c:	0d 90       	ld	r0, X+
    110e:	00 20       	and	r0, r0
    1110:	a1 f7       	brne	.-24     	; 0x10fa <strtok_r+0x2c>
    1112:	d0 01       	movw	r26, r0
    1114:	fa 01       	movw	r30, r20
    1116:	a1 93       	st	Z+, r26
    1118:	b0 83       	st	Z, r27
    111a:	08 95       	ret

0000111c <__mulhi_const_10>:
    111c:	7a e0       	ldi	r23, 0x0A	; 10
    111e:	97 9f       	mul	r25, r23
    1120:	90 2d       	mov	r25, r0
    1122:	87 9f       	mul	r24, r23
    1124:	80 2d       	mov	r24, r0
    1126:	91 0d       	add	r25, r1
    1128:	11 24       	eor	r1, r1
    112a:	08 95       	ret

0000112c <dtoa_prf>:
    112c:	a9 e0       	ldi	r26, 0x09	; 9
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ec e9       	ldi	r30, 0x9C	; 156
    1132:	f8 e0       	ldi	r31, 0x08	; 8
    1134:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__prologue_saves__+0xc>
    1138:	6a 01       	movw	r12, r20
    113a:	12 2f       	mov	r17, r18
    113c:	b0 2e       	mov	r11, r16
    113e:	2b e3       	ldi	r18, 0x3B	; 59
    1140:	20 17       	cp	r18, r16
    1142:	20 f0       	brcs	.+8      	; 0x114c <dtoa_prf+0x20>
    1144:	ff 24       	eor	r15, r15
    1146:	f3 94       	inc	r15
    1148:	f0 0e       	add	r15, r16
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <dtoa_prf+0x24>
    114c:	2c e3       	ldi	r18, 0x3C	; 60
    114e:	f2 2e       	mov	r15, r18
    1150:	0f 2d       	mov	r16, r15
    1152:	27 e0       	ldi	r18, 0x07	; 7
    1154:	ae 01       	movw	r20, r28
    1156:	4f 5f       	subi	r20, 0xFF	; 255
    1158:	5f 4f       	sbci	r21, 0xFF	; 255
    115a:	0e 94 3e 0b 	call	0x167c	; 0x167c <__ftoa_engine>
    115e:	bc 01       	movw	r22, r24
    1160:	49 81       	ldd	r20, Y+1	; 0x01
    1162:	84 2f       	mov	r24, r20
    1164:	89 70       	andi	r24, 0x09	; 9
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	31 f0       	breq	.+12     	; 0x1176 <dtoa_prf+0x4a>
    116a:	e1 fc       	sbrc	r14, 1
    116c:	06 c0       	rjmp	.+12     	; 0x117a <dtoa_prf+0x4e>
    116e:	e0 fe       	sbrs	r14, 0
    1170:	06 c0       	rjmp	.+12     	; 0x117e <dtoa_prf+0x52>
    1172:	90 e2       	ldi	r25, 0x20	; 32
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <dtoa_prf+0x54>
    1176:	9d e2       	ldi	r25, 0x2D	; 45
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <dtoa_prf+0x54>
    117a:	9b e2       	ldi	r25, 0x2B	; 43
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <dtoa_prf+0x54>
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	5e 2d       	mov	r21, r14
    1182:	50 71       	andi	r21, 0x10	; 16
    1184:	43 ff       	sbrs	r20, 3
    1186:	3c c0       	rjmp	.+120    	; 0x1200 <dtoa_prf+0xd4>
    1188:	91 11       	cpse	r25, r1
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <dtoa_prf+0x64>
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <dtoa_prf+0x66>
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	81 17       	cp	r24, r17
    1194:	18 f4       	brcc	.+6      	; 0x119c <dtoa_prf+0x70>
    1196:	21 2f       	mov	r18, r17
    1198:	28 1b       	sub	r18, r24
    119a:	01 c0       	rjmp	.+2      	; 0x119e <dtoa_prf+0x72>
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	51 11       	cpse	r21, r1
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <dtoa_prf+0x8c>
    11a2:	f6 01       	movw	r30, r12
    11a4:	82 2f       	mov	r24, r18
    11a6:	30 e2       	ldi	r19, 0x20	; 32
    11a8:	88 23       	and	r24, r24
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <dtoa_prf+0x86>
    11ac:	31 93       	st	Z+, r19
    11ae:	81 50       	subi	r24, 0x01	; 1
    11b0:	fb cf       	rjmp	.-10     	; 0x11a8 <dtoa_prf+0x7c>
    11b2:	c2 0e       	add	r12, r18
    11b4:	d1 1c       	adc	r13, r1
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	99 23       	and	r25, r25
    11ba:	29 f0       	breq	.+10     	; 0x11c6 <dtoa_prf+0x9a>
    11bc:	d6 01       	movw	r26, r12
    11be:	9c 93       	st	X, r25
    11c0:	f6 01       	movw	r30, r12
    11c2:	31 96       	adiw	r30, 0x01	; 1
    11c4:	6f 01       	movw	r12, r30
    11c6:	c6 01       	movw	r24, r12
    11c8:	03 96       	adiw	r24, 0x03	; 3
    11ca:	e2 fe       	sbrs	r14, 2
    11cc:	0a c0       	rjmp	.+20     	; 0x11e2 <dtoa_prf+0xb6>
    11ce:	3e e4       	ldi	r19, 0x4E	; 78
    11d0:	d6 01       	movw	r26, r12
    11d2:	3c 93       	st	X, r19
    11d4:	41 e4       	ldi	r20, 0x41	; 65
    11d6:	11 96       	adiw	r26, 0x01	; 1
    11d8:	4c 93       	st	X, r20
    11da:	11 97       	sbiw	r26, 0x01	; 1
    11dc:	12 96       	adiw	r26, 0x02	; 2
    11de:	3c 93       	st	X, r19
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <dtoa_prf+0xc2>
    11e2:	3e e6       	ldi	r19, 0x6E	; 110
    11e4:	f6 01       	movw	r30, r12
    11e6:	30 83       	st	Z, r19
    11e8:	41 e6       	ldi	r20, 0x61	; 97
    11ea:	41 83       	std	Z+1, r20	; 0x01
    11ec:	32 83       	std	Z+2, r19	; 0x02
    11ee:	fc 01       	movw	r30, r24
    11f0:	32 2f       	mov	r19, r18
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	33 23       	and	r19, r19
    11f6:	09 f4       	brne	.+2      	; 0x11fa <dtoa_prf+0xce>
    11f8:	42 c0       	rjmp	.+132    	; 0x127e <dtoa_prf+0x152>
    11fa:	41 93       	st	Z+, r20
    11fc:	31 50       	subi	r19, 0x01	; 1
    11fe:	fa cf       	rjmp	.-12     	; 0x11f4 <dtoa_prf+0xc8>
    1200:	42 ff       	sbrs	r20, 2
    1202:	44 c0       	rjmp	.+136    	; 0x128c <dtoa_prf+0x160>
    1204:	91 11       	cpse	r25, r1
    1206:	02 c0       	rjmp	.+4      	; 0x120c <dtoa_prf+0xe0>
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	01 c0       	rjmp	.+2      	; 0x120e <dtoa_prf+0xe2>
    120c:	84 e0       	ldi	r24, 0x04	; 4
    120e:	81 17       	cp	r24, r17
    1210:	18 f4       	brcc	.+6      	; 0x1218 <dtoa_prf+0xec>
    1212:	21 2f       	mov	r18, r17
    1214:	28 1b       	sub	r18, r24
    1216:	01 c0       	rjmp	.+2      	; 0x121a <dtoa_prf+0xee>
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	51 11       	cpse	r21, r1
    121c:	0b c0       	rjmp	.+22     	; 0x1234 <dtoa_prf+0x108>
    121e:	f6 01       	movw	r30, r12
    1220:	82 2f       	mov	r24, r18
    1222:	30 e2       	ldi	r19, 0x20	; 32
    1224:	88 23       	and	r24, r24
    1226:	19 f0       	breq	.+6      	; 0x122e <dtoa_prf+0x102>
    1228:	31 93       	st	Z+, r19
    122a:	81 50       	subi	r24, 0x01	; 1
    122c:	fb cf       	rjmp	.-10     	; 0x1224 <dtoa_prf+0xf8>
    122e:	c2 0e       	add	r12, r18
    1230:	d1 1c       	adc	r13, r1
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	99 23       	and	r25, r25
    1236:	29 f0       	breq	.+10     	; 0x1242 <dtoa_prf+0x116>
    1238:	d6 01       	movw	r26, r12
    123a:	9c 93       	st	X, r25
    123c:	f6 01       	movw	r30, r12
    123e:	31 96       	adiw	r30, 0x01	; 1
    1240:	6f 01       	movw	r12, r30
    1242:	c6 01       	movw	r24, r12
    1244:	03 96       	adiw	r24, 0x03	; 3
    1246:	e2 fe       	sbrs	r14, 2
    1248:	0b c0       	rjmp	.+22     	; 0x1260 <dtoa_prf+0x134>
    124a:	39 e4       	ldi	r19, 0x49	; 73
    124c:	d6 01       	movw	r26, r12
    124e:	3c 93       	st	X, r19
    1250:	3e e4       	ldi	r19, 0x4E	; 78
    1252:	11 96       	adiw	r26, 0x01	; 1
    1254:	3c 93       	st	X, r19
    1256:	11 97       	sbiw	r26, 0x01	; 1
    1258:	36 e4       	ldi	r19, 0x46	; 70
    125a:	12 96       	adiw	r26, 0x02	; 2
    125c:	3c 93       	st	X, r19
    125e:	07 c0       	rjmp	.+14     	; 0x126e <dtoa_prf+0x142>
    1260:	39 e6       	ldi	r19, 0x69	; 105
    1262:	f6 01       	movw	r30, r12
    1264:	30 83       	st	Z, r19
    1266:	3e e6       	ldi	r19, 0x6E	; 110
    1268:	31 83       	std	Z+1, r19	; 0x01
    126a:	36 e6       	ldi	r19, 0x66	; 102
    126c:	32 83       	std	Z+2, r19	; 0x02
    126e:	fc 01       	movw	r30, r24
    1270:	32 2f       	mov	r19, r18
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	33 23       	and	r19, r19
    1276:	19 f0       	breq	.+6      	; 0x127e <dtoa_prf+0x152>
    1278:	41 93       	st	Z+, r20
    127a:	31 50       	subi	r19, 0x01	; 1
    127c:	fb cf       	rjmp	.-10     	; 0x1274 <dtoa_prf+0x148>
    127e:	fc 01       	movw	r30, r24
    1280:	e2 0f       	add	r30, r18
    1282:	f1 1d       	adc	r31, r1
    1284:	10 82       	st	Z, r1
    1286:	8e ef       	ldi	r24, 0xFE	; 254
    1288:	9f ef       	ldi	r25, 0xFF	; 255
    128a:	a6 c0       	rjmp	.+332    	; 0x13d8 <dtoa_prf+0x2ac>
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	91 11       	cpse	r25, r1
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <dtoa_prf+0x16c>
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	16 16       	cp	r1, r22
    129a:	17 06       	cpc	r1, r23
    129c:	1c f4       	brge	.+6      	; 0x12a4 <dtoa_prf+0x178>
    129e:	fb 01       	movw	r30, r22
    12a0:	31 96       	adiw	r30, 0x01	; 1
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <dtoa_prf+0x17c>
    12a4:	e1 e0       	ldi	r30, 0x01	; 1
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	2e 0f       	add	r18, r30
    12aa:	3f 1f       	adc	r19, r31
    12ac:	bb 20       	and	r11, r11
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <dtoa_prf+0x18c>
    12b0:	eb 2d       	mov	r30, r11
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	31 96       	adiw	r30, 0x01	; 1
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <dtoa_prf+0x190>
    12b8:	e0 e0       	ldi	r30, 0x00	; 0
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	2e 0f       	add	r18, r30
    12be:	3f 1f       	adc	r19, r31
    12c0:	e1 2f       	mov	r30, r17
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	2e 17       	cp	r18, r30
    12c6:	3f 07       	cpc	r19, r31
    12c8:	1c f4       	brge	.+6      	; 0x12d0 <dtoa_prf+0x1a4>
    12ca:	12 1b       	sub	r17, r18
    12cc:	21 2f       	mov	r18, r17
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <dtoa_prf+0x1a6>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	8e 2d       	mov	r24, r14
    12d4:	88 71       	andi	r24, 0x18	; 24
    12d6:	59 f4       	brne	.+22     	; 0x12ee <dtoa_prf+0x1c2>
    12d8:	f6 01       	movw	r30, r12
    12da:	82 2f       	mov	r24, r18
    12dc:	30 e2       	ldi	r19, 0x20	; 32
    12de:	88 23       	and	r24, r24
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <dtoa_prf+0x1bc>
    12e2:	31 93       	st	Z+, r19
    12e4:	81 50       	subi	r24, 0x01	; 1
    12e6:	fb cf       	rjmp	.-10     	; 0x12de <dtoa_prf+0x1b2>
    12e8:	c2 0e       	add	r12, r18
    12ea:	d1 1c       	adc	r13, r1
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	99 23       	and	r25, r25
    12f0:	29 f0       	breq	.+10     	; 0x12fc <dtoa_prf+0x1d0>
    12f2:	d6 01       	movw	r26, r12
    12f4:	9c 93       	st	X, r25
    12f6:	f6 01       	movw	r30, r12
    12f8:	31 96       	adiw	r30, 0x01	; 1
    12fa:	6f 01       	movw	r12, r30
    12fc:	51 11       	cpse	r21, r1
    12fe:	0b c0       	rjmp	.+22     	; 0x1316 <dtoa_prf+0x1ea>
    1300:	f6 01       	movw	r30, r12
    1302:	82 2f       	mov	r24, r18
    1304:	90 e3       	ldi	r25, 0x30	; 48
    1306:	88 23       	and	r24, r24
    1308:	19 f0       	breq	.+6      	; 0x1310 <dtoa_prf+0x1e4>
    130a:	91 93       	st	Z+, r25
    130c:	81 50       	subi	r24, 0x01	; 1
    130e:	fb cf       	rjmp	.-10     	; 0x1306 <dtoa_prf+0x1da>
    1310:	c2 0e       	add	r12, r18
    1312:	d1 1c       	adc	r13, r1
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	0f 2d       	mov	r16, r15
    1318:	06 0f       	add	r16, r22
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	34 2f       	mov	r19, r20
    131e:	30 71       	andi	r19, 0x10	; 16
    1320:	44 ff       	sbrs	r20, 4
    1322:	03 c0       	rjmp	.+6      	; 0x132a <dtoa_prf+0x1fe>
    1324:	91 33       	cpi	r25, 0x31	; 49
    1326:	09 f4       	brne	.+2      	; 0x132a <dtoa_prf+0x1fe>
    1328:	01 50       	subi	r16, 0x01	; 1
    132a:	10 16       	cp	r1, r16
    132c:	24 f4       	brge	.+8      	; 0x1336 <dtoa_prf+0x20a>
    132e:	09 30       	cpi	r16, 0x09	; 9
    1330:	18 f0       	brcs	.+6      	; 0x1338 <dtoa_prf+0x20c>
    1332:	08 e0       	ldi	r16, 0x08	; 8
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <dtoa_prf+0x20c>
    1336:	01 e0       	ldi	r16, 0x01	; 1
    1338:	ab 01       	movw	r20, r22
    133a:	77 ff       	sbrs	r23, 7
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <dtoa_prf+0x216>
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	fb 01       	movw	r30, r22
    1344:	e4 1b       	sub	r30, r20
    1346:	f5 0b       	sbc	r31, r21
    1348:	a1 e0       	ldi	r26, 0x01	; 1
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ac 0f       	add	r26, r28
    134e:	bd 1f       	adc	r27, r29
    1350:	ea 0f       	add	r30, r26
    1352:	fb 1f       	adc	r31, r27
    1354:	8e e2       	ldi	r24, 0x2E	; 46
    1356:	a8 2e       	mov	r10, r24
    1358:	4b 01       	movw	r8, r22
    135a:	80 1a       	sub	r8, r16
    135c:	91 08       	sbc	r9, r1
    135e:	0b 2d       	mov	r16, r11
    1360:	10 e0       	ldi	r17, 0x00	; 0
    1362:	11 95       	neg	r17
    1364:	01 95       	neg	r16
    1366:	11 09       	sbc	r17, r1
    1368:	4f 3f       	cpi	r20, 0xFF	; 255
    136a:	bf ef       	ldi	r27, 0xFF	; 255
    136c:	5b 07       	cpc	r21, r27
    136e:	21 f4       	brne	.+8      	; 0x1378 <dtoa_prf+0x24c>
    1370:	d6 01       	movw	r26, r12
    1372:	ac 92       	st	X, r10
    1374:	11 96       	adiw	r26, 0x01	; 1
    1376:	6d 01       	movw	r12, r26
    1378:	64 17       	cp	r22, r20
    137a:	75 07       	cpc	r23, r21
    137c:	2c f0       	brlt	.+10     	; 0x1388 <dtoa_prf+0x25c>
    137e:	84 16       	cp	r8, r20
    1380:	95 06       	cpc	r9, r21
    1382:	14 f4       	brge	.+4      	; 0x1388 <dtoa_prf+0x25c>
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	01 c0       	rjmp	.+2      	; 0x138a <dtoa_prf+0x25e>
    1388:	80 e3       	ldi	r24, 0x30	; 48
    138a:	41 50       	subi	r20, 0x01	; 1
    138c:	51 09       	sbc	r21, r1
    138e:	31 96       	adiw	r30, 0x01	; 1
    1390:	d6 01       	movw	r26, r12
    1392:	11 96       	adiw	r26, 0x01	; 1
    1394:	7d 01       	movw	r14, r26
    1396:	40 17       	cp	r20, r16
    1398:	51 07       	cpc	r21, r17
    139a:	24 f0       	brlt	.+8      	; 0x13a4 <dtoa_prf+0x278>
    139c:	d6 01       	movw	r26, r12
    139e:	8c 93       	st	X, r24
    13a0:	67 01       	movw	r12, r14
    13a2:	e2 cf       	rjmp	.-60     	; 0x1368 <dtoa_prf+0x23c>
    13a4:	64 17       	cp	r22, r20
    13a6:	75 07       	cpc	r23, r21
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <dtoa_prf+0x28c>
    13aa:	96 33       	cpi	r25, 0x36	; 54
    13ac:	20 f4       	brcc	.+8      	; 0x13b6 <dtoa_prf+0x28a>
    13ae:	95 33       	cpi	r25, 0x35	; 53
    13b0:	19 f4       	brne	.+6      	; 0x13b8 <dtoa_prf+0x28c>
    13b2:	31 11       	cpse	r19, r1
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <dtoa_prf+0x28c>
    13b6:	81 e3       	ldi	r24, 0x31	; 49
    13b8:	f6 01       	movw	r30, r12
    13ba:	80 83       	st	Z, r24
    13bc:	f7 01       	movw	r30, r14
    13be:	82 2f       	mov	r24, r18
    13c0:	90 e2       	ldi	r25, 0x20	; 32
    13c2:	88 23       	and	r24, r24
    13c4:	19 f0       	breq	.+6      	; 0x13cc <dtoa_prf+0x2a0>
    13c6:	91 93       	st	Z+, r25
    13c8:	81 50       	subi	r24, 0x01	; 1
    13ca:	fb cf       	rjmp	.-10     	; 0x13c2 <dtoa_prf+0x296>
    13cc:	f7 01       	movw	r30, r14
    13ce:	e2 0f       	add	r30, r18
    13d0:	f1 1d       	adc	r31, r1
    13d2:	10 82       	st	Z, r1
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	29 96       	adiw	r28, 0x09	; 9
    13da:	ec e0       	ldi	r30, 0x0C	; 12
    13dc:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__epilogue_restores__+0xc>

000013e0 <strtod>:
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e6 ef       	ldi	r30, 0xF6	; 246
    13e6:	f9 e0       	ldi	r31, 0x09	; 9
    13e8:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__prologue_saves__+0xc>
    13ec:	ec 01       	movw	r28, r24
    13ee:	6b 01       	movw	r12, r22
    13f0:	61 15       	cp	r22, r1
    13f2:	71 05       	cpc	r23, r1
    13f4:	19 f0       	breq	.+6      	; 0x13fc <strtod+0x1c>
    13f6:	fb 01       	movw	r30, r22
    13f8:	91 83       	std	Z+1, r25	; 0x01
    13fa:	80 83       	st	Z, r24
    13fc:	7e 01       	movw	r14, r28
    13fe:	ff ef       	ldi	r31, 0xFF	; 255
    1400:	ef 1a       	sub	r14, r31
    1402:	ff 0a       	sbc	r15, r31
    1404:	08 81       	ld	r16, Y
    1406:	80 2f       	mov	r24, r16
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 16 0c 	call	0x182c	; 0x182c <isspace>
    140e:	89 2b       	or	r24, r25
    1410:	11 f0       	breq	.+4      	; 0x1416 <strtod+0x36>
    1412:	e7 01       	movw	r28, r14
    1414:	f3 cf       	rjmp	.-26     	; 0x13fc <strtod+0x1c>
    1416:	0d 32       	cpi	r16, 0x2D	; 45
    1418:	39 f4       	brne	.+14     	; 0x1428 <strtod+0x48>
    141a:	7e 01       	movw	r14, r28
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	e8 0e       	add	r14, r24
    1420:	f1 1c       	adc	r15, r1
    1422:	09 81       	ldd	r16, Y+1	; 0x01
    1424:	11 e0       	ldi	r17, 0x01	; 1
    1426:	08 c0       	rjmp	.+16     	; 0x1438 <strtod+0x58>
    1428:	0b 32       	cpi	r16, 0x2B	; 43
    142a:	29 f4       	brne	.+10     	; 0x1436 <strtod+0x56>
    142c:	7e 01       	movw	r14, r28
    142e:	92 e0       	ldi	r25, 0x02	; 2
    1430:	e9 0e       	add	r14, r25
    1432:	f1 1c       	adc	r15, r1
    1434:	09 81       	ldd	r16, Y+1	; 0x01
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	e7 01       	movw	r28, r14
    143a:	21 97       	sbiw	r28, 0x01	; 1
    143c:	43 e0       	ldi	r20, 0x03	; 3
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	60 e7       	ldi	r22, 0x70	; 112
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	ce 01       	movw	r24, r28
    1446:	0e 94 1f 0c 	call	0x183e	; 0x183e <strncasecmp_P>
    144a:	89 2b       	or	r24, r25
    144c:	c1 f4       	brne	.+48     	; 0x147e <strtod+0x9e>
    144e:	23 96       	adiw	r28, 0x03	; 3
    1450:	45 e0       	ldi	r20, 0x05	; 5
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	6b e6       	ldi	r22, 0x6B	; 107
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	ce 01       	movw	r24, r28
    145a:	0e 94 1f 0c 	call	0x183e	; 0x183e <strncasecmp_P>
    145e:	89 2b       	or	r24, r25
    1460:	09 f4       	brne	.+2      	; 0x1464 <strtod+0x84>
    1462:	25 96       	adiw	r28, 0x05	; 5
    1464:	c1 14       	cp	r12, r1
    1466:	d1 04       	cpc	r13, r1
    1468:	19 f0       	breq	.+6      	; 0x1470 <strtod+0x90>
    146a:	f6 01       	movw	r30, r12
    146c:	d1 83       	std	Z+1, r29	; 0x01
    146e:	c0 83       	st	Z, r28
    1470:	11 11       	cpse	r17, r1
    1472:	f6 c0       	rjmp	.+492    	; 0x1660 <strtod+0x280>
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	80 e8       	ldi	r24, 0x80	; 128
    147a:	9f e7       	ldi	r25, 0x7F	; 127
    147c:	fa c0       	rjmp	.+500    	; 0x1672 <strtod+0x292>
    147e:	43 e0       	ldi	r20, 0x03	; 3
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	68 e6       	ldi	r22, 0x68	; 104
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	ce 01       	movw	r24, r28
    1488:	0e 94 1f 0c 	call	0x183e	; 0x183e <strncasecmp_P>
    148c:	89 2b       	or	r24, r25
    148e:	59 f4       	brne	.+22     	; 0x14a6 <strtod+0xc6>
    1490:	c1 14       	cp	r12, r1
    1492:	d1 04       	cpc	r13, r1
    1494:	09 f4       	brne	.+2      	; 0x1498 <strtod+0xb8>
    1496:	e9 c0       	rjmp	.+466    	; 0x166a <strtod+0x28a>
    1498:	f2 e0       	ldi	r31, 0x02	; 2
    149a:	ef 0e       	add	r14, r31
    149c:	f1 1c       	adc	r15, r1
    149e:	f6 01       	movw	r30, r12
    14a0:	f1 82       	std	Z+1, r15	; 0x01
    14a2:	e0 82       	st	Z, r14
    14a4:	e2 c0       	rjmp	.+452    	; 0x166a <strtod+0x28a>
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	a9 01       	movw	r20, r18
    14ac:	c0 e0       	ldi	r28, 0x00	; 0
    14ae:	d0 e0       	ldi	r29, 0x00	; 0
    14b0:	f7 01       	movw	r30, r14
    14b2:	80 ed       	ldi	r24, 0xD0	; 208
    14b4:	a8 2e       	mov	r10, r24
    14b6:	a0 0e       	add	r10, r16
    14b8:	89 e0       	ldi	r24, 0x09	; 9
    14ba:	8a 15       	cp	r24, r10
    14bc:	30 f1       	brcs	.+76     	; 0x150a <strtod+0x12a>
    14be:	91 2f       	mov	r25, r17
    14c0:	92 60       	ori	r25, 0x02	; 2
    14c2:	b9 2e       	mov	r11, r25
    14c4:	81 2f       	mov	r24, r17
    14c6:	88 70       	andi	r24, 0x08	; 8
    14c8:	12 ff       	sbrs	r17, 2
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <strtod+0xf4>
    14cc:	81 11       	cpse	r24, r1
    14ce:	24 c0       	rjmp	.+72     	; 0x1518 <strtod+0x138>
    14d0:	21 96       	adiw	r28, 0x01	; 1
    14d2:	22 c0       	rjmp	.+68     	; 0x1518 <strtod+0x138>
    14d4:	81 11       	cpse	r24, r1
    14d6:	21 97       	sbiw	r28, 0x01	; 1
    14d8:	a5 e0       	ldi	r26, 0x05	; 5
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__muluhisi3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	aa 1f       	adc	r26, r26
    14ea:	bb 1f       	adc	r27, r27
    14ec:	9c 01       	movw	r18, r24
    14ee:	ad 01       	movw	r20, r26
    14f0:	2a 0d       	add	r18, r10
    14f2:	31 1d       	adc	r19, r1
    14f4:	41 1d       	adc	r20, r1
    14f6:	51 1d       	adc	r21, r1
    14f8:	28 39       	cpi	r18, 0x98	; 152
    14fa:	89 e9       	ldi	r24, 0x99	; 153
    14fc:	38 07       	cpc	r19, r24
    14fe:	48 07       	cpc	r20, r24
    1500:	89 e1       	ldi	r24, 0x19	; 25
    1502:	58 07       	cpc	r21, r24
    1504:	48 f0       	brcs	.+18     	; 0x1518 <strtod+0x138>
    1506:	16 60       	ori	r17, 0x06	; 6
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <strtod+0x136>
    150a:	9e ef       	ldi	r25, 0xFE	; 254
    150c:	a9 12       	cpse	r10, r25
    150e:	0a c0       	rjmp	.+20     	; 0x1524 <strtod+0x144>
    1510:	13 fd       	sbrc	r17, 3
    1512:	40 c0       	rjmp	.+128    	; 0x1594 <strtod+0x1b4>
    1514:	18 60       	ori	r17, 0x08	; 8
    1516:	b1 2e       	mov	r11, r17
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	e8 1a       	sub	r14, r24
    151c:	f8 0a       	sbc	r15, r24
    151e:	00 81       	ld	r16, Z
    1520:	1b 2d       	mov	r17, r11
    1522:	c6 cf       	rjmp	.-116    	; 0x14b0 <strtod+0xd0>
    1524:	80 2f       	mov	r24, r16
    1526:	8f 7d       	andi	r24, 0xDF	; 223
    1528:	85 34       	cpi	r24, 0x45	; 69
    152a:	a1 f5       	brne	.+104    	; 0x1594 <strtod+0x1b4>
    152c:	80 81       	ld	r24, Z
    152e:	8d 32       	cpi	r24, 0x2D	; 45
    1530:	11 f4       	brne	.+4      	; 0x1536 <strtod+0x156>
    1532:	10 61       	ori	r17, 0x10	; 16
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <strtod+0x162>
    1536:	8b 32       	cpi	r24, 0x2B	; 43
    1538:	21 f0       	breq	.+8      	; 0x1542 <strtod+0x162>
    153a:	31 96       	adiw	r30, 0x01	; 1
    153c:	61 e0       	ldi	r22, 0x01	; 1
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	04 c0       	rjmp	.+8      	; 0x154a <strtod+0x16a>
    1542:	81 81       	ldd	r24, Z+1	; 0x01
    1544:	32 96       	adiw	r30, 0x02	; 2
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	80 53       	subi	r24, 0x30	; 48
    154c:	8a 30       	cpi	r24, 0x0A	; 10
    154e:	18 f0       	brcs	.+6      	; 0x1556 <strtod+0x176>
    1550:	e6 1b       	sub	r30, r22
    1552:	f7 0b       	sbc	r31, r23
    1554:	1f c0       	rjmp	.+62     	; 0x1594 <strtod+0x1b4>
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	60 38       	cpi	r22, 0x80	; 128
    155c:	9c e0       	ldi	r25, 0x0C	; 12
    155e:	79 07       	cpc	r23, r25
    1560:	5c f4       	brge	.+22     	; 0x1578 <strtod+0x198>
    1562:	db 01       	movw	r26, r22
    1564:	aa 0f       	add	r26, r26
    1566:	bb 1f       	adc	r27, r27
    1568:	aa 0f       	add	r26, r26
    156a:	bb 1f       	adc	r27, r27
    156c:	6a 0f       	add	r22, r26
    156e:	7b 1f       	adc	r23, r27
    1570:	66 0f       	add	r22, r22
    1572:	77 1f       	adc	r23, r23
    1574:	68 0f       	add	r22, r24
    1576:	71 1d       	adc	r23, r1
    1578:	31 96       	adiw	r30, 0x01	; 1
    157a:	df 01       	movw	r26, r30
    157c:	11 97       	sbiw	r26, 0x01	; 1
    157e:	8c 91       	ld	r24, X
    1580:	80 53       	subi	r24, 0x30	; 48
    1582:	8a 30       	cpi	r24, 0x0A	; 10
    1584:	50 f3       	brcs	.-44     	; 0x155a <strtod+0x17a>
    1586:	14 ff       	sbrs	r17, 4
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <strtod+0x1b0>
    158a:	71 95       	neg	r23
    158c:	61 95       	neg	r22
    158e:	71 09       	sbc	r23, r1
    1590:	c6 0f       	add	r28, r22
    1592:	d7 1f       	adc	r29, r23
    1594:	11 ff       	sbrs	r17, 1
    1596:	08 c0       	rjmp	.+16     	; 0x15a8 <strtod+0x1c8>
    1598:	c1 14       	cp	r12, r1
    159a:	d1 04       	cpc	r13, r1
    159c:	29 f0       	breq	.+10     	; 0x15a8 <strtod+0x1c8>
    159e:	cf 01       	movw	r24, r30
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f6 01       	movw	r30, r12
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	80 83       	st	Z, r24
    15a8:	ca 01       	movw	r24, r20
    15aa:	b9 01       	movw	r22, r18
    15ac:	0e 94 b9 05 	call	0xb72	; 0xb72 <__floatunsisf>
    15b0:	21 2f       	mov	r18, r17
    15b2:	23 70       	andi	r18, 0x03	; 3
    15b4:	23 30       	cpi	r18, 0x03	; 3
    15b6:	19 f0       	breq	.+6      	; 0x15be <strtod+0x1de>
    15b8:	4b 01       	movw	r8, r22
    15ba:	5c 01       	movw	r10, r24
    15bc:	06 c0       	rjmp	.+12     	; 0x15ca <strtod+0x1ea>
    15be:	4b 01       	movw	r8, r22
    15c0:	5c 01       	movw	r10, r24
    15c2:	b7 fa       	bst	r11, 7
    15c4:	b0 94       	com	r11
    15c6:	b7 f8       	bld	r11, 7
    15c8:	b0 94       	com	r11
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	a9 01       	movw	r20, r18
    15d0:	c5 01       	movw	r24, r10
    15d2:	b4 01       	movw	r22, r8
    15d4:	0e 94 13 05 	call	0xa26	; 0xa26 <__cmpsf2>
    15d8:	88 23       	and	r24, r24
    15da:	09 f4       	brne	.+2      	; 0x15de <strtod+0x1fe>
    15dc:	3e c0       	rjmp	.+124    	; 0x165a <strtod+0x27a>
    15de:	d7 ff       	sbrs	r29, 7
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <strtod+0x20e>
    15e2:	d1 95       	neg	r29
    15e4:	c1 95       	neg	r28
    15e6:	d1 09       	sbc	r29, r1
    15e8:	07 e8       	ldi	r16, 0x87	; 135
    15ea:	10 e0       	ldi	r17, 0x00	; 0
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <strtod+0x212>
    15ee:	0f e9       	ldi	r16, 0x9F	; 159
    15f0:	10 e0       	ldi	r17, 0x00	; 0
    15f2:	68 01       	movw	r12, r16
    15f4:	f8 e1       	ldi	r31, 0x18	; 24
    15f6:	cf 1a       	sub	r12, r31
    15f8:	d1 08       	sbc	r13, r1
    15fa:	90 e2       	ldi	r25, 0x20	; 32
    15fc:	e9 2e       	mov	r14, r25
    15fe:	f1 2c       	mov	r15, r1
    1600:	ce 15       	cp	r28, r14
    1602:	df 05       	cpc	r29, r15
    1604:	74 f0       	brlt	.+28     	; 0x1622 <strtod+0x242>
    1606:	f8 01       	movw	r30, r16
    1608:	25 91       	lpm	r18, Z+
    160a:	35 91       	lpm	r19, Z+
    160c:	45 91       	lpm	r20, Z+
    160e:	54 91       	lpm	r21, Z
    1610:	c5 01       	movw	r24, r10
    1612:	b4 01       	movw	r22, r8
    1614:	0e 94 70 06 	call	0xce0	; 0xce0 <__mulsf3>
    1618:	4b 01       	movw	r8, r22
    161a:	5c 01       	movw	r10, r24
    161c:	ce 19       	sub	r28, r14
    161e:	df 09       	sbc	r29, r15
    1620:	ef cf       	rjmp	.-34     	; 0x1600 <strtod+0x220>
    1622:	04 50       	subi	r16, 0x04	; 4
    1624:	11 09       	sbc	r17, r1
    1626:	f5 94       	asr	r15
    1628:	e7 94       	ror	r14
    162a:	0c 15       	cp	r16, r12
    162c:	1d 05       	cpc	r17, r13
    162e:	41 f7       	brne	.-48     	; 0x1600 <strtod+0x220>
    1630:	8a 2d       	mov	r24, r10
    1632:	88 0f       	add	r24, r24
    1634:	8b 2d       	mov	r24, r11
    1636:	88 1f       	adc	r24, r24
    1638:	8f 3f       	cpi	r24, 0xFF	; 255
    163a:	49 f0       	breq	.+18     	; 0x164e <strtod+0x26e>
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	a9 01       	movw	r20, r18
    1642:	c5 01       	movw	r24, r10
    1644:	b4 01       	movw	r22, r8
    1646:	0e 94 13 05 	call	0xa26	; 0xa26 <__cmpsf2>
    164a:	81 11       	cpse	r24, r1
    164c:	06 c0       	rjmp	.+12     	; 0x165a <strtod+0x27a>
    164e:	82 e2       	ldi	r24, 0x22	; 34
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <errno+0x1>
    1656:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <errno>
    165a:	c5 01       	movw	r24, r10
    165c:	b4 01       	movw	r22, r8
    165e:	09 c0       	rjmp	.+18     	; 0x1672 <strtod+0x292>
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	80 e8       	ldi	r24, 0x80	; 128
    1666:	9f ef       	ldi	r25, 0xFF	; 255
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <strtod+0x292>
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	80 ec       	ldi	r24, 0xC0	; 192
    1670:	9f e7       	ldi	r25, 0x7F	; 127
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	ec e0       	ldi	r30, 0x0C	; 12
    1678:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__epilogue_restores__+0xc>

0000167c <__ftoa_engine>:
    167c:	28 30       	cpi	r18, 0x08	; 8
    167e:	08 f0       	brcs	.+2      	; 0x1682 <__ftoa_engine+0x6>
    1680:	27 e0       	ldi	r18, 0x07	; 7
    1682:	33 27       	eor	r19, r19
    1684:	da 01       	movw	r26, r20
    1686:	99 0f       	add	r25, r25
    1688:	31 1d       	adc	r19, r1
    168a:	87 fd       	sbrc	r24, 7
    168c:	91 60       	ori	r25, 0x01	; 1
    168e:	00 96       	adiw	r24, 0x00	; 0
    1690:	61 05       	cpc	r22, r1
    1692:	71 05       	cpc	r23, r1
    1694:	39 f4       	brne	.+14     	; 0x16a4 <__ftoa_engine+0x28>
    1696:	32 60       	ori	r19, 0x02	; 2
    1698:	2e 5f       	subi	r18, 0xFE	; 254
    169a:	3d 93       	st	X+, r19
    169c:	30 e3       	ldi	r19, 0x30	; 48
    169e:	2a 95       	dec	r18
    16a0:	e1 f7       	brne	.-8      	; 0x169a <__ftoa_engine+0x1e>
    16a2:	08 95       	ret
    16a4:	9f 3f       	cpi	r25, 0xFF	; 255
    16a6:	30 f0       	brcs	.+12     	; 0x16b4 <__ftoa_engine+0x38>
    16a8:	80 38       	cpi	r24, 0x80	; 128
    16aa:	71 05       	cpc	r23, r1
    16ac:	61 05       	cpc	r22, r1
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <__ftoa_engine+0x36>
    16b0:	3c 5f       	subi	r19, 0xFC	; 252
    16b2:	3c 5f       	subi	r19, 0xFC	; 252
    16b4:	3d 93       	st	X+, r19
    16b6:	91 30       	cpi	r25, 0x01	; 1
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <__ftoa_engine+0x40>
    16ba:	80 68       	ori	r24, 0x80	; 128
    16bc:	91 1d       	adc	r25, r1
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	1f 93       	push	r17
    16c4:	0f 93       	push	r16
    16c6:	ff 92       	push	r15
    16c8:	ef 92       	push	r14
    16ca:	19 2f       	mov	r17, r25
    16cc:	98 7f       	andi	r25, 0xF8	; 248
    16ce:	96 95       	lsr	r25
    16d0:	e9 2f       	mov	r30, r25
    16d2:	96 95       	lsr	r25
    16d4:	96 95       	lsr	r25
    16d6:	e9 0f       	add	r30, r25
    16d8:	ff 27       	eor	r31, r31
    16da:	e3 50       	subi	r30, 0x03	; 3
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	99 27       	eor	r25, r25
    16e0:	33 27       	eor	r19, r19
    16e2:	ee 24       	eor	r14, r14
    16e4:	ff 24       	eor	r15, r15
    16e6:	a7 01       	movw	r20, r14
    16e8:	e7 01       	movw	r28, r14
    16ea:	05 90       	lpm	r0, Z+
    16ec:	08 94       	sec
    16ee:	07 94       	ror	r0
    16f0:	28 f4       	brcc	.+10     	; 0x16fc <__ftoa_engine+0x80>
    16f2:	36 0f       	add	r19, r22
    16f4:	e7 1e       	adc	r14, r23
    16f6:	f8 1e       	adc	r15, r24
    16f8:	49 1f       	adc	r20, r25
    16fa:	51 1d       	adc	r21, r1
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	06 94       	lsr	r0
    1706:	a1 f7       	brne	.-24     	; 0x16f0 <__ftoa_engine+0x74>
    1708:	05 90       	lpm	r0, Z+
    170a:	07 94       	ror	r0
    170c:	28 f4       	brcc	.+10     	; 0x1718 <__ftoa_engine+0x9c>
    170e:	e7 0e       	add	r14, r23
    1710:	f8 1e       	adc	r15, r24
    1712:	49 1f       	adc	r20, r25
    1714:	56 1f       	adc	r21, r22
    1716:	c1 1d       	adc	r28, r1
    1718:	77 0f       	add	r23, r23
    171a:	88 1f       	adc	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	66 1f       	adc	r22, r22
    1720:	06 94       	lsr	r0
    1722:	a1 f7       	brne	.-24     	; 0x170c <__ftoa_engine+0x90>
    1724:	05 90       	lpm	r0, Z+
    1726:	07 94       	ror	r0
    1728:	28 f4       	brcc	.+10     	; 0x1734 <__ftoa_engine+0xb8>
    172a:	f8 0e       	add	r15, r24
    172c:	49 1f       	adc	r20, r25
    172e:	56 1f       	adc	r21, r22
    1730:	c7 1f       	adc	r28, r23
    1732:	d1 1d       	adc	r29, r1
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	66 1f       	adc	r22, r22
    173a:	77 1f       	adc	r23, r23
    173c:	06 94       	lsr	r0
    173e:	a1 f7       	brne	.-24     	; 0x1728 <__ftoa_engine+0xac>
    1740:	05 90       	lpm	r0, Z+
    1742:	07 94       	ror	r0
    1744:	20 f4       	brcc	.+8      	; 0x174e <__ftoa_engine+0xd2>
    1746:	49 0f       	add	r20, r25
    1748:	56 1f       	adc	r21, r22
    174a:	c7 1f       	adc	r28, r23
    174c:	d8 1f       	adc	r29, r24
    174e:	99 0f       	add	r25, r25
    1750:	66 1f       	adc	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	88 1f       	adc	r24, r24
    1756:	06 94       	lsr	r0
    1758:	a9 f7       	brne	.-22     	; 0x1744 <__ftoa_engine+0xc8>
    175a:	84 91       	lpm	r24, Z
    175c:	10 95       	com	r17
    175e:	17 70       	andi	r17, 0x07	; 7
    1760:	41 f0       	breq	.+16     	; 0x1772 <__ftoa_engine+0xf6>
    1762:	d6 95       	lsr	r29
    1764:	c7 95       	ror	r28
    1766:	57 95       	ror	r21
    1768:	47 95       	ror	r20
    176a:	f7 94       	ror	r15
    176c:	e7 94       	ror	r14
    176e:	1a 95       	dec	r17
    1770:	c1 f7       	brne	.-16     	; 0x1762 <__ftoa_engine+0xe6>
    1772:	e3 ea       	ldi	r30, 0xA3	; 163
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	68 94       	set
    1778:	15 90       	lpm	r1, Z+
    177a:	15 91       	lpm	r17, Z+
    177c:	35 91       	lpm	r19, Z+
    177e:	65 91       	lpm	r22, Z+
    1780:	95 91       	lpm	r25, Z+
    1782:	05 90       	lpm	r0, Z+
    1784:	7f e2       	ldi	r23, 0x2F	; 47
    1786:	73 95       	inc	r23
    1788:	e1 18       	sub	r14, r1
    178a:	f1 0a       	sbc	r15, r17
    178c:	43 0b       	sbc	r20, r19
    178e:	56 0b       	sbc	r21, r22
    1790:	c9 0b       	sbc	r28, r25
    1792:	d0 09       	sbc	r29, r0
    1794:	c0 f7       	brcc	.-16     	; 0x1786 <__ftoa_engine+0x10a>
    1796:	e1 0c       	add	r14, r1
    1798:	f1 1e       	adc	r15, r17
    179a:	43 1f       	adc	r20, r19
    179c:	56 1f       	adc	r21, r22
    179e:	c9 1f       	adc	r28, r25
    17a0:	d0 1d       	adc	r29, r0
    17a2:	7e f4       	brtc	.+30     	; 0x17c2 <__ftoa_engine+0x146>
    17a4:	70 33       	cpi	r23, 0x30	; 48
    17a6:	11 f4       	brne	.+4      	; 0x17ac <__ftoa_engine+0x130>
    17a8:	8a 95       	dec	r24
    17aa:	e6 cf       	rjmp	.-52     	; 0x1778 <__ftoa_engine+0xfc>
    17ac:	e8 94       	clt
    17ae:	01 50       	subi	r16, 0x01	; 1
    17b0:	30 f0       	brcs	.+12     	; 0x17be <__ftoa_engine+0x142>
    17b2:	08 0f       	add	r16, r24
    17b4:	0a f4       	brpl	.+2      	; 0x17b8 <__ftoa_engine+0x13c>
    17b6:	00 27       	eor	r16, r16
    17b8:	02 17       	cp	r16, r18
    17ba:	08 f4       	brcc	.+2      	; 0x17be <__ftoa_engine+0x142>
    17bc:	20 2f       	mov	r18, r16
    17be:	23 95       	inc	r18
    17c0:	02 2f       	mov	r16, r18
    17c2:	7a 33       	cpi	r23, 0x3A	; 58
    17c4:	28 f0       	brcs	.+10     	; 0x17d0 <__ftoa_engine+0x154>
    17c6:	79 e3       	ldi	r23, 0x39	; 57
    17c8:	7d 93       	st	X+, r23
    17ca:	2a 95       	dec	r18
    17cc:	e9 f7       	brne	.-6      	; 0x17c8 <__ftoa_engine+0x14c>
    17ce:	10 c0       	rjmp	.+32     	; 0x17f0 <__ftoa_engine+0x174>
    17d0:	7d 93       	st	X+, r23
    17d2:	2a 95       	dec	r18
    17d4:	89 f6       	brne	.-94     	; 0x1778 <__ftoa_engine+0xfc>
    17d6:	06 94       	lsr	r0
    17d8:	97 95       	ror	r25
    17da:	67 95       	ror	r22
    17dc:	37 95       	ror	r19
    17de:	17 95       	ror	r17
    17e0:	17 94       	ror	r1
    17e2:	e1 18       	sub	r14, r1
    17e4:	f1 0a       	sbc	r15, r17
    17e6:	43 0b       	sbc	r20, r19
    17e8:	56 0b       	sbc	r21, r22
    17ea:	c9 0b       	sbc	r28, r25
    17ec:	d0 09       	sbc	r29, r0
    17ee:	98 f0       	brcs	.+38     	; 0x1816 <__ftoa_engine+0x19a>
    17f0:	23 95       	inc	r18
    17f2:	7e 91       	ld	r23, -X
    17f4:	73 95       	inc	r23
    17f6:	7a 33       	cpi	r23, 0x3A	; 58
    17f8:	08 f0       	brcs	.+2      	; 0x17fc <__ftoa_engine+0x180>
    17fa:	70 e3       	ldi	r23, 0x30	; 48
    17fc:	7c 93       	st	X, r23
    17fe:	20 13       	cpse	r18, r16
    1800:	b8 f7       	brcc	.-18     	; 0x17f0 <__ftoa_engine+0x174>
    1802:	7e 91       	ld	r23, -X
    1804:	70 61       	ori	r23, 0x10	; 16
    1806:	7d 93       	st	X+, r23
    1808:	30 f0       	brcs	.+12     	; 0x1816 <__ftoa_engine+0x19a>
    180a:	83 95       	inc	r24
    180c:	71 e3       	ldi	r23, 0x31	; 49
    180e:	7d 93       	st	X+, r23
    1810:	70 e3       	ldi	r23, 0x30	; 48
    1812:	2a 95       	dec	r18
    1814:	e1 f7       	brne	.-8      	; 0x180e <__ftoa_engine+0x192>
    1816:	11 24       	eor	r1, r1
    1818:	ef 90       	pop	r14
    181a:	ff 90       	pop	r15
    181c:	0f 91       	pop	r16
    181e:	1f 91       	pop	r17
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	99 27       	eor	r25, r25
    1826:	87 fd       	sbrc	r24, 7
    1828:	90 95       	com	r25
    182a:	08 95       	ret

0000182c <isspace>:
    182c:	91 11       	cpse	r25, r1
    182e:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__ctype_isfalse>
    1832:	80 32       	cpi	r24, 0x20	; 32
    1834:	19 f0       	breq	.+6      	; 0x183c <isspace+0x10>
    1836:	89 50       	subi	r24, 0x09	; 9
    1838:	85 50       	subi	r24, 0x05	; 5
    183a:	c8 f7       	brcc	.-14     	; 0x182e <isspace+0x2>
    183c:	08 95       	ret

0000183e <strncasecmp_P>:
    183e:	fb 01       	movw	r30, r22
    1840:	dc 01       	movw	r26, r24
    1842:	41 50       	subi	r20, 0x01	; 1
    1844:	50 40       	sbci	r21, 0x00	; 0
    1846:	88 f0       	brcs	.+34     	; 0x186a <strncasecmp_P+0x2c>
    1848:	8d 91       	ld	r24, X+
    184a:	81 34       	cpi	r24, 0x41	; 65
    184c:	1c f0       	brlt	.+6      	; 0x1854 <strncasecmp_P+0x16>
    184e:	8b 35       	cpi	r24, 0x5B	; 91
    1850:	0c f4       	brge	.+2      	; 0x1854 <strncasecmp_P+0x16>
    1852:	80 5e       	subi	r24, 0xE0	; 224
    1854:	65 91       	lpm	r22, Z+
    1856:	61 34       	cpi	r22, 0x41	; 65
    1858:	1c f0       	brlt	.+6      	; 0x1860 <strncasecmp_P+0x22>
    185a:	6b 35       	cpi	r22, 0x5B	; 91
    185c:	0c f4       	brge	.+2      	; 0x1860 <strncasecmp_P+0x22>
    185e:	60 5e       	subi	r22, 0xE0	; 224
    1860:	86 1b       	sub	r24, r22
    1862:	61 11       	cpse	r22, r1
    1864:	71 f3       	breq	.-36     	; 0x1842 <strncasecmp_P+0x4>
    1866:	99 0b       	sbc	r25, r25
    1868:	08 95       	ret
    186a:	88 1b       	sub	r24, r24
    186c:	fc cf       	rjmp	.-8      	; 0x1866 <strncasecmp_P+0x28>

0000186e <__ctype_isfalse>:
    186e:	99 27       	eor	r25, r25
    1870:	88 27       	eor	r24, r24

00001872 <__ctype_istrue>:
    1872:	08 95       	ret

00001874 <__muluhisi3>:
    1874:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__umulhisi3>
    1878:	a5 9f       	mul	r26, r21
    187a:	90 0d       	add	r25, r0
    187c:	b4 9f       	mul	r27, r20
    187e:	90 0d       	add	r25, r0
    1880:	a4 9f       	mul	r26, r20
    1882:	80 0d       	add	r24, r0
    1884:	91 1d       	adc	r25, r1
    1886:	11 24       	eor	r1, r1
    1888:	08 95       	ret

0000188a <__prologue_saves__>:
    188a:	2f 92       	push	r2
    188c:	3f 92       	push	r3
    188e:	4f 92       	push	r4
    1890:	5f 92       	push	r5
    1892:	6f 92       	push	r6
    1894:	7f 92       	push	r7
    1896:	8f 92       	push	r8
    1898:	9f 92       	push	r9
    189a:	af 92       	push	r10
    189c:	bf 92       	push	r11
    189e:	cf 92       	push	r12
    18a0:	df 92       	push	r13
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	ca 1b       	sub	r28, r26
    18b4:	db 0b       	sbc	r29, r27
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	09 94       	ijmp

000018c2 <__epilogue_restores__>:
    18c2:	2a 88       	ldd	r2, Y+18	; 0x12
    18c4:	39 88       	ldd	r3, Y+17	; 0x11
    18c6:	48 88       	ldd	r4, Y+16	; 0x10
    18c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    18ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    18cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    18ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    18d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    18d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    18d4:	b9 84       	ldd	r11, Y+9	; 0x09
    18d6:	c8 84       	ldd	r12, Y+8	; 0x08
    18d8:	df 80       	ldd	r13, Y+7	; 0x07
    18da:	ee 80       	ldd	r14, Y+6	; 0x06
    18dc:	fd 80       	ldd	r15, Y+5	; 0x05
    18de:	0c 81       	ldd	r16, Y+4	; 0x04
    18e0:	1b 81       	ldd	r17, Y+3	; 0x03
    18e2:	aa 81       	ldd	r26, Y+2	; 0x02
    18e4:	b9 81       	ldd	r27, Y+1	; 0x01
    18e6:	ce 0f       	add	r28, r30
    18e8:	d1 1d       	adc	r29, r1
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	ed 01       	movw	r28, r26
    18f6:	08 95       	ret

000018f8 <__umulhisi3>:
    18f8:	a2 9f       	mul	r26, r18
    18fa:	b0 01       	movw	r22, r0
    18fc:	b3 9f       	mul	r27, r19
    18fe:	c0 01       	movw	r24, r0
    1900:	a3 9f       	mul	r26, r19
    1902:	70 0d       	add	r23, r0
    1904:	81 1d       	adc	r24, r1
    1906:	11 24       	eor	r1, r1
    1908:	91 1d       	adc	r25, r1
    190a:	b2 9f       	mul	r27, r18
    190c:	70 0d       	add	r23, r0
    190e:	81 1d       	adc	r24, r1
    1910:	11 24       	eor	r1, r1
    1912:	91 1d       	adc	r25, r1
    1914:	08 95       	ret

00001916 <_exit>:
    1916:	f8 94       	cli

00001918 <__stop_program>:
    1918:	ff cf       	rjmp	.-2      	; 0x1918 <__stop_program>
