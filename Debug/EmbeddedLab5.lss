
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000015d8  0000166c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800156  00800156  000016c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001156  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0c  00000000  00000000  00002916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000816  00000000  00000000  00003322  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00003b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  00003e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000097c  00000000  00000000  0000437f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_18>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_20>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     10b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     11b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     12b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     13b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     14b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     15b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     16b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     17b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     18b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     19b:	3d 27 00                                            ='.

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d8 e0       	ldi	r29, 0x08	; 8
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	e8 ed       	ldi	r30, 0xD8	; 216
     1b2:	f5 e1       	ldi	r31, 0x15	; 21
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a6 35       	cpi	r26, 0x56	; 86
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	a6 e5       	ldi	r26, 0x56	; 86
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a5 3e       	cpi	r26, 0xE5	; 229
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 2a 02 	call	0x454	; 0x454 <main>
     1d4:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <setup>:

#define MAX518_ADDR 0b01010000
#define DAC0 0x00
#define DAC1 0x01

void setup(uint32_t scl_clock, uint32_t baud){
     1dc:	cf 92       	push	r12
     1de:	df 92       	push	r13
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	69 01       	movw	r12, r18
     1e6:	7a 01       	movw	r14, r20
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
     1e8:	ea e7       	ldi	r30, 0x7A	; 122
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	87 68       	ori	r24, 0x87	; 135
     1f0:	80 83       	st	Z, r24
	ADMUX = 0b00000000;		// clear ADMUX for ADC0 pin 
     1f2:	ec e7       	ldi	r30, 0x7C	; 124
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);	
     1f8:	80 81       	ld	r24, Z
     1fa:	80 64       	ori	r24, 0x40	; 64
     1fc:	80 83       	st	Z, r24
	i2c_init();
     1fe:	0e 94 5d 03 	call	0x6ba	; 0x6ba <i2c_init>
	uart_init(baud);
     202:	c7 01       	movw	r24, r14
     204:	b6 01       	movw	r22, r12
     206:	0e 94 b5 02 	call	0x56a	; 0x56a <uart_init>
}
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	df 90       	pop	r13
     210:	cf 90       	pop	r12
     212:	08 95       	ret

00000214 <get_adc_value>:
			read_command(uart_get_command());
		}
	}
}

char * get_adc_value(){
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
	ADCSRA |= (1<<ADSC);      // enable a single conversion
     21c:	ea e7       	ldi	r30, 0x7A	; 122
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	80 64       	ori	r24, 0x40	; 64
     224:	80 83       	st	Z, r24
	
	while (!(ADCSRA & (1<<ADIF))); // wait for the conversion to be completed		
     226:	80 81       	ld	r24, Z
     228:	84 ff       	sbrs	r24, 4
     22a:	fd cf       	rjmp	.-6      	; 0x226 <get_adc_value+0x12>
	
	float result = (ADC * 5.0)/1024;	// convert to float 
     22c:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     230:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
	char * buffer = (char* ) malloc(6 * sizeof(char));	
     234:	86 e0       	ldi	r24, 0x06	; 6
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 7e 05 	call	0xafc	; 0xafc <malloc>
     23c:	ec 01       	movw	r28, r24
	dtostrf(result, 3, 2, buffer); // convert float to string 
     23e:	b8 01       	movw	r22, r16
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 18 04 	call	0x830	; 0x830 <__floatunsisf>
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 ea       	ldi	r20, 0xA0	; 160
     24e:	50 e4       	ldi	r21, 0x40	; 64
     250:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsf3>
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e8       	ldi	r20, 0x80	; 128
     25a:	5a e3       	ldi	r21, 0x3A	; 58
     25c:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsf3>
     260:	8e 01       	movw	r16, r28
     262:	22 e0       	ldi	r18, 0x02	; 2
     264:	43 e0       	ldi	r20, 0x03	; 3
     266:	0e 94 5e 05 	call	0xabc	; 0xabc <dtostrf>

	ADCSRA |= (1<<ADIF);		// reset AD complete flag for next conversion. 
     26a:	ea e7       	ldi	r30, 0x7A	; 122
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	80 61       	ori	r24, 0x10	; 16
     272:	80 83       	st	Z, r24
	
	return buffer; 
}
     274:	ce 01       	movw	r24, r28
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <print_adc_value>:

void print_adc_value(char * buffer){
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	ec 01       	movw	r28, r24
	uart_send_string("V = ");
     286:	87 e4       	ldi	r24, 0x47	; 71
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <uart_send_string>
	uart_send_string(buffer);
     28e:	ce 01       	movw	r24, r28
     290:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <uart_send_string>
	uart_send_byte('\n');
     294:	8a e0       	ldi	r24, 0x0A	; 10
     296:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <uart_send_byte>
	
	free(buffer); 
     29a:	ce 01       	movw	r24, r28
     29c:	0e 94 16 06 	call	0xc2c	; 0xc2c <free>
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <set_dac_output>:
	}
	
	free(command);
}

void set_dac_output(uint8_t dac, float voltage){
     2a6:	cf 92       	push	r12
     2a8:	df 92       	push	r13
     2aa:	ef 92       	push	r14
     2ac:	ff 92       	push	r15
     2ae:	cf 93       	push	r28
     2b0:	c8 2f       	mov	r28, r24
     2b2:	6a 01       	movw	r12, r20
     2b4:	7b 01       	movw	r14, r22
	i2c_start(MAX518_ADDR + 1);     // send start signal to MAX518
     2b6:	81 e5       	ldi	r24, 0x51	; 81
     2b8:	0e 94 66 03 	call	0x6cc	; 0x6cc <i2c_start>
	if(dac == 1 || dac == 0){
     2bc:	c2 30       	cpi	r28, 0x02	; 2
     2be:	18 f4       	brcc	.+6      	; 0x2c6 <set_dac_output+0x20>
		i2c_write(dac);                        // write to DAC0
     2c0:	8c 2f       	mov	r24, r28
     2c2:	0e 94 bc 03 	call	0x778	; 0x778 <i2c_write>
	}
	if(voltage >= 0 && voltage <= 5){
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	a9 01       	movw	r20, r18
     2cc:	c7 01       	movw	r24, r14
     2ce:	b6 01       	movw	r22, r12
     2d0:	0e 94 a2 04 	call	0x944	; 0x944 <__gesf2>
     2d4:	88 23       	and	r24, r24
     2d6:	8c f0       	brlt	.+34     	; 0x2fa <set_dac_output+0x54>
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 ea       	ldi	r20, 0xA0	; 160
     2de:	50 e4       	ldi	r21, 0x40	; 64
     2e0:	c7 01       	movw	r24, r14
     2e2:	b6 01       	movw	r22, r12
     2e4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__cmpsf2>
     2e8:	18 16       	cp	r1, r24
     2ea:	3c f0       	brlt	.+14     	; 0x2fa <set_dac_output+0x54>
		i2c_write(voltage);                      // write voltage to dac0
     2ec:	c7 01       	movw	r24, r14
     2ee:	b6 01       	movw	r22, r12
     2f0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fixunssfsi>
     2f4:	86 2f       	mov	r24, r22
     2f6:	0e 94 bc 03 	call	0x778	; 0x778 <i2c_write>
	}
	
	i2c_stop();
     2fa:	0e 94 b8 03 	call	0x770	; 0x770 <i2c_stop>
}
     2fe:	cf 91       	pop	r28
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	08 95       	ret

0000030a <gen_wave_form>:

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
     30a:	bf 92       	push	r11
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	b8 2e       	mov	r11, r24
     31e:	c4 2e       	mov	r12, r20
	uart_send_byte('W');
     320:	87 e5       	ldi	r24, 0x57	; 87
     322:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <uart_send_byte>
	int i = 0; 
	while( i < cycles){
     326:	d1 2c       	mov	r13, r1
     328:	1c 14       	cp	r1, r12
     32a:	1d 04       	cpc	r1, r13
     32c:	b4 f0       	brlt	.+44     	; 0x35a <gen_wave_form+0x50>
     32e:	1c c0       	rjmp	.+56     	; 0x368 <gen_wave_form+0x5e>
		for(int i =0; i < 64; ++i){
			set_dac_output(dac, wave_form[i]);
     330:	69 91       	ld	r22, Y+
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 18 04 	call	0x830	; 0x830 <__floatunsisf>
     33c:	ab 01       	movw	r20, r22
     33e:	bc 01       	movw	r22, r24
     340:	8b 2d       	mov	r24, r11
     342:	0e 94 53 01 	call	0x2a6	; 0x2a6 <set_dac_output>

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
	uart_send_byte('W');
	int i = 0; 
	while( i < cycles){
		for(int i =0; i < 64; ++i){
     346:	0c 17       	cp	r16, r28
     348:	1d 07       	cpc	r17, r29
     34a:	91 f7       	brne	.-28     	; 0x330 <gen_wave_form+0x26>
			set_dac_output(dac, wave_form[i]);
		}
		//_delay_ms(1/(freq*1000));
		++i;
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	e8 1a       	sub	r14, r24
     350:	f8 0a       	sbc	r15, r24
}

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
	uart_send_byte('W');
	int i = 0; 
	while( i < cycles){
     352:	ec 14       	cp	r14, r12
     354:	fd 04       	cpc	r15, r13
     356:	29 f4       	brne	.+10     	; 0x362 <gen_wave_form+0x58>
     358:	07 c0       	rjmp	.+14     	; 0x368 <gen_wave_form+0x5e>
     35a:	e1 2c       	mov	r14, r1
     35c:	f1 2c       	mov	r15, r1
     35e:	07 e4       	ldi	r16, 0x47	; 71
     360:	11 e0       	ldi	r17, 0x01	; 1
     362:	c7 e0       	ldi	r28, 0x07	; 7
     364:	d1 e0       	ldi	r29, 0x01	; 1
     366:	e4 cf       	rjmp	.-56     	; 0x330 <gen_wave_form+0x26>
			set_dac_output(dac, wave_form[i]);
		}
		//_delay_ms(1/(freq*1000));
		++i;
	}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	df 90       	pop	r13
     376:	cf 90       	pop	r12
     378:	bf 90       	pop	r11
     37a:	08 95       	ret

0000037c <read_command>:
	uart_send_string(buffer);
	uart_send_byte('\n');
	
	free(buffer); 
}
void read_command(char * command) {
     37c:	ef 92       	push	r14
     37e:	ff 92       	push	r15
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <read_command+0xe>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	8c 01       	movw	r16, r24
	char delim[] = ",";
     390:	8c e2       	ldi	r24, 0x2C	; 44
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	9a 83       	std	Y+2, r25	; 0x02
     396:	89 83       	std	Y+1, r24	; 0x01

	char * token = strtok(command, delim);
     398:	be 01       	movw	r22, r28
     39a:	6f 5f       	subi	r22, 0xFF	; 255
     39c:	7f 4f       	sbci	r23, 0xFF	; 255
     39e:	c8 01       	movw	r24, r16
     3a0:	0e 94 c1 06 	call	0xd82	; 0xd82 <strtok>
	if(token[1] == 'G'){
     3a4:	fc 01       	movw	r30, r24
     3a6:	81 81       	ldd	r24, Z+1	; 0x01
     3a8:	87 34       	cpi	r24, 0x47	; 71
     3aa:	29 f4       	brne	.+10     	; 0x3b6 <read_command+0x3a>
		print_adc_value(get_adc_value());
     3ac:	0e 94 0a 01 	call	0x214	; 0x214 <get_adc_value>
     3b0:	0e 94 40 01 	call	0x280	; 0x280 <print_adc_value>
     3b4:	43 c0       	rjmp	.+134    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	} else if(token[1] == 'W') {
     3b6:	87 35       	cpi	r24, 0x57	; 87
     3b8:	19 f5       	brne	.+70     	; 0x400 <__EEPROM_REGION_LENGTH__>
		uint8_t dac = atoi(strtok(NULL, delim));
     3ba:	be 01       	movw	r22, r28
     3bc:	6f 5f       	subi	r22, 0xFF	; 255
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 c1 06 	call	0xd82	; 0xd82 <strtok>
     3c8:	0e 94 a3 06 	call	0xd46	; 0xd46 <atoi>
     3cc:	f8 2e       	mov	r15, r24
		uint8_t freq = atoi(strtok(NULL, delim));
     3ce:	be 01       	movw	r22, r28
     3d0:	6f 5f       	subi	r22, 0xFF	; 255
     3d2:	7f 4f       	sbci	r23, 0xFF	; 255
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 c1 06 	call	0xd82	; 0xd82 <strtok>
     3dc:	0e 94 a3 06 	call	0xd46	; 0xd46 <atoi>
     3e0:	e8 2e       	mov	r14, r24
		uint8_t cycles = atoi(strtok(NULL, delim));
     3e2:	be 01       	movw	r22, r28
     3e4:	6f 5f       	subi	r22, 0xFF	; 255
     3e6:	7f 4f       	sbci	r23, 0xFF	; 255
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 c1 06 	call	0xd82	; 0xd82 <strtok>
     3f0:	0e 94 a3 06 	call	0xd46	; 0xd46 <atoi>
	
		gen_wave_form(dac, freq, cycles);
     3f4:	48 2f       	mov	r20, r24
     3f6:	6e 2d       	mov	r22, r14
     3f8:	8f 2d       	mov	r24, r15
     3fa:	0e 94 85 01 	call	0x30a	; 0x30a <gen_wave_form>
     3fe:	1e c0       	rjmp	.+60     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	} else if(token[1] == 'S') {
     400:	83 35       	cpi	r24, 0x53	; 83
     402:	c9 f4       	brne	.+50     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		uint8_t dac = atoi(strtok(NULL, delim));
     404:	be 01       	movw	r22, r28
     406:	6f 5f       	subi	r22, 0xFF	; 255
     408:	7f 4f       	sbci	r23, 0xFF	; 255
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 c1 06 	call	0xd82	; 0xd82 <strtok>
     412:	0e 94 a3 06 	call	0xd46	; 0xd46 <atoi>
     416:	f8 2e       	mov	r15, r24
		float voltage = atof(strtok(NULL, delim));
     418:	be 01       	movw	r22, r28
     41a:	6f 5f       	subi	r22, 0xFF	; 255
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 c1 06 	call	0xd82	; 0xd82 <strtok>
     426:	0e 94 9f 06 	call	0xd3e	; 0xd3e <atof>
     42a:	ab 01       	movw	r20, r22
     42c:	bc 01       	movw	r22, r24
		set_dac_output(dac, voltage);
     42e:	8f 2d       	mov	r24, r15
     430:	0e 94 53 01 	call	0x2a6	; 0x2a6 <set_dac_output>
     434:	03 c0       	rjmp	.+6      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	} else {
		uart_send_byte('X');
     436:	88 e5       	ldi	r24, 0x58	; 88
     438:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <uart_send_byte>
	}
	
	free(command);
     43c:	c8 01       	movw	r24, r16
     43e:	0e 94 16 06 	call	0xc2c	; 0xc2c <free>
}
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	08 95       	ret

00000454 <main>:
	ADMUX |= (1<<REFS0);	
	i2c_init();
	uart_init(baud);
}

int main(void) {
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	29 97       	sbiw	r28, 0x09	; 9
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
	char str[] = "Started!";
     468:	89 e0       	ldi	r24, 0x09	; 9
     46a:	ec e4       	ldi	r30, 0x4C	; 76
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	de 01       	movw	r26, r28
     470:	11 96       	adiw	r26, 0x01	; 1
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	8a 95       	dec	r24
     478:	e1 f7       	brne	.-8      	; 0x472 <main+0x1e>
	setup(100000, 9600);
     47a:	20 e8       	ldi	r18, 0x80	; 128
     47c:	35 e2       	ldi	r19, 0x25	; 37
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	60 ea       	ldi	r22, 0xA0	; 160
     484:	76 e8       	ldi	r23, 0x86	; 134
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setup>
	sei();
     48e:	78 94       	sei

	get_adc_value();  // initialize adc for faster future computations. 
     490:	0e 94 0a 01 	call	0x214	; 0x214 <get_adc_value>

	uart_send_string(str);
     494:	ce 01       	movw	r24, r28
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <uart_send_string>
	uart_send_byte('\n');
     49c:	8a e0       	ldi	r24, 0x0A	; 10
     49e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <uart_send_byte>

	while (1) {	
		if(uart_string_complete()){
     4a2:	0e 94 b2 02 	call	0x564	; 0x564 <uart_string_complete>
     4a6:	88 23       	and	r24, r24
     4a8:	e1 f3       	breq	.-8      	; 0x4a2 <main+0x4e>
			read_command(uart_get_command());
     4aa:	0e 94 26 03 	call	0x64c	; 0x64c <uart_get_command>
     4ae:	0e 94 be 01 	call	0x37c	; 0x37c <read_command>
     4b2:	f7 cf       	rjmp	.-18     	; 0x4a2 <main+0x4e>

000004b4 <__vector_18>:

volatile static uint8_t uart_tx_busy = 1;
volatile static uint8_t uart_fetch_complete = 0;		// when the buffer has reached a '\n' char flag set to 1. once the string has been read from flag set to 0. 
UARTBuffer uart_buffer; 

ISR(USART_RX_vect){
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	2f 93       	push	r18
     4c0:	8f 93       	push	r24
     4c2:	9f 93       	push	r25
     4c4:	af 93       	push	r26
     4c6:	bf 93       	push	r27
     4c8:	ef 93       	push	r30
     4ca:	ff 93       	push	r31
	if (UDR0 == '\n' || UDR0 == '\r') { // if a newline or carriage return is received
     4cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     4d0:	8a 30       	cpi	r24, 0x0A	; 10
     4d2:	21 f0       	breq	.+8      	; 0x4dc <__vector_18+0x28>
     4d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     4d8:	8d 30       	cpi	r24, 0x0D	; 13
     4da:	51 f4       	brne	.+20     	; 0x4f0 <__vector_18+0x3c>
		if(uart_get_buffer_size() > 0){
     4dc:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <uart_buffer+0x80>
     4e0:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <uart_buffer+0x81>
     4e4:	89 2b       	or	r24, r25
     4e6:	c1 f0       	breq	.+48     	; 0x518 <__vector_18+0x64>
			uart_fetch_complete = 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
     4ee:	14 c0       	rjmp	.+40     	; 0x518 <__vector_18+0x64>
		}
	} else {
		uart_buffer.buffer[uart_buffer.head] = UDR0;			 // read in the UDR0 register
     4f0:	eb ed       	ldi	r30, 0xDB	; 219
     4f2:	f1 e0       	ldi	r31, 0x01	; 1
     4f4:	80 81       	ld	r24, Z
     4f6:	91 81       	ldd	r25, Z+1	; 0x01
     4f8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     4fc:	dc 01       	movw	r26, r24
     4fe:	a7 5a       	subi	r26, 0xA7	; 167
     500:	be 4f       	sbci	r27, 0xFE	; 254
     502:	2c 93       	st	X, r18
		uart_buffer.head++;
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	91 83       	std	Z+1, r25	; 0x01
     508:	80 83       	st	Z, r24
		uart_buffer.size++;
     50a:	e9 ed       	ldi	r30, 0xD9	; 217
     50c:	f1 e0       	ldi	r31, 0x01	; 1
     50e:	80 81       	ld	r24, Z
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
	}
	
	if (uart_buffer.head >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
     518:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <uart_buffer+0x82>
     51c:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <uart_buffer+0x83>
     520:	80 38       	cpi	r24, 0x80	; 128
     522:	91 05       	cpc	r25, r1
     524:	20 f0       	brcs	.+8      	; 0x52e <__vector_18+0x7a>
		uart_buffer.head = 0;
     526:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <uart_buffer+0x83>
     52a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <uart_buffer+0x82>
	}
	
}
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <__vector_20>:

ISR(USART_TX_vect){
     546:	1f 92       	push	r1
     548:	0f 92       	push	r0
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	0f 92       	push	r0
     54e:	11 24       	eor	r1, r1
     550:	8f 93       	push	r24
	uart_tx_busy = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     558:	8f 91       	pop	r24
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <uart_string_complete>:

uint8_t uart_string_complete(){
	return uart_fetch_complete;
     564:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
}
     568:	08 95       	ret

0000056a <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	aa 1f       	adc	r26, r26
     574:	bb 1f       	adc	r27, r27
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	aa 1f       	adc	r26, r26
     57c:	bb 1f       	adc	r27, r27
     57e:	9c 01       	movw	r18, r24
     580:	ad 01       	movw	r20, r26
     582:	22 0f       	add	r18, r18
     584:	33 1f       	adc	r19, r19
     586:	44 1f       	adc	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	22 0f       	add	r18, r18
     58c:	33 1f       	adc	r19, r19
     58e:	44 1f       	adc	r20, r20
     590:	55 1f       	adc	r21, r21
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	74 e2       	ldi	r23, 0x24	; 36
     596:	84 ef       	ldi	r24, 0xF4	; 244
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 3c 05 	call	0xa78	; 0xa78 <__udivmodsi4>
     59e:	ba 01       	movw	r22, r20
     5a0:	a9 01       	movw	r20, r18
     5a2:	41 50       	subi	r20, 0x01	; 1
     5a4:	51 09       	sbc	r21, r1
     5a6:	61 09       	sbc	r22, r1
     5a8:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
     5aa:	db 01       	movw	r26, r22
     5ac:	ca 01       	movw	r24, r20
     5ae:	88 27       	eor	r24, r24
     5b0:	9f 70       	andi	r25, 0x0F	; 15
     5b2:	aa 27       	eor	r26, r26
     5b4:	bb 27       	eor	r27, r27
     5b6:	89 2f       	mov	r24, r25
     5b8:	9a 2f       	mov	r25, r26
     5ba:	ab 2f       	mov	r26, r27
     5bc:	bb 27       	eor	r27, r27
     5be:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
     5c2:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
     5c6:	e1 ec       	ldi	r30, 0xC1	; 193
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	88 6d       	ori	r24, 0xD8	; 216
     5ce:	80 83       	st	Z, r24
	
	/* Initialize Objects */
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};		
     5d0:	e9 e5       	ldi	r30, 0x59	; 89
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	86 e8       	ldi	r24, 0x86	; 134
     5d6:	df 01       	movw	r26, r30
     5d8:	1d 92       	st	X+, r1
     5da:	8a 95       	dec	r24
     5dc:	e9 f7       	brne	.-6      	; 0x5d8 <uart_init+0x6e>
     5de:	08 95       	ret

000005e0 <uart_send_byte>:
}


void uart_send_byte(char data){
	while(uart_tx_busy == 0); // while UART is not transmitting
     5e0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5e4:	99 23       	and	r25, r25
     5e6:	e1 f3       	breq	.-8      	; 0x5e0 <uart_send_byte>
	
	uart_tx_busy = 0; 
     5e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = data;				// load byte passed into the function to the uart buffer
     5ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     5f0:	08 95       	ret

000005f2 <uart_send_string>:
}

void uart_send_string(char *arr) {
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
     5f8:	89 91       	ld	r24, Y+
     5fa:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <uart_send_byte>
		i++;
	} while(arr[i] != '\0');
     5fe:	88 81       	ld	r24, Y
     600:	81 11       	cpse	r24, r1
     602:	fa cf       	rjmp	.-12     	; 0x5f8 <uart_send_string+0x6>
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <uart_get_buffer_size>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
     60a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <uart_buffer+0x80>
     60e:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <uart_buffer+0x81>
     612:	08 95       	ret

00000614 <uart_read_buffer>:
	command[i] = '\0';
	return command; 
}

uint8_t uart_read_buffer(void){
	uint8_t data = uart_buffer.buffer[uart_buffer.tail];		// pull the data out of the buffer at the tail.
     614:	ed ed       	ldi	r30, 0xDD	; 221
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	20 81       	ld	r18, Z
     61a:	31 81       	ldd	r19, Z+1	; 0x01
     61c:	d9 01       	movw	r26, r18
     61e:	a7 5a       	subi	r26, 0xA7	; 167
     620:	be 4f       	sbci	r27, 0xFE	; 254
     622:	8c 91       	ld	r24, X
	uart_buffer.tail++;								// increment the position of the tail
     624:	2f 5f       	subi	r18, 0xFF	; 255
     626:	3f 4f       	sbci	r19, 0xFF	; 255
     628:	31 83       	std	Z+1, r19	; 0x01
     62a:	20 83       	st	Z, r18
	uart_buffer.size--; 							// decrement the size of the queue.
     62c:	e9 ed       	ldi	r30, 0xD9	; 217
     62e:	f1 e0       	ldi	r31, 0x01	; 1
     630:	40 81       	ld	r20, Z
     632:	51 81       	ldd	r21, Z+1	; 0x01
     634:	41 50       	subi	r20, 0x01	; 1
     636:	51 09       	sbc	r21, r1
     638:	51 83       	std	Z+1, r21	; 0x01
     63a:	40 83       	st	Z, r20

	if(uart_buffer.tail >= MAX_BUFFER_SIZE){		// reading has gone past the buffers size wrap the tail to the start.
     63c:	20 38       	cpi	r18, 0x80	; 128
     63e:	31 05       	cpc	r19, r1
     640:	20 f0       	brcs	.+8      	; 0x64a <uart_read_buffer+0x36>
		uart_buffer.tail = 0;
     642:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <uart_buffer+0x85>
     646:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <uart_buffer+0x84>
	}
	
	return data;
     64a:	08 95       	ret

0000064c <uart_get_command>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}

char * uart_get_command(void) {
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
	uart_fetch_complete = 0; 
     65a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
		i++;
	} while(arr[i] != '\0');
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     65e:	00 91 d9 01 	lds	r16, 0x01D9	; 0x8001d9 <uart_buffer+0x80>
     662:	10 91 da 01 	lds	r17, 0x01DA	; 0x8001da <uart_buffer+0x81>
}

char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
     666:	c8 01       	movw	r24, r16
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	0e 94 7e 05 	call	0xafc	; 0xafc <malloc>
     66e:	7c 01       	movw	r14, r24
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     670:	01 2b       	or	r16, r17
     672:	a9 f0       	breq	.+42     	; 0x69e <uart_get_command+0x52>
     674:	c0 e0       	ldi	r28, 0x00	; 0
		i++;
	} while(arr[i] != '\0');
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     676:	0f 2e       	mov	r0, r31
     678:	f9 ed       	ldi	r31, 0xD9	; 217
     67a:	cf 2e       	mov	r12, r31
     67c:	f1 e0       	ldi	r31, 0x01	; 1
     67e:	df 2e       	mov	r13, r31
     680:	f0 2d       	mov	r31, r0
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
     682:	87 01       	movw	r16, r14
     684:	0c 0f       	add	r16, r28
     686:	11 1d       	adc	r17, r1
     688:	0e 94 0a 03 	call	0x614	; 0x614 <uart_read_buffer>
     68c:	f8 01       	movw	r30, r16
     68e:	80 83       	st	Z, r24
		++i; 
     690:	cf 5f       	subi	r28, 0xFF	; 255
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     692:	f6 01       	movw	r30, r12
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	89 2b       	or	r24, r25
     69a:	99 f7       	brne	.-26     	; 0x682 <uart_get_command+0x36>
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <uart_get_command+0x54>

char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
     69e:	c0 e0       	ldi	r28, 0x00	; 0
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
		++i; 
	}
	command[i] = '\0';
     6a0:	f7 01       	movw	r30, r14
     6a2:	ec 0f       	add	r30, r28
     6a4:	f1 1d       	adc	r31, r1
     6a6:	10 82       	st	Z, r1
	return command; 
}
     6a8:	c7 01       	movw	r24, r14
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	08 95       	ret

000006ba <i2c_init>:
*************************************************************************/
void i2c_init()
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     6ba:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLK) - 16)/2;  /* must be > 10 for stable operation */
     6be:	88 e4       	ldi	r24, 0x48	; 72
     6c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  TWCR = (1<<TWEN);
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6ca:	08 95       	ret

000006cc <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     6cc:	94 ea       	ldi	r25, 0xA4	; 164
     6ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     6d2:	ec eb       	ldi	r30, 0xBC	; 188
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	90 81       	ld	r25, Z
     6d8:	99 23       	and	r25, r25
     6da:	ec f7       	brge	.-6      	; 0x6d6 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     6dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     6e0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     6e2:	98 30       	cpi	r25, 0x08	; 8
     6e4:	11 f0       	breq	.+4      	; 0x6ea <i2c_start+0x1e>
     6e6:	90 31       	cpi	r25, 0x10	; 16
     6e8:	a1 f4       	brne	.+40     	; 0x712 <i2c_start+0x46>

	// send device address
	TWDR = address;
     6ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     6ee:	84 e8       	ldi	r24, 0x84	; 132
     6f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     6f4:	ec eb       	ldi	r30, 0xBC	; 188
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	88 23       	and	r24, r24
     6fc:	ec f7       	brge	.-6      	; 0x6f8 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     6fe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     702:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     704:	98 31       	cpi	r25, 0x18	; 24
     706:	39 f0       	breq	.+14     	; 0x716 <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 34       	cpi	r25, 0x40	; 64
     70c:	29 f4       	brne	.+10     	; 0x718 <i2c_start+0x4c>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	08 95       	ret
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     716:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     718:	08 95       	ret

0000071a <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
    uint8_t   twst;

    while ( 1 ) {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     71e:	ec eb       	ldi	r30, 0xBC	; 188
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     724:	a9 eb       	ldi	r26, 0xB9	; 185
     726:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     728:	cb eb       	ldi	r28, 0xBB	; 187
     72a:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     72c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     72e:	44 e9       	ldi	r20, 0x94	; 148
{
    uint8_t   twst;

    while ( 1 ) {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     730:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     732:	90 81       	ld	r25, Z
     734:	99 23       	and	r25, r25
     736:	ec f7       	brge	.-6      	; 0x732 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     738:	9c 91       	ld	r25, X
     73a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     73c:	98 30       	cpi	r25, 0x08	; 8
     73e:	11 f0       	breq	.+4      	; 0x744 <i2c_start_wait+0x2a>
     740:	90 31       	cpi	r25, 0x10	; 16
     742:	b1 f7       	brne	.-20     	; 0x730 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
     744:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     746:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     748:	90 81       	ld	r25, Z
     74a:	99 23       	and	r25, r25
     74c:	ec f7       	brge	.-6      	; 0x748 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     74e:	9c 91       	ld	r25, X
     750:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     752:	90 32       	cpi	r25, 0x20	; 32
     754:	11 f0       	breq	.+4      	; 0x75a <i2c_start_wait+0x40>
     756:	98 35       	cpi	r25, 0x58	; 88
     758:	29 f4       	brne	.+10     	; 0x764 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     75a:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     75c:	90 81       	ld	r25, Z
     75e:	94 fd       	sbrc	r25, 4
     760:	fd cf       	rjmp	.-6      	; 0x75c <i2c_start_wait+0x42>
     762:	e6 cf       	rjmp	.-52     	; 0x730 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     76a:	0e 94 66 03 	call	0x6cc	; 0x6cc <i2c_start>

}/* i2c_rep_start */
     76e:	08 95       	ret

00000770 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     770:	84 e9       	ldi	r24, 0x94	; 148
     772:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     776:	08 95       	ret

00000778 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     778:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     77c:	84 e8       	ldi	r24, 0x84	; 132
     77e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while((TWCR & (1<<TWINT)) == 0);
     782:	ec eb       	ldi	r30, 0xBC	; 188
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	88 23       	and	r24, r24
     78a:	ec f7       	brge	.-6      	; 0x786 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     78c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     790:	98 7f       	andi	r25, 0xF8	; 248
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	98 32       	cpi	r25, 0x28	; 40
     796:	09 f4       	brne	.+2      	; 0x79a <i2c_write+0x22>
     798:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     79a:	08 95       	ret

0000079c <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     79c:	84 ec       	ldi	r24, 0xC4	; 196
     79e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
     7a2:	ec eb       	ldi	r30, 0xBC	; 188
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	88 23       	and	r24, r24
     7aa:	ec f7       	brge	.-6      	; 0x7a6 <i2c_readAck+0xa>

    return TWDR;
     7ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
     7b0:	08 95       	ret

000007b2 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     7b2:	84 e8       	ldi	r24, 0x84	; 132
     7b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     7b8:	ec eb       	ldi	r30, 0xBC	; 188
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	88 23       	and	r24, r24
     7c0:	ec f7       	brge	.-6      	; 0x7bc <i2c_readNak+0xa>
	
    return TWDR;
     7c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
     7c6:	08 95       	ret

000007c8 <__cmpsf2>:
     7c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_cmp>
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <__cmpsf2+0x8>
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	08 95       	ret

000007d2 <__fixunssfsi>:
     7d2:	0e 94 81 04 	call	0x902	; 0x902 <__fp_splitA>
     7d6:	88 f0       	brcs	.+34     	; 0x7fa <__fixunssfsi+0x28>
     7d8:	9f 57       	subi	r25, 0x7F	; 127
     7da:	98 f0       	brcs	.+38     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7dc:	b9 2f       	mov	r27, r25
     7de:	99 27       	eor	r25, r25
     7e0:	b7 51       	subi	r27, 0x17	; 23
     7e2:	b0 f0       	brcs	.+44     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7e4:	e1 f0       	breq	.+56     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7e6:	66 0f       	add	r22, r22
     7e8:	77 1f       	adc	r23, r23
     7ea:	88 1f       	adc	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	1a f0       	brmi	.+6      	; 0x7f6 <__fixunssfsi+0x24>
     7f0:	ba 95       	dec	r27
     7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__fixunssfsi+0x14>
     7f4:	14 c0       	rjmp	.+40     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7f6:	b1 30       	cpi	r27, 0x01	; 1
     7f8:	91 f0       	breq	.+36     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7fa:	0e 94 9b 04 	call	0x936	; 0x936 <__fp_zero>
     7fe:	b1 e0       	ldi	r27, 0x01	; 1
     800:	08 95       	ret
     802:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_zero>
     806:	67 2f       	mov	r22, r23
     808:	78 2f       	mov	r23, r24
     80a:	88 27       	eor	r24, r24
     80c:	b8 5f       	subi	r27, 0xF8	; 248
     80e:	39 f0       	breq	.+14     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     810:	b9 3f       	cpi	r27, 0xF9	; 249
     812:	cc f3       	brlt	.-14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     814:	86 95       	lsr	r24
     816:	77 95       	ror	r23
     818:	67 95       	ror	r22
     81a:	b3 95       	inc	r27
     81c:	d9 f7       	brne	.-10     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81e:	3e f4       	brtc	.+14     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     820:	90 95       	com	r25
     822:	80 95       	com	r24
     824:	70 95       	com	r23
     826:	61 95       	neg	r22
     828:	7f 4f       	sbci	r23, 0xFF	; 255
     82a:	8f 4f       	sbci	r24, 0xFF	; 255
     82c:	9f 4f       	sbci	r25, 0xFF	; 255
     82e:	08 95       	ret

00000830 <__floatunsisf>:
     830:	e8 94       	clt
     832:	09 c0       	rjmp	.+18     	; 0x846 <__floatsisf+0x12>

00000834 <__floatsisf>:
     834:	97 fb       	bst	r25, 7
     836:	3e f4       	brtc	.+14     	; 0x846 <__floatsisf+0x12>
     838:	90 95       	com	r25
     83a:	80 95       	com	r24
     83c:	70 95       	com	r23
     83e:	61 95       	neg	r22
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	8f 4f       	sbci	r24, 0xFF	; 255
     844:	9f 4f       	sbci	r25, 0xFF	; 255
     846:	99 23       	and	r25, r25
     848:	a9 f0       	breq	.+42     	; 0x874 <__floatsisf+0x40>
     84a:	f9 2f       	mov	r31, r25
     84c:	96 e9       	ldi	r25, 0x96	; 150
     84e:	bb 27       	eor	r27, r27
     850:	93 95       	inc	r25
     852:	f6 95       	lsr	r31
     854:	87 95       	ror	r24
     856:	77 95       	ror	r23
     858:	67 95       	ror	r22
     85a:	b7 95       	ror	r27
     85c:	f1 11       	cpse	r31, r1
     85e:	f8 cf       	rjmp	.-16     	; 0x850 <__floatsisf+0x1c>
     860:	fa f4       	brpl	.+62     	; 0x8a0 <__floatsisf+0x6c>
     862:	bb 0f       	add	r27, r27
     864:	11 f4       	brne	.+4      	; 0x86a <__floatsisf+0x36>
     866:	60 ff       	sbrs	r22, 0
     868:	1b c0       	rjmp	.+54     	; 0x8a0 <__floatsisf+0x6c>
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	8f 4f       	sbci	r24, 0xFF	; 255
     870:	9f 4f       	sbci	r25, 0xFF	; 255
     872:	16 c0       	rjmp	.+44     	; 0x8a0 <__floatsisf+0x6c>
     874:	88 23       	and	r24, r24
     876:	11 f0       	breq	.+4      	; 0x87c <__floatsisf+0x48>
     878:	96 e9       	ldi	r25, 0x96	; 150
     87a:	11 c0       	rjmp	.+34     	; 0x89e <__floatsisf+0x6a>
     87c:	77 23       	and	r23, r23
     87e:	21 f0       	breq	.+8      	; 0x888 <__floatsisf+0x54>
     880:	9e e8       	ldi	r25, 0x8E	; 142
     882:	87 2f       	mov	r24, r23
     884:	76 2f       	mov	r23, r22
     886:	05 c0       	rjmp	.+10     	; 0x892 <__floatsisf+0x5e>
     888:	66 23       	and	r22, r22
     88a:	71 f0       	breq	.+28     	; 0x8a8 <__floatsisf+0x74>
     88c:	96 e8       	ldi	r25, 0x86	; 134
     88e:	86 2f       	mov	r24, r22
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	2a f0       	brmi	.+10     	; 0x8a0 <__floatsisf+0x6c>
     896:	9a 95       	dec	r25
     898:	66 0f       	add	r22, r22
     89a:	77 1f       	adc	r23, r23
     89c:	88 1f       	adc	r24, r24
     89e:	da f7       	brpl	.-10     	; 0x896 <__floatsisf+0x62>
     8a0:	88 0f       	add	r24, r24
     8a2:	96 95       	lsr	r25
     8a4:	87 95       	ror	r24
     8a6:	97 f9       	bld	r25, 7
     8a8:	08 95       	ret

000008aa <__fp_cmp>:
     8aa:	99 0f       	add	r25, r25
     8ac:	00 08       	sbc	r0, r0
     8ae:	55 0f       	add	r21, r21
     8b0:	aa 0b       	sbc	r26, r26
     8b2:	e0 e8       	ldi	r30, 0x80	; 128
     8b4:	fe ef       	ldi	r31, 0xFE	; 254
     8b6:	16 16       	cp	r1, r22
     8b8:	17 06       	cpc	r1, r23
     8ba:	e8 07       	cpc	r30, r24
     8bc:	f9 07       	cpc	r31, r25
     8be:	c0 f0       	brcs	.+48     	; 0x8f0 <__fp_cmp+0x46>
     8c0:	12 16       	cp	r1, r18
     8c2:	13 06       	cpc	r1, r19
     8c4:	e4 07       	cpc	r30, r20
     8c6:	f5 07       	cpc	r31, r21
     8c8:	98 f0       	brcs	.+38     	; 0x8f0 <__fp_cmp+0x46>
     8ca:	62 1b       	sub	r22, r18
     8cc:	73 0b       	sbc	r23, r19
     8ce:	84 0b       	sbc	r24, r20
     8d0:	95 0b       	sbc	r25, r21
     8d2:	39 f4       	brne	.+14     	; 0x8e2 <__fp_cmp+0x38>
     8d4:	0a 26       	eor	r0, r26
     8d6:	61 f0       	breq	.+24     	; 0x8f0 <__fp_cmp+0x46>
     8d8:	23 2b       	or	r18, r19
     8da:	24 2b       	or	r18, r20
     8dc:	25 2b       	or	r18, r21
     8de:	21 f4       	brne	.+8      	; 0x8e8 <__fp_cmp+0x3e>
     8e0:	08 95       	ret
     8e2:	0a 26       	eor	r0, r26
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <__fp_cmp+0x3e>
     8e6:	a1 40       	sbci	r26, 0x01	; 1
     8e8:	a6 95       	lsr	r26
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	81 1d       	adc	r24, r1
     8ee:	81 1d       	adc	r24, r1
     8f0:	08 95       	ret

000008f2 <__fp_split3>:
     8f2:	57 fd       	sbrc	r21, 7
     8f4:	90 58       	subi	r25, 0x80	; 128
     8f6:	44 0f       	add	r20, r20
     8f8:	55 1f       	adc	r21, r21
     8fa:	59 f0       	breq	.+22     	; 0x912 <__fp_splitA+0x10>
     8fc:	5f 3f       	cpi	r21, 0xFF	; 255
     8fe:	71 f0       	breq	.+28     	; 0x91c <__fp_splitA+0x1a>
     900:	47 95       	ror	r20

00000902 <__fp_splitA>:
     902:	88 0f       	add	r24, r24
     904:	97 fb       	bst	r25, 7
     906:	99 1f       	adc	r25, r25
     908:	61 f0       	breq	.+24     	; 0x922 <__fp_splitA+0x20>
     90a:	9f 3f       	cpi	r25, 0xFF	; 255
     90c:	79 f0       	breq	.+30     	; 0x92c <__fp_splitA+0x2a>
     90e:	87 95       	ror	r24
     910:	08 95       	ret
     912:	12 16       	cp	r1, r18
     914:	13 06       	cpc	r1, r19
     916:	14 06       	cpc	r1, r20
     918:	55 1f       	adc	r21, r21
     91a:	f2 cf       	rjmp	.-28     	; 0x900 <__stack+0x1>
     91c:	46 95       	lsr	r20
     91e:	f1 df       	rcall	.-30     	; 0x902 <__fp_splitA>
     920:	08 c0       	rjmp	.+16     	; 0x932 <__fp_splitA+0x30>
     922:	16 16       	cp	r1, r22
     924:	17 06       	cpc	r1, r23
     926:	18 06       	cpc	r1, r24
     928:	99 1f       	adc	r25, r25
     92a:	f1 cf       	rjmp	.-30     	; 0x90e <__fp_splitA+0xc>
     92c:	86 95       	lsr	r24
     92e:	71 05       	cpc	r23, r1
     930:	61 05       	cpc	r22, r1
     932:	08 94       	sec
     934:	08 95       	ret

00000936 <__fp_zero>:
     936:	e8 94       	clt

00000938 <__fp_szero>:
     938:	bb 27       	eor	r27, r27
     93a:	66 27       	eor	r22, r22
     93c:	77 27       	eor	r23, r23
     93e:	cb 01       	movw	r24, r22
     940:	97 f9       	bld	r25, 7
     942:	08 95       	ret

00000944 <__gesf2>:
     944:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_cmp>
     948:	08 f4       	brcc	.+2      	; 0x94c <__gesf2+0x8>
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	08 95       	ret

0000094e <__mulsf3>:
     94e:	0e 94 ba 04 	call	0x974	; 0x974 <__mulsf3x>
     952:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_round>
     956:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_pscA>
     95a:	38 f0       	brcs	.+14     	; 0x96a <__mulsf3+0x1c>
     95c:	0e 94 24 05 	call	0xa48	; 0xa48 <__fp_pscB>
     960:	20 f0       	brcs	.+8      	; 0x96a <__mulsf3+0x1c>
     962:	95 23       	and	r25, r21
     964:	11 f0       	breq	.+4      	; 0x96a <__mulsf3+0x1c>
     966:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_inf>
     96a:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_nan>
     96e:	11 24       	eor	r1, r1
     970:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>

00000974 <__mulsf3x>:
     974:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_split3>
     978:	70 f3       	brcs	.-36     	; 0x956 <__mulsf3+0x8>

0000097a <__mulsf3_pse>:
     97a:	95 9f       	mul	r25, r21
     97c:	c1 f3       	breq	.-16     	; 0x96e <__mulsf3+0x20>
     97e:	95 0f       	add	r25, r21
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	55 1f       	adc	r21, r21
     984:	62 9f       	mul	r22, r18
     986:	f0 01       	movw	r30, r0
     988:	72 9f       	mul	r23, r18
     98a:	bb 27       	eor	r27, r27
     98c:	f0 0d       	add	r31, r0
     98e:	b1 1d       	adc	r27, r1
     990:	63 9f       	mul	r22, r19
     992:	aa 27       	eor	r26, r26
     994:	f0 0d       	add	r31, r0
     996:	b1 1d       	adc	r27, r1
     998:	aa 1f       	adc	r26, r26
     99a:	64 9f       	mul	r22, r20
     99c:	66 27       	eor	r22, r22
     99e:	b0 0d       	add	r27, r0
     9a0:	a1 1d       	adc	r26, r1
     9a2:	66 1f       	adc	r22, r22
     9a4:	82 9f       	mul	r24, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	b0 0d       	add	r27, r0
     9aa:	a1 1d       	adc	r26, r1
     9ac:	62 1f       	adc	r22, r18
     9ae:	73 9f       	mul	r23, r19
     9b0:	b0 0d       	add	r27, r0
     9b2:	a1 1d       	adc	r26, r1
     9b4:	62 1f       	adc	r22, r18
     9b6:	83 9f       	mul	r24, r19
     9b8:	a0 0d       	add	r26, r0
     9ba:	61 1d       	adc	r22, r1
     9bc:	22 1f       	adc	r18, r18
     9be:	74 9f       	mul	r23, r20
     9c0:	33 27       	eor	r19, r19
     9c2:	a0 0d       	add	r26, r0
     9c4:	61 1d       	adc	r22, r1
     9c6:	23 1f       	adc	r18, r19
     9c8:	84 9f       	mul	r24, r20
     9ca:	60 0d       	add	r22, r0
     9cc:	21 1d       	adc	r18, r1
     9ce:	82 2f       	mov	r24, r18
     9d0:	76 2f       	mov	r23, r22
     9d2:	6a 2f       	mov	r22, r26
     9d4:	11 24       	eor	r1, r1
     9d6:	9f 57       	subi	r25, 0x7F	; 127
     9d8:	50 40       	sbci	r21, 0x00	; 0
     9da:	9a f0       	brmi	.+38     	; 0xa02 <__mulsf3_pse+0x88>
     9dc:	f1 f0       	breq	.+60     	; 0xa1a <__mulsf3_pse+0xa0>
     9de:	88 23       	and	r24, r24
     9e0:	4a f0       	brmi	.+18     	; 0x9f4 <__mulsf3_pse+0x7a>
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	bb 1f       	adc	r27, r27
     9e8:	66 1f       	adc	r22, r22
     9ea:	77 1f       	adc	r23, r23
     9ec:	88 1f       	adc	r24, r24
     9ee:	91 50       	subi	r25, 0x01	; 1
     9f0:	50 40       	sbci	r21, 0x00	; 0
     9f2:	a9 f7       	brne	.-22     	; 0x9de <__mulsf3_pse+0x64>
     9f4:	9e 3f       	cpi	r25, 0xFE	; 254
     9f6:	51 05       	cpc	r21, r1
     9f8:	80 f0       	brcs	.+32     	; 0xa1a <__mulsf3_pse+0xa0>
     9fa:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_inf>
     9fe:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>
     a02:	5f 3f       	cpi	r21, 0xFF	; 255
     a04:	e4 f3       	brlt	.-8      	; 0x9fe <__mulsf3_pse+0x84>
     a06:	98 3e       	cpi	r25, 0xE8	; 232
     a08:	d4 f3       	brlt	.-12     	; 0x9fe <__mulsf3_pse+0x84>
     a0a:	86 95       	lsr	r24
     a0c:	77 95       	ror	r23
     a0e:	67 95       	ror	r22
     a10:	b7 95       	ror	r27
     a12:	f7 95       	ror	r31
     a14:	e7 95       	ror	r30
     a16:	9f 5f       	subi	r25, 0xFF	; 255
     a18:	c1 f7       	brne	.-16     	; 0xa0a <__mulsf3_pse+0x90>
     a1a:	fe 2b       	or	r31, r30
     a1c:	88 0f       	add	r24, r24
     a1e:	91 1d       	adc	r25, r1
     a20:	96 95       	lsr	r25
     a22:	87 95       	ror	r24
     a24:	97 f9       	bld	r25, 7
     a26:	08 95       	ret

00000a28 <__fp_inf>:
     a28:	97 f9       	bld	r25, 7
     a2a:	9f 67       	ori	r25, 0x7F	; 127
     a2c:	80 e8       	ldi	r24, 0x80	; 128
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	08 95       	ret

00000a34 <__fp_nan>:
     a34:	9f ef       	ldi	r25, 0xFF	; 255
     a36:	80 ec       	ldi	r24, 0xC0	; 192
     a38:	08 95       	ret

00000a3a <__fp_pscA>:
     a3a:	00 24       	eor	r0, r0
     a3c:	0a 94       	dec	r0
     a3e:	16 16       	cp	r1, r22
     a40:	17 06       	cpc	r1, r23
     a42:	18 06       	cpc	r1, r24
     a44:	09 06       	cpc	r0, r25
     a46:	08 95       	ret

00000a48 <__fp_pscB>:
     a48:	00 24       	eor	r0, r0
     a4a:	0a 94       	dec	r0
     a4c:	12 16       	cp	r1, r18
     a4e:	13 06       	cpc	r1, r19
     a50:	14 06       	cpc	r1, r20
     a52:	05 06       	cpc	r0, r21
     a54:	08 95       	ret

00000a56 <__fp_round>:
     a56:	09 2e       	mov	r0, r25
     a58:	03 94       	inc	r0
     a5a:	00 0c       	add	r0, r0
     a5c:	11 f4       	brne	.+4      	; 0xa62 <__fp_round+0xc>
     a5e:	88 23       	and	r24, r24
     a60:	52 f0       	brmi	.+20     	; 0xa76 <__fp_round+0x20>
     a62:	bb 0f       	add	r27, r27
     a64:	40 f4       	brcc	.+16     	; 0xa76 <__fp_round+0x20>
     a66:	bf 2b       	or	r27, r31
     a68:	11 f4       	brne	.+4      	; 0xa6e <__fp_round+0x18>
     a6a:	60 ff       	sbrs	r22, 0
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__fp_round+0x20>
     a6e:	6f 5f       	subi	r22, 0xFF	; 255
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	8f 4f       	sbci	r24, 0xFF	; 255
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	08 95       	ret

00000a78 <__udivmodsi4>:
     a78:	a1 e2       	ldi	r26, 0x21	; 33
     a7a:	1a 2e       	mov	r1, r26
     a7c:	aa 1b       	sub	r26, r26
     a7e:	bb 1b       	sub	r27, r27
     a80:	fd 01       	movw	r30, r26
     a82:	0d c0       	rjmp	.+26     	; 0xa9e <__udivmodsi4_ep>

00000a84 <__udivmodsi4_loop>:
     a84:	aa 1f       	adc	r26, r26
     a86:	bb 1f       	adc	r27, r27
     a88:	ee 1f       	adc	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	a2 17       	cp	r26, r18
     a8e:	b3 07       	cpc	r27, r19
     a90:	e4 07       	cpc	r30, r20
     a92:	f5 07       	cpc	r31, r21
     a94:	20 f0       	brcs	.+8      	; 0xa9e <__udivmodsi4_ep>
     a96:	a2 1b       	sub	r26, r18
     a98:	b3 0b       	sbc	r27, r19
     a9a:	e4 0b       	sbc	r30, r20
     a9c:	f5 0b       	sbc	r31, r21

00000a9e <__udivmodsi4_ep>:
     a9e:	66 1f       	adc	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	88 1f       	adc	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	1a 94       	dec	r1
     aa8:	69 f7       	brne	.-38     	; 0xa84 <__udivmodsi4_loop>
     aaa:	60 95       	com	r22
     aac:	70 95       	com	r23
     aae:	80 95       	com	r24
     ab0:	90 95       	com	r25
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	bd 01       	movw	r22, r26
     ab8:	cf 01       	movw	r24, r30
     aba:	08 95       	ret

00000abc <dtostrf>:
     abc:	ef 92       	push	r14
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	e8 01       	movw	r28, r16
     ac8:	47 fd       	sbrc	r20, 7
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <dtostrf+0x14>
     acc:	34 e0       	ldi	r19, 0x04	; 4
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <dtostrf+0x16>
     ad0:	34 e1       	ldi	r19, 0x14	; 20
     ad2:	04 2e       	mov	r0, r20
     ad4:	00 0c       	add	r0, r0
     ad6:	55 0b       	sbc	r21, r21
     ad8:	57 ff       	sbrs	r21, 7
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <dtostrf+0x26>
     adc:	51 95       	neg	r21
     ade:	41 95       	neg	r20
     ae0:	51 09       	sbc	r21, r1
     ae2:	e3 2e       	mov	r14, r19
     ae4:	02 2f       	mov	r16, r18
     ae6:	24 2f       	mov	r18, r20
     ae8:	ae 01       	movw	r20, r28
     aea:	0e 94 f5 06 	call	0xdea	; 0xdea <dtoa_prf>
     aee:	ce 01       	movw	r24, r28
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <malloc>:
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	91 05       	cpc	r25, r1
     b08:	10 f4       	brcc	.+4      	; 0xb0e <malloc+0x12>
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <__flp>
     b12:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <__flp+0x1>
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	30 97       	sbiw	r30, 0x00	; 0
     b20:	19 f1       	breq	.+70     	; 0xb68 <malloc+0x6c>
     b22:	40 81       	ld	r20, Z
     b24:	51 81       	ldd	r21, Z+1	; 0x01
     b26:	02 81       	ldd	r16, Z+2	; 0x02
     b28:	13 81       	ldd	r17, Z+3	; 0x03
     b2a:	48 17       	cp	r20, r24
     b2c:	59 07       	cpc	r21, r25
     b2e:	c8 f0       	brcs	.+50     	; 0xb62 <malloc+0x66>
     b30:	84 17       	cp	r24, r20
     b32:	95 07       	cpc	r25, r21
     b34:	69 f4       	brne	.+26     	; 0xb50 <malloc+0x54>
     b36:	10 97       	sbiw	r26, 0x00	; 0
     b38:	31 f0       	breq	.+12     	; 0xb46 <malloc+0x4a>
     b3a:	12 96       	adiw	r26, 0x02	; 2
     b3c:	0c 93       	st	X, r16
     b3e:	12 97       	sbiw	r26, 0x02	; 2
     b40:	13 96       	adiw	r26, 0x03	; 3
     b42:	1c 93       	st	X, r17
     b44:	27 c0       	rjmp	.+78     	; 0xb94 <malloc+0x98>
     b46:	00 93 e1 01 	sts	0x01E1, r16	; 0x8001e1 <__flp>
     b4a:	10 93 e2 01 	sts	0x01E2, r17	; 0x8001e2 <__flp+0x1>
     b4e:	22 c0       	rjmp	.+68     	; 0xb94 <malloc+0x98>
     b50:	21 15       	cp	r18, r1
     b52:	31 05       	cpc	r19, r1
     b54:	19 f0       	breq	.+6      	; 0xb5c <malloc+0x60>
     b56:	42 17       	cp	r20, r18
     b58:	53 07       	cpc	r21, r19
     b5a:	18 f4       	brcc	.+6      	; 0xb62 <malloc+0x66>
     b5c:	9a 01       	movw	r18, r20
     b5e:	bd 01       	movw	r22, r26
     b60:	ef 01       	movw	r28, r30
     b62:	df 01       	movw	r26, r30
     b64:	f8 01       	movw	r30, r16
     b66:	db cf       	rjmp	.-74     	; 0xb1e <malloc+0x22>
     b68:	21 15       	cp	r18, r1
     b6a:	31 05       	cpc	r19, r1
     b6c:	f9 f0       	breq	.+62     	; 0xbac <malloc+0xb0>
     b6e:	28 1b       	sub	r18, r24
     b70:	39 0b       	sbc	r19, r25
     b72:	24 30       	cpi	r18, 0x04	; 4
     b74:	31 05       	cpc	r19, r1
     b76:	80 f4       	brcc	.+32     	; 0xb98 <malloc+0x9c>
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	9b 81       	ldd	r25, Y+3	; 0x03
     b7c:	61 15       	cp	r22, r1
     b7e:	71 05       	cpc	r23, r1
     b80:	21 f0       	breq	.+8      	; 0xb8a <malloc+0x8e>
     b82:	fb 01       	movw	r30, r22
     b84:	93 83       	std	Z+3, r25	; 0x03
     b86:	82 83       	std	Z+2, r24	; 0x02
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <malloc+0x96>
     b8a:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <__flp+0x1>
     b8e:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <__flp>
     b92:	fe 01       	movw	r30, r28
     b94:	32 96       	adiw	r30, 0x02	; 2
     b96:	44 c0       	rjmp	.+136    	; 0xc20 <malloc+0x124>
     b98:	fe 01       	movw	r30, r28
     b9a:	e2 0f       	add	r30, r18
     b9c:	f3 1f       	adc	r31, r19
     b9e:	81 93       	st	Z+, r24
     ba0:	91 93       	st	Z+, r25
     ba2:	22 50       	subi	r18, 0x02	; 2
     ba4:	31 09       	sbc	r19, r1
     ba6:	39 83       	std	Y+1, r19	; 0x01
     ba8:	28 83       	st	Y, r18
     baa:	3a c0       	rjmp	.+116    	; 0xc20 <malloc+0x124>
     bac:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <__brkval>
     bb0:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <__brkval+0x1>
     bb4:	23 2b       	or	r18, r19
     bb6:	41 f4       	brne	.+16     	; 0xbc8 <malloc+0xcc>
     bb8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__malloc_heap_start>
     bbc:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__malloc_heap_start+0x1>
     bc0:	30 93 e0 01 	sts	0x01E0, r19	; 0x8001e0 <__brkval+0x1>
     bc4:	20 93 df 01 	sts	0x01DF, r18	; 0x8001df <__brkval>
     bc8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <__malloc_heap_end>
     bcc:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <__malloc_heap_end+0x1>
     bd0:	21 15       	cp	r18, r1
     bd2:	31 05       	cpc	r19, r1
     bd4:	41 f4       	brne	.+16     	; 0xbe6 <malloc+0xea>
     bd6:	2d b7       	in	r18, 0x3d	; 61
     bd8:	3e b7       	in	r19, 0x3e	; 62
     bda:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <__malloc_margin>
     bde:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <__malloc_margin+0x1>
     be2:	24 1b       	sub	r18, r20
     be4:	35 0b       	sbc	r19, r21
     be6:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <__brkval>
     bea:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <__brkval+0x1>
     bee:	e2 17       	cp	r30, r18
     bf0:	f3 07       	cpc	r31, r19
     bf2:	a0 f4       	brcc	.+40     	; 0xc1c <malloc+0x120>
     bf4:	2e 1b       	sub	r18, r30
     bf6:	3f 0b       	sbc	r19, r31
     bf8:	28 17       	cp	r18, r24
     bfa:	39 07       	cpc	r19, r25
     bfc:	78 f0       	brcs	.+30     	; 0xc1c <malloc+0x120>
     bfe:	ac 01       	movw	r20, r24
     c00:	4e 5f       	subi	r20, 0xFE	; 254
     c02:	5f 4f       	sbci	r21, 0xFF	; 255
     c04:	24 17       	cp	r18, r20
     c06:	35 07       	cpc	r19, r21
     c08:	48 f0       	brcs	.+18     	; 0xc1c <malloc+0x120>
     c0a:	4e 0f       	add	r20, r30
     c0c:	5f 1f       	adc	r21, r31
     c0e:	50 93 e0 01 	sts	0x01E0, r21	; 0x8001e0 <__brkval+0x1>
     c12:	40 93 df 01 	sts	0x01DF, r20	; 0x8001df <__brkval>
     c16:	81 93       	st	Z+, r24
     c18:	91 93       	st	Z+, r25
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <malloc+0x124>
     c1c:	e0 e0       	ldi	r30, 0x00	; 0
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	cf 01       	movw	r24, r30
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <free>:
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	09 f4       	brne	.+2      	; 0xc36 <free+0xa>
     c34:	81 c0       	rjmp	.+258    	; 0xd38 <free+0x10c>
     c36:	fc 01       	movw	r30, r24
     c38:	32 97       	sbiw	r30, 0x02	; 2
     c3a:	13 82       	std	Z+3, r1	; 0x03
     c3c:	12 82       	std	Z+2, r1	; 0x02
     c3e:	a0 91 e1 01 	lds	r26, 0x01E1	; 0x8001e1 <__flp>
     c42:	b0 91 e2 01 	lds	r27, 0x01E2	; 0x8001e2 <__flp+0x1>
     c46:	10 97       	sbiw	r26, 0x00	; 0
     c48:	81 f4       	brne	.+32     	; 0xc6a <free+0x3e>
     c4a:	20 81       	ld	r18, Z
     c4c:	31 81       	ldd	r19, Z+1	; 0x01
     c4e:	82 0f       	add	r24, r18
     c50:	93 1f       	adc	r25, r19
     c52:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <__brkval>
     c56:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <__brkval+0x1>
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	51 f5       	brne	.+84     	; 0xcb4 <free+0x88>
     c60:	f0 93 e0 01 	sts	0x01E0, r31	; 0x8001e0 <__brkval+0x1>
     c64:	e0 93 df 01 	sts	0x01DF, r30	; 0x8001df <__brkval>
     c68:	67 c0       	rjmp	.+206    	; 0xd38 <free+0x10c>
     c6a:	ed 01       	movw	r28, r26
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	ce 17       	cp	r28, r30
     c72:	df 07       	cpc	r29, r31
     c74:	40 f4       	brcc	.+16     	; 0xc86 <free+0x5a>
     c76:	4a 81       	ldd	r20, Y+2	; 0x02
     c78:	5b 81       	ldd	r21, Y+3	; 0x03
     c7a:	9e 01       	movw	r18, r28
     c7c:	41 15       	cp	r20, r1
     c7e:	51 05       	cpc	r21, r1
     c80:	f1 f0       	breq	.+60     	; 0xcbe <free+0x92>
     c82:	ea 01       	movw	r28, r20
     c84:	f5 cf       	rjmp	.-22     	; 0xc70 <free+0x44>
     c86:	d3 83       	std	Z+3, r29	; 0x03
     c88:	c2 83       	std	Z+2, r28	; 0x02
     c8a:	40 81       	ld	r20, Z
     c8c:	51 81       	ldd	r21, Z+1	; 0x01
     c8e:	84 0f       	add	r24, r20
     c90:	95 1f       	adc	r25, r21
     c92:	c8 17       	cp	r28, r24
     c94:	d9 07       	cpc	r29, r25
     c96:	59 f4       	brne	.+22     	; 0xcae <free+0x82>
     c98:	88 81       	ld	r24, Y
     c9a:	99 81       	ldd	r25, Y+1	; 0x01
     c9c:	84 0f       	add	r24, r20
     c9e:	95 1f       	adc	r25, r21
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	91 83       	std	Z+1, r25	; 0x01
     ca4:	80 83       	st	Z, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	9b 81       	ldd	r25, Y+3	; 0x03
     caa:	93 83       	std	Z+3, r25	; 0x03
     cac:	82 83       	std	Z+2, r24	; 0x02
     cae:	21 15       	cp	r18, r1
     cb0:	31 05       	cpc	r19, r1
     cb2:	29 f4       	brne	.+10     	; 0xcbe <free+0x92>
     cb4:	f0 93 e2 01 	sts	0x01E2, r31	; 0x8001e2 <__flp+0x1>
     cb8:	e0 93 e1 01 	sts	0x01E1, r30	; 0x8001e1 <__flp>
     cbc:	3d c0       	rjmp	.+122    	; 0xd38 <free+0x10c>
     cbe:	e9 01       	movw	r28, r18
     cc0:	fb 83       	std	Y+3, r31	; 0x03
     cc2:	ea 83       	std	Y+2, r30	; 0x02
     cc4:	49 91       	ld	r20, Y+
     cc6:	59 91       	ld	r21, Y+
     cc8:	c4 0f       	add	r28, r20
     cca:	d5 1f       	adc	r29, r21
     ccc:	ec 17       	cp	r30, r28
     cce:	fd 07       	cpc	r31, r29
     cd0:	61 f4       	brne	.+24     	; 0xcea <free+0xbe>
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	84 0f       	add	r24, r20
     cd8:	95 1f       	adc	r25, r21
     cda:	02 96       	adiw	r24, 0x02	; 2
     cdc:	e9 01       	movw	r28, r18
     cde:	99 83       	std	Y+1, r25	; 0x01
     ce0:	88 83       	st	Y, r24
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	9b 83       	std	Y+3, r25	; 0x03
     ce8:	8a 83       	std	Y+2, r24	; 0x02
     cea:	e0 e0       	ldi	r30, 0x00	; 0
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	12 96       	adiw	r26, 0x02	; 2
     cf0:	8d 91       	ld	r24, X+
     cf2:	9c 91       	ld	r25, X
     cf4:	13 97       	sbiw	r26, 0x03	; 3
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	19 f0       	breq	.+6      	; 0xd00 <free+0xd4>
     cfa:	fd 01       	movw	r30, r26
     cfc:	dc 01       	movw	r26, r24
     cfe:	f7 cf       	rjmp	.-18     	; 0xcee <free+0xc2>
     d00:	8d 91       	ld	r24, X+
     d02:	9c 91       	ld	r25, X
     d04:	11 97       	sbiw	r26, 0x01	; 1
     d06:	9d 01       	movw	r18, r26
     d08:	2e 5f       	subi	r18, 0xFE	; 254
     d0a:	3f 4f       	sbci	r19, 0xFF	; 255
     d0c:	82 0f       	add	r24, r18
     d0e:	93 1f       	adc	r25, r19
     d10:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <__brkval>
     d14:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <__brkval+0x1>
     d18:	28 17       	cp	r18, r24
     d1a:	39 07       	cpc	r19, r25
     d1c:	69 f4       	brne	.+26     	; 0xd38 <free+0x10c>
     d1e:	30 97       	sbiw	r30, 0x00	; 0
     d20:	29 f4       	brne	.+10     	; 0xd2c <free+0x100>
     d22:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__flp+0x1>
     d26:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <__flp>
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <free+0x104>
     d2c:	13 82       	std	Z+3, r1	; 0x03
     d2e:	12 82       	std	Z+2, r1	; 0x02
     d30:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <__brkval+0x1>
     d34:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <__brkval>
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	08 95       	ret

00000d3e <atof>:
     d3e:	66 27       	eor	r22, r22
     d40:	77 27       	eor	r23, r23
     d42:	0c 94 4f 08 	jmp	0x109e	; 0x109e <strtod>

00000d46 <atoi>:
     d46:	fc 01       	movw	r30, r24
     d48:	88 27       	eor	r24, r24
     d4a:	99 27       	eor	r25, r25
     d4c:	e8 94       	clt
     d4e:	21 91       	ld	r18, Z+
     d50:	20 32       	cpi	r18, 0x20	; 32
     d52:	e9 f3       	breq	.-6      	; 0xd4e <atoi+0x8>
     d54:	29 30       	cpi	r18, 0x09	; 9
     d56:	10 f0       	brcs	.+4      	; 0xd5c <atoi+0x16>
     d58:	2e 30       	cpi	r18, 0x0E	; 14
     d5a:	c8 f3       	brcs	.-14     	; 0xd4e <atoi+0x8>
     d5c:	2b 32       	cpi	r18, 0x2B	; 43
     d5e:	41 f0       	breq	.+16     	; 0xd70 <atoi+0x2a>
     d60:	2d 32       	cpi	r18, 0x2D	; 45
     d62:	39 f4       	brne	.+14     	; 0xd72 <atoi+0x2c>
     d64:	68 94       	set
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <atoi+0x2a>
     d68:	0e 94 ed 06 	call	0xdda	; 0xdda <__mulhi_const_10>
     d6c:	82 0f       	add	r24, r18
     d6e:	91 1d       	adc	r25, r1
     d70:	21 91       	ld	r18, Z+
     d72:	20 53       	subi	r18, 0x30	; 48
     d74:	2a 30       	cpi	r18, 0x0A	; 10
     d76:	c0 f3       	brcs	.-16     	; 0xd68 <atoi+0x22>
     d78:	1e f4       	brtc	.+6      	; 0xd80 <atoi+0x3a>
     d7a:	90 95       	com	r25
     d7c:	81 95       	neg	r24
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	08 95       	ret

00000d82 <strtok>:
     d82:	47 e5       	ldi	r20, 0x57	; 87
     d84:	51 e0       	ldi	r21, 0x01	; 1
     d86:	0e 94 c6 06 	call	0xd8c	; 0xd8c <strtok_r>
     d8a:	08 95       	ret

00000d8c <strtok_r>:
     d8c:	fa 01       	movw	r30, r20
     d8e:	a1 91       	ld	r26, Z+
     d90:	b0 81       	ld	r27, Z
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	19 f4       	brne	.+6      	; 0xd9c <strtok_r+0x10>
     d96:	10 97       	sbiw	r26, 0x00	; 0
     d98:	e1 f0       	breq	.+56     	; 0xdd2 <strtok_r+0x46>
     d9a:	cd 01       	movw	r24, r26
     d9c:	dc 01       	movw	r26, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0d 90       	ld	r0, X+
     da2:	00 20       	and	r0, r0
     da4:	11 f4       	brne	.+4      	; 0xdaa <strtok_r+0x1e>
     da6:	c0 01       	movw	r24, r0
     da8:	13 c0       	rjmp	.+38     	; 0xdd0 <strtok_r+0x44>
     daa:	fb 01       	movw	r30, r22
     dac:	21 91       	ld	r18, Z+
     dae:	22 23       	and	r18, r18
     db0:	19 f0       	breq	.+6      	; 0xdb8 <strtok_r+0x2c>
     db2:	20 15       	cp	r18, r0
     db4:	d9 f7       	brne	.-10     	; 0xdac <strtok_r+0x20>
     db6:	f3 cf       	rjmp	.-26     	; 0xd9e <strtok_r+0x12>
     db8:	fb 01       	movw	r30, r22
     dba:	21 91       	ld	r18, Z+
     dbc:	20 15       	cp	r18, r0
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <strtok_r+0x3a>
     dc0:	1e 92       	st	-X, r1
     dc2:	11 96       	adiw	r26, 0x01	; 1
     dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <strtok_r+0x46>
     dc6:	22 23       	and	r18, r18
     dc8:	c1 f7       	brne	.-16     	; 0xdba <strtok_r+0x2e>
     dca:	0d 90       	ld	r0, X+
     dcc:	00 20       	and	r0, r0
     dce:	a1 f7       	brne	.-24     	; 0xdb8 <strtok_r+0x2c>
     dd0:	d0 01       	movw	r26, r0
     dd2:	fa 01       	movw	r30, r20
     dd4:	a1 93       	st	Z+, r26
     dd6:	b0 83       	st	Z, r27
     dd8:	08 95       	ret

00000dda <__mulhi_const_10>:
     dda:	7a e0       	ldi	r23, 0x0A	; 10
     ddc:	97 9f       	mul	r25, r23
     dde:	90 2d       	mov	r25, r0
     de0:	87 9f       	mul	r24, r23
     de2:	80 2d       	mov	r24, r0
     de4:	91 0d       	add	r25, r1
     de6:	11 24       	eor	r1, r1
     de8:	08 95       	ret

00000dea <dtoa_prf>:
     dea:	a9 e0       	ldi	r26, 0x09	; 9
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	eb ef       	ldi	r30, 0xFB	; 251
     df0:	f6 e0       	ldi	r31, 0x06	; 6
     df2:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__prologue_saves__+0xc>
     df6:	6a 01       	movw	r12, r20
     df8:	12 2f       	mov	r17, r18
     dfa:	b0 2e       	mov	r11, r16
     dfc:	2b e3       	ldi	r18, 0x3B	; 59
     dfe:	20 17       	cp	r18, r16
     e00:	20 f0       	brcs	.+8      	; 0xe0a <dtoa_prf+0x20>
     e02:	ff 24       	eor	r15, r15
     e04:	f3 94       	inc	r15
     e06:	f0 0e       	add	r15, r16
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <dtoa_prf+0x24>
     e0a:	2c e3       	ldi	r18, 0x3C	; 60
     e0c:	f2 2e       	mov	r15, r18
     e0e:	0f 2d       	mov	r16, r15
     e10:	27 e0       	ldi	r18, 0x07	; 7
     e12:	ae 01       	movw	r20, r28
     e14:	4f 5f       	subi	r20, 0xFF	; 255
     e16:	5f 4f       	sbci	r21, 0xFF	; 255
     e18:	0e 94 9d 09 	call	0x133a	; 0x133a <__ftoa_engine>
     e1c:	bc 01       	movw	r22, r24
     e1e:	49 81       	ldd	r20, Y+1	; 0x01
     e20:	84 2f       	mov	r24, r20
     e22:	89 70       	andi	r24, 0x09	; 9
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	31 f0       	breq	.+12     	; 0xe34 <dtoa_prf+0x4a>
     e28:	e1 fc       	sbrc	r14, 1
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <dtoa_prf+0x4e>
     e2c:	e0 fe       	sbrs	r14, 0
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <dtoa_prf+0x52>
     e30:	90 e2       	ldi	r25, 0x20	; 32
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <dtoa_prf+0x54>
     e34:	9d e2       	ldi	r25, 0x2D	; 45
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <dtoa_prf+0x54>
     e38:	9b e2       	ldi	r25, 0x2B	; 43
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <dtoa_prf+0x54>
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	5e 2d       	mov	r21, r14
     e40:	50 71       	andi	r21, 0x10	; 16
     e42:	43 ff       	sbrs	r20, 3
     e44:	3c c0       	rjmp	.+120    	; 0xebe <dtoa_prf+0xd4>
     e46:	91 11       	cpse	r25, r1
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <dtoa_prf+0x64>
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <dtoa_prf+0x66>
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	81 17       	cp	r24, r17
     e52:	18 f4       	brcc	.+6      	; 0xe5a <dtoa_prf+0x70>
     e54:	21 2f       	mov	r18, r17
     e56:	28 1b       	sub	r18, r24
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <dtoa_prf+0x72>
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	51 11       	cpse	r21, r1
     e5e:	0b c0       	rjmp	.+22     	; 0xe76 <dtoa_prf+0x8c>
     e60:	f6 01       	movw	r30, r12
     e62:	82 2f       	mov	r24, r18
     e64:	30 e2       	ldi	r19, 0x20	; 32
     e66:	88 23       	and	r24, r24
     e68:	19 f0       	breq	.+6      	; 0xe70 <dtoa_prf+0x86>
     e6a:	31 93       	st	Z+, r19
     e6c:	81 50       	subi	r24, 0x01	; 1
     e6e:	fb cf       	rjmp	.-10     	; 0xe66 <dtoa_prf+0x7c>
     e70:	c2 0e       	add	r12, r18
     e72:	d1 1c       	adc	r13, r1
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	99 23       	and	r25, r25
     e78:	29 f0       	breq	.+10     	; 0xe84 <dtoa_prf+0x9a>
     e7a:	d6 01       	movw	r26, r12
     e7c:	9c 93       	st	X, r25
     e7e:	f6 01       	movw	r30, r12
     e80:	31 96       	adiw	r30, 0x01	; 1
     e82:	6f 01       	movw	r12, r30
     e84:	c6 01       	movw	r24, r12
     e86:	03 96       	adiw	r24, 0x03	; 3
     e88:	e2 fe       	sbrs	r14, 2
     e8a:	0a c0       	rjmp	.+20     	; 0xea0 <dtoa_prf+0xb6>
     e8c:	3e e4       	ldi	r19, 0x4E	; 78
     e8e:	d6 01       	movw	r26, r12
     e90:	3c 93       	st	X, r19
     e92:	41 e4       	ldi	r20, 0x41	; 65
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	4c 93       	st	X, r20
     e98:	11 97       	sbiw	r26, 0x01	; 1
     e9a:	12 96       	adiw	r26, 0x02	; 2
     e9c:	3c 93       	st	X, r19
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <dtoa_prf+0xc2>
     ea0:	3e e6       	ldi	r19, 0x6E	; 110
     ea2:	f6 01       	movw	r30, r12
     ea4:	30 83       	st	Z, r19
     ea6:	41 e6       	ldi	r20, 0x61	; 97
     ea8:	41 83       	std	Z+1, r20	; 0x01
     eaa:	32 83       	std	Z+2, r19	; 0x02
     eac:	fc 01       	movw	r30, r24
     eae:	32 2f       	mov	r19, r18
     eb0:	40 e2       	ldi	r20, 0x20	; 32
     eb2:	33 23       	and	r19, r19
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <dtoa_prf+0xce>
     eb6:	42 c0       	rjmp	.+132    	; 0xf3c <dtoa_prf+0x152>
     eb8:	41 93       	st	Z+, r20
     eba:	31 50       	subi	r19, 0x01	; 1
     ebc:	fa cf       	rjmp	.-12     	; 0xeb2 <dtoa_prf+0xc8>
     ebe:	42 ff       	sbrs	r20, 2
     ec0:	44 c0       	rjmp	.+136    	; 0xf4a <dtoa_prf+0x160>
     ec2:	91 11       	cpse	r25, r1
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <dtoa_prf+0xe0>
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <dtoa_prf+0xe2>
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	81 17       	cp	r24, r17
     ece:	18 f4       	brcc	.+6      	; 0xed6 <dtoa_prf+0xec>
     ed0:	21 2f       	mov	r18, r17
     ed2:	28 1b       	sub	r18, r24
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <dtoa_prf+0xee>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	51 11       	cpse	r21, r1
     eda:	0b c0       	rjmp	.+22     	; 0xef2 <dtoa_prf+0x108>
     edc:	f6 01       	movw	r30, r12
     ede:	82 2f       	mov	r24, r18
     ee0:	30 e2       	ldi	r19, 0x20	; 32
     ee2:	88 23       	and	r24, r24
     ee4:	19 f0       	breq	.+6      	; 0xeec <dtoa_prf+0x102>
     ee6:	31 93       	st	Z+, r19
     ee8:	81 50       	subi	r24, 0x01	; 1
     eea:	fb cf       	rjmp	.-10     	; 0xee2 <dtoa_prf+0xf8>
     eec:	c2 0e       	add	r12, r18
     eee:	d1 1c       	adc	r13, r1
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	99 23       	and	r25, r25
     ef4:	29 f0       	breq	.+10     	; 0xf00 <dtoa_prf+0x116>
     ef6:	d6 01       	movw	r26, r12
     ef8:	9c 93       	st	X, r25
     efa:	f6 01       	movw	r30, r12
     efc:	31 96       	adiw	r30, 0x01	; 1
     efe:	6f 01       	movw	r12, r30
     f00:	c6 01       	movw	r24, r12
     f02:	03 96       	adiw	r24, 0x03	; 3
     f04:	e2 fe       	sbrs	r14, 2
     f06:	0b c0       	rjmp	.+22     	; 0xf1e <dtoa_prf+0x134>
     f08:	39 e4       	ldi	r19, 0x49	; 73
     f0a:	d6 01       	movw	r26, r12
     f0c:	3c 93       	st	X, r19
     f0e:	3e e4       	ldi	r19, 0x4E	; 78
     f10:	11 96       	adiw	r26, 0x01	; 1
     f12:	3c 93       	st	X, r19
     f14:	11 97       	sbiw	r26, 0x01	; 1
     f16:	36 e4       	ldi	r19, 0x46	; 70
     f18:	12 96       	adiw	r26, 0x02	; 2
     f1a:	3c 93       	st	X, r19
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <dtoa_prf+0x142>
     f1e:	39 e6       	ldi	r19, 0x69	; 105
     f20:	f6 01       	movw	r30, r12
     f22:	30 83       	st	Z, r19
     f24:	3e e6       	ldi	r19, 0x6E	; 110
     f26:	31 83       	std	Z+1, r19	; 0x01
     f28:	36 e6       	ldi	r19, 0x66	; 102
     f2a:	32 83       	std	Z+2, r19	; 0x02
     f2c:	fc 01       	movw	r30, r24
     f2e:	32 2f       	mov	r19, r18
     f30:	40 e2       	ldi	r20, 0x20	; 32
     f32:	33 23       	and	r19, r19
     f34:	19 f0       	breq	.+6      	; 0xf3c <dtoa_prf+0x152>
     f36:	41 93       	st	Z+, r20
     f38:	31 50       	subi	r19, 0x01	; 1
     f3a:	fb cf       	rjmp	.-10     	; 0xf32 <dtoa_prf+0x148>
     f3c:	fc 01       	movw	r30, r24
     f3e:	e2 0f       	add	r30, r18
     f40:	f1 1d       	adc	r31, r1
     f42:	10 82       	st	Z, r1
     f44:	8e ef       	ldi	r24, 0xFE	; 254
     f46:	9f ef       	ldi	r25, 0xFF	; 255
     f48:	a6 c0       	rjmp	.+332    	; 0x1096 <dtoa_prf+0x2ac>
     f4a:	21 e0       	ldi	r18, 0x01	; 1
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	91 11       	cpse	r25, r1
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <dtoa_prf+0x16c>
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	16 16       	cp	r1, r22
     f58:	17 06       	cpc	r1, r23
     f5a:	1c f4       	brge	.+6      	; 0xf62 <dtoa_prf+0x178>
     f5c:	fb 01       	movw	r30, r22
     f5e:	31 96       	adiw	r30, 0x01	; 1
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <dtoa_prf+0x17c>
     f62:	e1 e0       	ldi	r30, 0x01	; 1
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	2e 0f       	add	r18, r30
     f68:	3f 1f       	adc	r19, r31
     f6a:	bb 20       	and	r11, r11
     f6c:	21 f0       	breq	.+8      	; 0xf76 <dtoa_prf+0x18c>
     f6e:	eb 2d       	mov	r30, r11
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	31 96       	adiw	r30, 0x01	; 1
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <dtoa_prf+0x190>
     f76:	e0 e0       	ldi	r30, 0x00	; 0
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	2e 0f       	add	r18, r30
     f7c:	3f 1f       	adc	r19, r31
     f7e:	e1 2f       	mov	r30, r17
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	2e 17       	cp	r18, r30
     f84:	3f 07       	cpc	r19, r31
     f86:	1c f4       	brge	.+6      	; 0xf8e <dtoa_prf+0x1a4>
     f88:	12 1b       	sub	r17, r18
     f8a:	21 2f       	mov	r18, r17
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <dtoa_prf+0x1a6>
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	8e 2d       	mov	r24, r14
     f92:	88 71       	andi	r24, 0x18	; 24
     f94:	59 f4       	brne	.+22     	; 0xfac <dtoa_prf+0x1c2>
     f96:	f6 01       	movw	r30, r12
     f98:	82 2f       	mov	r24, r18
     f9a:	30 e2       	ldi	r19, 0x20	; 32
     f9c:	88 23       	and	r24, r24
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <dtoa_prf+0x1bc>
     fa0:	31 93       	st	Z+, r19
     fa2:	81 50       	subi	r24, 0x01	; 1
     fa4:	fb cf       	rjmp	.-10     	; 0xf9c <dtoa_prf+0x1b2>
     fa6:	c2 0e       	add	r12, r18
     fa8:	d1 1c       	adc	r13, r1
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	99 23       	and	r25, r25
     fae:	29 f0       	breq	.+10     	; 0xfba <dtoa_prf+0x1d0>
     fb0:	d6 01       	movw	r26, r12
     fb2:	9c 93       	st	X, r25
     fb4:	f6 01       	movw	r30, r12
     fb6:	31 96       	adiw	r30, 0x01	; 1
     fb8:	6f 01       	movw	r12, r30
     fba:	51 11       	cpse	r21, r1
     fbc:	0b c0       	rjmp	.+22     	; 0xfd4 <dtoa_prf+0x1ea>
     fbe:	f6 01       	movw	r30, r12
     fc0:	82 2f       	mov	r24, r18
     fc2:	90 e3       	ldi	r25, 0x30	; 48
     fc4:	88 23       	and	r24, r24
     fc6:	19 f0       	breq	.+6      	; 0xfce <dtoa_prf+0x1e4>
     fc8:	91 93       	st	Z+, r25
     fca:	81 50       	subi	r24, 0x01	; 1
     fcc:	fb cf       	rjmp	.-10     	; 0xfc4 <dtoa_prf+0x1da>
     fce:	c2 0e       	add	r12, r18
     fd0:	d1 1c       	adc	r13, r1
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	0f 2d       	mov	r16, r15
     fd6:	06 0f       	add	r16, r22
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	34 2f       	mov	r19, r20
     fdc:	30 71       	andi	r19, 0x10	; 16
     fde:	44 ff       	sbrs	r20, 4
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <dtoa_prf+0x1fe>
     fe2:	91 33       	cpi	r25, 0x31	; 49
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <dtoa_prf+0x1fe>
     fe6:	01 50       	subi	r16, 0x01	; 1
     fe8:	10 16       	cp	r1, r16
     fea:	24 f4       	brge	.+8      	; 0xff4 <dtoa_prf+0x20a>
     fec:	09 30       	cpi	r16, 0x09	; 9
     fee:	18 f0       	brcs	.+6      	; 0xff6 <dtoa_prf+0x20c>
     ff0:	08 e0       	ldi	r16, 0x08	; 8
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <dtoa_prf+0x20c>
     ff4:	01 e0       	ldi	r16, 0x01	; 1
     ff6:	ab 01       	movw	r20, r22
     ff8:	77 ff       	sbrs	r23, 7
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <dtoa_prf+0x216>
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	fb 01       	movw	r30, r22
    1002:	e4 1b       	sub	r30, r20
    1004:	f5 0b       	sbc	r31, r21
    1006:	a1 e0       	ldi	r26, 0x01	; 1
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ac 0f       	add	r26, r28
    100c:	bd 1f       	adc	r27, r29
    100e:	ea 0f       	add	r30, r26
    1010:	fb 1f       	adc	r31, r27
    1012:	8e e2       	ldi	r24, 0x2E	; 46
    1014:	a8 2e       	mov	r10, r24
    1016:	4b 01       	movw	r8, r22
    1018:	80 1a       	sub	r8, r16
    101a:	91 08       	sbc	r9, r1
    101c:	0b 2d       	mov	r16, r11
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	11 95       	neg	r17
    1022:	01 95       	neg	r16
    1024:	11 09       	sbc	r17, r1
    1026:	4f 3f       	cpi	r20, 0xFF	; 255
    1028:	bf ef       	ldi	r27, 0xFF	; 255
    102a:	5b 07       	cpc	r21, r27
    102c:	21 f4       	brne	.+8      	; 0x1036 <dtoa_prf+0x24c>
    102e:	d6 01       	movw	r26, r12
    1030:	ac 92       	st	X, r10
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	6d 01       	movw	r12, r26
    1036:	64 17       	cp	r22, r20
    1038:	75 07       	cpc	r23, r21
    103a:	2c f0       	brlt	.+10     	; 0x1046 <dtoa_prf+0x25c>
    103c:	84 16       	cp	r8, r20
    103e:	95 06       	cpc	r9, r21
    1040:	14 f4       	brge	.+4      	; 0x1046 <dtoa_prf+0x25c>
    1042:	81 81       	ldd	r24, Z+1	; 0x01
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <dtoa_prf+0x25e>
    1046:	80 e3       	ldi	r24, 0x30	; 48
    1048:	41 50       	subi	r20, 0x01	; 1
    104a:	51 09       	sbc	r21, r1
    104c:	31 96       	adiw	r30, 0x01	; 1
    104e:	d6 01       	movw	r26, r12
    1050:	11 96       	adiw	r26, 0x01	; 1
    1052:	7d 01       	movw	r14, r26
    1054:	40 17       	cp	r20, r16
    1056:	51 07       	cpc	r21, r17
    1058:	24 f0       	brlt	.+8      	; 0x1062 <dtoa_prf+0x278>
    105a:	d6 01       	movw	r26, r12
    105c:	8c 93       	st	X, r24
    105e:	67 01       	movw	r12, r14
    1060:	e2 cf       	rjmp	.-60     	; 0x1026 <dtoa_prf+0x23c>
    1062:	64 17       	cp	r22, r20
    1064:	75 07       	cpc	r23, r21
    1066:	39 f4       	brne	.+14     	; 0x1076 <dtoa_prf+0x28c>
    1068:	96 33       	cpi	r25, 0x36	; 54
    106a:	20 f4       	brcc	.+8      	; 0x1074 <dtoa_prf+0x28a>
    106c:	95 33       	cpi	r25, 0x35	; 53
    106e:	19 f4       	brne	.+6      	; 0x1076 <dtoa_prf+0x28c>
    1070:	31 11       	cpse	r19, r1
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <dtoa_prf+0x28c>
    1074:	81 e3       	ldi	r24, 0x31	; 49
    1076:	f6 01       	movw	r30, r12
    1078:	80 83       	st	Z, r24
    107a:	f7 01       	movw	r30, r14
    107c:	82 2f       	mov	r24, r18
    107e:	90 e2       	ldi	r25, 0x20	; 32
    1080:	88 23       	and	r24, r24
    1082:	19 f0       	breq	.+6      	; 0x108a <dtoa_prf+0x2a0>
    1084:	91 93       	st	Z+, r25
    1086:	81 50       	subi	r24, 0x01	; 1
    1088:	fb cf       	rjmp	.-10     	; 0x1080 <dtoa_prf+0x296>
    108a:	f7 01       	movw	r30, r14
    108c:	e2 0f       	add	r30, r18
    108e:	f1 1d       	adc	r31, r1
    1090:	10 82       	st	Z, r1
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	29 96       	adiw	r28, 0x09	; 9
    1098:	ec e0       	ldi	r30, 0x0C	; 12
    109a:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__epilogue_restores__+0xc>

0000109e <strtod>:
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f8 e0       	ldi	r31, 0x08	; 8
    10a6:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__prologue_saves__+0xc>
    10aa:	ec 01       	movw	r28, r24
    10ac:	6b 01       	movw	r12, r22
    10ae:	61 15       	cp	r22, r1
    10b0:	71 05       	cpc	r23, r1
    10b2:	19 f0       	breq	.+6      	; 0x10ba <strtod+0x1c>
    10b4:	fb 01       	movw	r30, r22
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	80 83       	st	Z, r24
    10ba:	7e 01       	movw	r14, r28
    10bc:	ff ef       	ldi	r31, 0xFF	; 255
    10be:	ef 1a       	sub	r14, r31
    10c0:	ff 0a       	sbc	r15, r31
    10c2:	08 81       	ld	r16, Y
    10c4:	80 2f       	mov	r24, r16
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <isspace>
    10cc:	89 2b       	or	r24, r25
    10ce:	11 f0       	breq	.+4      	; 0x10d4 <strtod+0x36>
    10d0:	e7 01       	movw	r28, r14
    10d2:	f3 cf       	rjmp	.-26     	; 0x10ba <strtod+0x1c>
    10d4:	0d 32       	cpi	r16, 0x2D	; 45
    10d6:	39 f4       	brne	.+14     	; 0x10e6 <strtod+0x48>
    10d8:	7e 01       	movw	r14, r28
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	e8 0e       	add	r14, r24
    10de:	f1 1c       	adc	r15, r1
    10e0:	09 81       	ldd	r16, Y+1	; 0x01
    10e2:	11 e0       	ldi	r17, 0x01	; 1
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <strtod+0x58>
    10e6:	0b 32       	cpi	r16, 0x2B	; 43
    10e8:	29 f4       	brne	.+10     	; 0x10f4 <strtod+0x56>
    10ea:	7e 01       	movw	r14, r28
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	e9 0e       	add	r14, r25
    10f0:	f1 1c       	adc	r15, r1
    10f2:	09 81       	ldd	r16, Y+1	; 0x01
    10f4:	10 e0       	ldi	r17, 0x00	; 0
    10f6:	e7 01       	movw	r28, r14
    10f8:	21 97       	sbiw	r28, 0x01	; 1
    10fa:	43 e0       	ldi	r20, 0x03	; 3
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	60 e7       	ldi	r22, 0x70	; 112
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	ce 01       	movw	r24, r28
    1104:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <strncasecmp_P>
    1108:	89 2b       	or	r24, r25
    110a:	c1 f4       	brne	.+48     	; 0x113c <strtod+0x9e>
    110c:	23 96       	adiw	r28, 0x03	; 3
    110e:	45 e0       	ldi	r20, 0x05	; 5
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	6b e6       	ldi	r22, 0x6B	; 107
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <strncasecmp_P>
    111c:	89 2b       	or	r24, r25
    111e:	09 f4       	brne	.+2      	; 0x1122 <strtod+0x84>
    1120:	25 96       	adiw	r28, 0x05	; 5
    1122:	c1 14       	cp	r12, r1
    1124:	d1 04       	cpc	r13, r1
    1126:	19 f0       	breq	.+6      	; 0x112e <strtod+0x90>
    1128:	f6 01       	movw	r30, r12
    112a:	d1 83       	std	Z+1, r29	; 0x01
    112c:	c0 83       	st	Z, r28
    112e:	11 11       	cpse	r17, r1
    1130:	f6 c0       	rjmp	.+492    	; 0x131e <strtod+0x280>
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	80 e8       	ldi	r24, 0x80	; 128
    1138:	9f e7       	ldi	r25, 0x7F	; 127
    113a:	fa c0       	rjmp	.+500    	; 0x1330 <strtod+0x292>
    113c:	43 e0       	ldi	r20, 0x03	; 3
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	68 e6       	ldi	r22, 0x68	; 104
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	ce 01       	movw	r24, r28
    1146:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <strncasecmp_P>
    114a:	89 2b       	or	r24, r25
    114c:	59 f4       	brne	.+22     	; 0x1164 <strtod+0xc6>
    114e:	c1 14       	cp	r12, r1
    1150:	d1 04       	cpc	r13, r1
    1152:	09 f4       	brne	.+2      	; 0x1156 <strtod+0xb8>
    1154:	e9 c0       	rjmp	.+466    	; 0x1328 <strtod+0x28a>
    1156:	f2 e0       	ldi	r31, 0x02	; 2
    1158:	ef 0e       	add	r14, r31
    115a:	f1 1c       	adc	r15, r1
    115c:	f6 01       	movw	r30, r12
    115e:	f1 82       	std	Z+1, r15	; 0x01
    1160:	e0 82       	st	Z, r14
    1162:	e2 c0       	rjmp	.+452    	; 0x1328 <strtod+0x28a>
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	a9 01       	movw	r20, r18
    116a:	c0 e0       	ldi	r28, 0x00	; 0
    116c:	d0 e0       	ldi	r29, 0x00	; 0
    116e:	f7 01       	movw	r30, r14
    1170:	80 ed       	ldi	r24, 0xD0	; 208
    1172:	a8 2e       	mov	r10, r24
    1174:	a0 0e       	add	r10, r16
    1176:	89 e0       	ldi	r24, 0x09	; 9
    1178:	8a 15       	cp	r24, r10
    117a:	30 f1       	brcs	.+76     	; 0x11c8 <strtod+0x12a>
    117c:	91 2f       	mov	r25, r17
    117e:	92 60       	ori	r25, 0x02	; 2
    1180:	b9 2e       	mov	r11, r25
    1182:	81 2f       	mov	r24, r17
    1184:	88 70       	andi	r24, 0x08	; 8
    1186:	12 ff       	sbrs	r17, 2
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <strtod+0xf4>
    118a:	81 11       	cpse	r24, r1
    118c:	24 c0       	rjmp	.+72     	; 0x11d6 <strtod+0x138>
    118e:	21 96       	adiw	r28, 0x01	; 1
    1190:	22 c0       	rjmp	.+68     	; 0x11d6 <strtod+0x138>
    1192:	81 11       	cpse	r24, r1
    1194:	21 97       	sbiw	r28, 0x01	; 1
    1196:	a5 e0       	ldi	r26, 0x05	; 5
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	0e 94 99 0a 	call	0x1532	; 0x1532 <__muluhisi3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	aa 1f       	adc	r26, r26
    11a8:	bb 1f       	adc	r27, r27
    11aa:	9c 01       	movw	r18, r24
    11ac:	ad 01       	movw	r20, r26
    11ae:	2a 0d       	add	r18, r10
    11b0:	31 1d       	adc	r19, r1
    11b2:	41 1d       	adc	r20, r1
    11b4:	51 1d       	adc	r21, r1
    11b6:	28 39       	cpi	r18, 0x98	; 152
    11b8:	89 e9       	ldi	r24, 0x99	; 153
    11ba:	38 07       	cpc	r19, r24
    11bc:	48 07       	cpc	r20, r24
    11be:	89 e1       	ldi	r24, 0x19	; 25
    11c0:	58 07       	cpc	r21, r24
    11c2:	48 f0       	brcs	.+18     	; 0x11d6 <strtod+0x138>
    11c4:	16 60       	ori	r17, 0x06	; 6
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <strtod+0x136>
    11c8:	9e ef       	ldi	r25, 0xFE	; 254
    11ca:	a9 12       	cpse	r10, r25
    11cc:	0a c0       	rjmp	.+20     	; 0x11e2 <strtod+0x144>
    11ce:	13 fd       	sbrc	r17, 3
    11d0:	40 c0       	rjmp	.+128    	; 0x1252 <strtod+0x1b4>
    11d2:	18 60       	ori	r17, 0x08	; 8
    11d4:	b1 2e       	mov	r11, r17
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	e8 1a       	sub	r14, r24
    11da:	f8 0a       	sbc	r15, r24
    11dc:	00 81       	ld	r16, Z
    11de:	1b 2d       	mov	r17, r11
    11e0:	c6 cf       	rjmp	.-116    	; 0x116e <strtod+0xd0>
    11e2:	80 2f       	mov	r24, r16
    11e4:	8f 7d       	andi	r24, 0xDF	; 223
    11e6:	85 34       	cpi	r24, 0x45	; 69
    11e8:	a1 f5       	brne	.+104    	; 0x1252 <strtod+0x1b4>
    11ea:	80 81       	ld	r24, Z
    11ec:	8d 32       	cpi	r24, 0x2D	; 45
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <strtod+0x156>
    11f0:	10 61       	ori	r17, 0x10	; 16
    11f2:	06 c0       	rjmp	.+12     	; 0x1200 <strtod+0x162>
    11f4:	8b 32       	cpi	r24, 0x2B	; 43
    11f6:	21 f0       	breq	.+8      	; 0x1200 <strtod+0x162>
    11f8:	31 96       	adiw	r30, 0x01	; 1
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <strtod+0x16a>
    1200:	81 81       	ldd	r24, Z+1	; 0x01
    1202:	32 96       	adiw	r30, 0x02	; 2
    1204:	62 e0       	ldi	r22, 0x02	; 2
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	80 53       	subi	r24, 0x30	; 48
    120a:	8a 30       	cpi	r24, 0x0A	; 10
    120c:	18 f0       	brcs	.+6      	; 0x1214 <strtod+0x176>
    120e:	e6 1b       	sub	r30, r22
    1210:	f7 0b       	sbc	r31, r23
    1212:	1f c0       	rjmp	.+62     	; 0x1252 <strtod+0x1b4>
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	60 38       	cpi	r22, 0x80	; 128
    121a:	9c e0       	ldi	r25, 0x0C	; 12
    121c:	79 07       	cpc	r23, r25
    121e:	5c f4       	brge	.+22     	; 0x1236 <strtod+0x198>
    1220:	db 01       	movw	r26, r22
    1222:	aa 0f       	add	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	aa 0f       	add	r26, r26
    1228:	bb 1f       	adc	r27, r27
    122a:	6a 0f       	add	r22, r26
    122c:	7b 1f       	adc	r23, r27
    122e:	66 0f       	add	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	68 0f       	add	r22, r24
    1234:	71 1d       	adc	r23, r1
    1236:	31 96       	adiw	r30, 0x01	; 1
    1238:	df 01       	movw	r26, r30
    123a:	11 97       	sbiw	r26, 0x01	; 1
    123c:	8c 91       	ld	r24, X
    123e:	80 53       	subi	r24, 0x30	; 48
    1240:	8a 30       	cpi	r24, 0x0A	; 10
    1242:	50 f3       	brcs	.-44     	; 0x1218 <strtod+0x17a>
    1244:	14 ff       	sbrs	r17, 4
    1246:	03 c0       	rjmp	.+6      	; 0x124e <strtod+0x1b0>
    1248:	71 95       	neg	r23
    124a:	61 95       	neg	r22
    124c:	71 09       	sbc	r23, r1
    124e:	c6 0f       	add	r28, r22
    1250:	d7 1f       	adc	r29, r23
    1252:	11 ff       	sbrs	r17, 1
    1254:	08 c0       	rjmp	.+16     	; 0x1266 <strtod+0x1c8>
    1256:	c1 14       	cp	r12, r1
    1258:	d1 04       	cpc	r13, r1
    125a:	29 f0       	breq	.+10     	; 0x1266 <strtod+0x1c8>
    125c:	cf 01       	movw	r24, r30
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f6 01       	movw	r30, r12
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	80 83       	st	Z, r24
    1266:	ca 01       	movw	r24, r20
    1268:	b9 01       	movw	r22, r18
    126a:	0e 94 18 04 	call	0x830	; 0x830 <__floatunsisf>
    126e:	21 2f       	mov	r18, r17
    1270:	23 70       	andi	r18, 0x03	; 3
    1272:	23 30       	cpi	r18, 0x03	; 3
    1274:	19 f0       	breq	.+6      	; 0x127c <strtod+0x1de>
    1276:	4b 01       	movw	r8, r22
    1278:	5c 01       	movw	r10, r24
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <strtod+0x1ea>
    127c:	4b 01       	movw	r8, r22
    127e:	5c 01       	movw	r10, r24
    1280:	b7 fa       	bst	r11, 7
    1282:	b0 94       	com	r11
    1284:	b7 f8       	bld	r11, 7
    1286:	b0 94       	com	r11
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	c5 01       	movw	r24, r10
    1290:	b4 01       	movw	r22, r8
    1292:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__cmpsf2>
    1296:	88 23       	and	r24, r24
    1298:	09 f4       	brne	.+2      	; 0x129c <strtod+0x1fe>
    129a:	3e c0       	rjmp	.+124    	; 0x1318 <strtod+0x27a>
    129c:	d7 ff       	sbrs	r29, 7
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <strtod+0x20e>
    12a0:	d1 95       	neg	r29
    12a2:	c1 95       	neg	r28
    12a4:	d1 09       	sbc	r29, r1
    12a6:	07 e8       	ldi	r16, 0x87	; 135
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <strtod+0x212>
    12ac:	0f e9       	ldi	r16, 0x9F	; 159
    12ae:	10 e0       	ldi	r17, 0x00	; 0
    12b0:	68 01       	movw	r12, r16
    12b2:	f8 e1       	ldi	r31, 0x18	; 24
    12b4:	cf 1a       	sub	r12, r31
    12b6:	d1 08       	sbc	r13, r1
    12b8:	90 e2       	ldi	r25, 0x20	; 32
    12ba:	e9 2e       	mov	r14, r25
    12bc:	f1 2c       	mov	r15, r1
    12be:	ce 15       	cp	r28, r14
    12c0:	df 05       	cpc	r29, r15
    12c2:	74 f0       	brlt	.+28     	; 0x12e0 <strtod+0x242>
    12c4:	f8 01       	movw	r30, r16
    12c6:	25 91       	lpm	r18, Z+
    12c8:	35 91       	lpm	r19, Z+
    12ca:	45 91       	lpm	r20, Z+
    12cc:	54 91       	lpm	r21, Z
    12ce:	c5 01       	movw	r24, r10
    12d0:	b4 01       	movw	r22, r8
    12d2:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsf3>
    12d6:	4b 01       	movw	r8, r22
    12d8:	5c 01       	movw	r10, r24
    12da:	ce 19       	sub	r28, r14
    12dc:	df 09       	sbc	r29, r15
    12de:	ef cf       	rjmp	.-34     	; 0x12be <strtod+0x220>
    12e0:	04 50       	subi	r16, 0x04	; 4
    12e2:	11 09       	sbc	r17, r1
    12e4:	f5 94       	asr	r15
    12e6:	e7 94       	ror	r14
    12e8:	0c 15       	cp	r16, r12
    12ea:	1d 05       	cpc	r17, r13
    12ec:	41 f7       	brne	.-48     	; 0x12be <strtod+0x220>
    12ee:	8a 2d       	mov	r24, r10
    12f0:	88 0f       	add	r24, r24
    12f2:	8b 2d       	mov	r24, r11
    12f4:	88 1f       	adc	r24, r24
    12f6:	8f 3f       	cpi	r24, 0xFF	; 255
    12f8:	49 f0       	breq	.+18     	; 0x130c <strtod+0x26e>
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	c5 01       	movw	r24, r10
    1302:	b4 01       	movw	r22, r8
    1304:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__cmpsf2>
    1308:	81 11       	cpse	r24, r1
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <strtod+0x27a>
    130c:	82 e2       	ldi	r24, 0x22	; 34
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <errno+0x1>
    1314:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <errno>
    1318:	c5 01       	movw	r24, r10
    131a:	b4 01       	movw	r22, r8
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <strtod+0x292>
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	80 e8       	ldi	r24, 0x80	; 128
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <strtod+0x292>
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	80 ec       	ldi	r24, 0xC0	; 192
    132e:	9f e7       	ldi	r25, 0x7F	; 127
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	ec e0       	ldi	r30, 0x0C	; 12
    1336:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__epilogue_restores__+0xc>

0000133a <__ftoa_engine>:
    133a:	28 30       	cpi	r18, 0x08	; 8
    133c:	08 f0       	brcs	.+2      	; 0x1340 <__ftoa_engine+0x6>
    133e:	27 e0       	ldi	r18, 0x07	; 7
    1340:	33 27       	eor	r19, r19
    1342:	da 01       	movw	r26, r20
    1344:	99 0f       	add	r25, r25
    1346:	31 1d       	adc	r19, r1
    1348:	87 fd       	sbrc	r24, 7
    134a:	91 60       	ori	r25, 0x01	; 1
    134c:	00 96       	adiw	r24, 0x00	; 0
    134e:	61 05       	cpc	r22, r1
    1350:	71 05       	cpc	r23, r1
    1352:	39 f4       	brne	.+14     	; 0x1362 <__ftoa_engine+0x28>
    1354:	32 60       	ori	r19, 0x02	; 2
    1356:	2e 5f       	subi	r18, 0xFE	; 254
    1358:	3d 93       	st	X+, r19
    135a:	30 e3       	ldi	r19, 0x30	; 48
    135c:	2a 95       	dec	r18
    135e:	e1 f7       	brne	.-8      	; 0x1358 <__ftoa_engine+0x1e>
    1360:	08 95       	ret
    1362:	9f 3f       	cpi	r25, 0xFF	; 255
    1364:	30 f0       	brcs	.+12     	; 0x1372 <__ftoa_engine+0x38>
    1366:	80 38       	cpi	r24, 0x80	; 128
    1368:	71 05       	cpc	r23, r1
    136a:	61 05       	cpc	r22, r1
    136c:	09 f0       	breq	.+2      	; 0x1370 <__ftoa_engine+0x36>
    136e:	3c 5f       	subi	r19, 0xFC	; 252
    1370:	3c 5f       	subi	r19, 0xFC	; 252
    1372:	3d 93       	st	X+, r19
    1374:	91 30       	cpi	r25, 0x01	; 1
    1376:	08 f0       	brcs	.+2      	; 0x137a <__ftoa_engine+0x40>
    1378:	80 68       	ori	r24, 0x80	; 128
    137a:	91 1d       	adc	r25, r1
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	1f 93       	push	r17
    1382:	0f 93       	push	r16
    1384:	ff 92       	push	r15
    1386:	ef 92       	push	r14
    1388:	19 2f       	mov	r17, r25
    138a:	98 7f       	andi	r25, 0xF8	; 248
    138c:	96 95       	lsr	r25
    138e:	e9 2f       	mov	r30, r25
    1390:	96 95       	lsr	r25
    1392:	96 95       	lsr	r25
    1394:	e9 0f       	add	r30, r25
    1396:	ff 27       	eor	r31, r31
    1398:	e3 50       	subi	r30, 0x03	; 3
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	99 27       	eor	r25, r25
    139e:	33 27       	eor	r19, r19
    13a0:	ee 24       	eor	r14, r14
    13a2:	ff 24       	eor	r15, r15
    13a4:	a7 01       	movw	r20, r14
    13a6:	e7 01       	movw	r28, r14
    13a8:	05 90       	lpm	r0, Z+
    13aa:	08 94       	sec
    13ac:	07 94       	ror	r0
    13ae:	28 f4       	brcc	.+10     	; 0x13ba <__ftoa_engine+0x80>
    13b0:	36 0f       	add	r19, r22
    13b2:	e7 1e       	adc	r14, r23
    13b4:	f8 1e       	adc	r15, r24
    13b6:	49 1f       	adc	r20, r25
    13b8:	51 1d       	adc	r21, r1
    13ba:	66 0f       	add	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	88 1f       	adc	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	06 94       	lsr	r0
    13c4:	a1 f7       	brne	.-24     	; 0x13ae <__ftoa_engine+0x74>
    13c6:	05 90       	lpm	r0, Z+
    13c8:	07 94       	ror	r0
    13ca:	28 f4       	brcc	.+10     	; 0x13d6 <__ftoa_engine+0x9c>
    13cc:	e7 0e       	add	r14, r23
    13ce:	f8 1e       	adc	r15, r24
    13d0:	49 1f       	adc	r20, r25
    13d2:	56 1f       	adc	r21, r22
    13d4:	c1 1d       	adc	r28, r1
    13d6:	77 0f       	add	r23, r23
    13d8:	88 1f       	adc	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	66 1f       	adc	r22, r22
    13de:	06 94       	lsr	r0
    13e0:	a1 f7       	brne	.-24     	; 0x13ca <__ftoa_engine+0x90>
    13e2:	05 90       	lpm	r0, Z+
    13e4:	07 94       	ror	r0
    13e6:	28 f4       	brcc	.+10     	; 0x13f2 <__ftoa_engine+0xb8>
    13e8:	f8 0e       	add	r15, r24
    13ea:	49 1f       	adc	r20, r25
    13ec:	56 1f       	adc	r21, r22
    13ee:	c7 1f       	adc	r28, r23
    13f0:	d1 1d       	adc	r29, r1
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	66 1f       	adc	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	06 94       	lsr	r0
    13fc:	a1 f7       	brne	.-24     	; 0x13e6 <__ftoa_engine+0xac>
    13fe:	05 90       	lpm	r0, Z+
    1400:	07 94       	ror	r0
    1402:	20 f4       	brcc	.+8      	; 0x140c <__ftoa_engine+0xd2>
    1404:	49 0f       	add	r20, r25
    1406:	56 1f       	adc	r21, r22
    1408:	c7 1f       	adc	r28, r23
    140a:	d8 1f       	adc	r29, r24
    140c:	99 0f       	add	r25, r25
    140e:	66 1f       	adc	r22, r22
    1410:	77 1f       	adc	r23, r23
    1412:	88 1f       	adc	r24, r24
    1414:	06 94       	lsr	r0
    1416:	a9 f7       	brne	.-22     	; 0x1402 <__ftoa_engine+0xc8>
    1418:	84 91       	lpm	r24, Z
    141a:	10 95       	com	r17
    141c:	17 70       	andi	r17, 0x07	; 7
    141e:	41 f0       	breq	.+16     	; 0x1430 <__ftoa_engine+0xf6>
    1420:	d6 95       	lsr	r29
    1422:	c7 95       	ror	r28
    1424:	57 95       	ror	r21
    1426:	47 95       	ror	r20
    1428:	f7 94       	ror	r15
    142a:	e7 94       	ror	r14
    142c:	1a 95       	dec	r17
    142e:	c1 f7       	brne	.-16     	; 0x1420 <__ftoa_engine+0xe6>
    1430:	e3 ea       	ldi	r30, 0xA3	; 163
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	68 94       	set
    1436:	15 90       	lpm	r1, Z+
    1438:	15 91       	lpm	r17, Z+
    143a:	35 91       	lpm	r19, Z+
    143c:	65 91       	lpm	r22, Z+
    143e:	95 91       	lpm	r25, Z+
    1440:	05 90       	lpm	r0, Z+
    1442:	7f e2       	ldi	r23, 0x2F	; 47
    1444:	73 95       	inc	r23
    1446:	e1 18       	sub	r14, r1
    1448:	f1 0a       	sbc	r15, r17
    144a:	43 0b       	sbc	r20, r19
    144c:	56 0b       	sbc	r21, r22
    144e:	c9 0b       	sbc	r28, r25
    1450:	d0 09       	sbc	r29, r0
    1452:	c0 f7       	brcc	.-16     	; 0x1444 <__ftoa_engine+0x10a>
    1454:	e1 0c       	add	r14, r1
    1456:	f1 1e       	adc	r15, r17
    1458:	43 1f       	adc	r20, r19
    145a:	56 1f       	adc	r21, r22
    145c:	c9 1f       	adc	r28, r25
    145e:	d0 1d       	adc	r29, r0
    1460:	7e f4       	brtc	.+30     	; 0x1480 <__ftoa_engine+0x146>
    1462:	70 33       	cpi	r23, 0x30	; 48
    1464:	11 f4       	brne	.+4      	; 0x146a <__ftoa_engine+0x130>
    1466:	8a 95       	dec	r24
    1468:	e6 cf       	rjmp	.-52     	; 0x1436 <__ftoa_engine+0xfc>
    146a:	e8 94       	clt
    146c:	01 50       	subi	r16, 0x01	; 1
    146e:	30 f0       	brcs	.+12     	; 0x147c <__ftoa_engine+0x142>
    1470:	08 0f       	add	r16, r24
    1472:	0a f4       	brpl	.+2      	; 0x1476 <__ftoa_engine+0x13c>
    1474:	00 27       	eor	r16, r16
    1476:	02 17       	cp	r16, r18
    1478:	08 f4       	brcc	.+2      	; 0x147c <__ftoa_engine+0x142>
    147a:	20 2f       	mov	r18, r16
    147c:	23 95       	inc	r18
    147e:	02 2f       	mov	r16, r18
    1480:	7a 33       	cpi	r23, 0x3A	; 58
    1482:	28 f0       	brcs	.+10     	; 0x148e <__ftoa_engine+0x154>
    1484:	79 e3       	ldi	r23, 0x39	; 57
    1486:	7d 93       	st	X+, r23
    1488:	2a 95       	dec	r18
    148a:	e9 f7       	brne	.-6      	; 0x1486 <__ftoa_engine+0x14c>
    148c:	10 c0       	rjmp	.+32     	; 0x14ae <__ftoa_engine+0x174>
    148e:	7d 93       	st	X+, r23
    1490:	2a 95       	dec	r18
    1492:	89 f6       	brne	.-94     	; 0x1436 <__ftoa_engine+0xfc>
    1494:	06 94       	lsr	r0
    1496:	97 95       	ror	r25
    1498:	67 95       	ror	r22
    149a:	37 95       	ror	r19
    149c:	17 95       	ror	r17
    149e:	17 94       	ror	r1
    14a0:	e1 18       	sub	r14, r1
    14a2:	f1 0a       	sbc	r15, r17
    14a4:	43 0b       	sbc	r20, r19
    14a6:	56 0b       	sbc	r21, r22
    14a8:	c9 0b       	sbc	r28, r25
    14aa:	d0 09       	sbc	r29, r0
    14ac:	98 f0       	brcs	.+38     	; 0x14d4 <__ftoa_engine+0x19a>
    14ae:	23 95       	inc	r18
    14b0:	7e 91       	ld	r23, -X
    14b2:	73 95       	inc	r23
    14b4:	7a 33       	cpi	r23, 0x3A	; 58
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <__ftoa_engine+0x180>
    14b8:	70 e3       	ldi	r23, 0x30	; 48
    14ba:	7c 93       	st	X, r23
    14bc:	20 13       	cpse	r18, r16
    14be:	b8 f7       	brcc	.-18     	; 0x14ae <__ftoa_engine+0x174>
    14c0:	7e 91       	ld	r23, -X
    14c2:	70 61       	ori	r23, 0x10	; 16
    14c4:	7d 93       	st	X+, r23
    14c6:	30 f0       	brcs	.+12     	; 0x14d4 <__ftoa_engine+0x19a>
    14c8:	83 95       	inc	r24
    14ca:	71 e3       	ldi	r23, 0x31	; 49
    14cc:	7d 93       	st	X+, r23
    14ce:	70 e3       	ldi	r23, 0x30	; 48
    14d0:	2a 95       	dec	r18
    14d2:	e1 f7       	brne	.-8      	; 0x14cc <__ftoa_engine+0x192>
    14d4:	11 24       	eor	r1, r1
    14d6:	ef 90       	pop	r14
    14d8:	ff 90       	pop	r15
    14da:	0f 91       	pop	r16
    14dc:	1f 91       	pop	r17
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	99 27       	eor	r25, r25
    14e4:	87 fd       	sbrc	r24, 7
    14e6:	90 95       	com	r25
    14e8:	08 95       	ret

000014ea <isspace>:
    14ea:	91 11       	cpse	r25, r1
    14ec:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__ctype_isfalse>
    14f0:	80 32       	cpi	r24, 0x20	; 32
    14f2:	19 f0       	breq	.+6      	; 0x14fa <isspace+0x10>
    14f4:	89 50       	subi	r24, 0x09	; 9
    14f6:	85 50       	subi	r24, 0x05	; 5
    14f8:	c8 f7       	brcc	.-14     	; 0x14ec <isspace+0x2>
    14fa:	08 95       	ret

000014fc <strncasecmp_P>:
    14fc:	fb 01       	movw	r30, r22
    14fe:	dc 01       	movw	r26, r24
    1500:	41 50       	subi	r20, 0x01	; 1
    1502:	50 40       	sbci	r21, 0x00	; 0
    1504:	88 f0       	brcs	.+34     	; 0x1528 <strncasecmp_P+0x2c>
    1506:	8d 91       	ld	r24, X+
    1508:	81 34       	cpi	r24, 0x41	; 65
    150a:	1c f0       	brlt	.+6      	; 0x1512 <strncasecmp_P+0x16>
    150c:	8b 35       	cpi	r24, 0x5B	; 91
    150e:	0c f4       	brge	.+2      	; 0x1512 <strncasecmp_P+0x16>
    1510:	80 5e       	subi	r24, 0xE0	; 224
    1512:	65 91       	lpm	r22, Z+
    1514:	61 34       	cpi	r22, 0x41	; 65
    1516:	1c f0       	brlt	.+6      	; 0x151e <strncasecmp_P+0x22>
    1518:	6b 35       	cpi	r22, 0x5B	; 91
    151a:	0c f4       	brge	.+2      	; 0x151e <strncasecmp_P+0x22>
    151c:	60 5e       	subi	r22, 0xE0	; 224
    151e:	86 1b       	sub	r24, r22
    1520:	61 11       	cpse	r22, r1
    1522:	71 f3       	breq	.-36     	; 0x1500 <strncasecmp_P+0x4>
    1524:	99 0b       	sbc	r25, r25
    1526:	08 95       	ret
    1528:	88 1b       	sub	r24, r24
    152a:	fc cf       	rjmp	.-8      	; 0x1524 <strncasecmp_P+0x28>

0000152c <__ctype_isfalse>:
    152c:	99 27       	eor	r25, r25
    152e:	88 27       	eor	r24, r24

00001530 <__ctype_istrue>:
    1530:	08 95       	ret

00001532 <__muluhisi3>:
    1532:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__umulhisi3>
    1536:	a5 9f       	mul	r26, r21
    1538:	90 0d       	add	r25, r0
    153a:	b4 9f       	mul	r27, r20
    153c:	90 0d       	add	r25, r0
    153e:	a4 9f       	mul	r26, r20
    1540:	80 0d       	add	r24, r0
    1542:	91 1d       	adc	r25, r1
    1544:	11 24       	eor	r1, r1
    1546:	08 95       	ret

00001548 <__prologue_saves__>:
    1548:	2f 92       	push	r2
    154a:	3f 92       	push	r3
    154c:	4f 92       	push	r4
    154e:	5f 92       	push	r5
    1550:	6f 92       	push	r6
    1552:	7f 92       	push	r7
    1554:	8f 92       	push	r8
    1556:	9f 92       	push	r9
    1558:	af 92       	push	r10
    155a:	bf 92       	push	r11
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	ca 1b       	sub	r28, r26
    1572:	db 0b       	sbc	r29, r27
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	09 94       	ijmp

00001580 <__epilogue_restores__>:
    1580:	2a 88       	ldd	r2, Y+18	; 0x12
    1582:	39 88       	ldd	r3, Y+17	; 0x11
    1584:	48 88       	ldd	r4, Y+16	; 0x10
    1586:	5f 84       	ldd	r5, Y+15	; 0x0f
    1588:	6e 84       	ldd	r6, Y+14	; 0x0e
    158a:	7d 84       	ldd	r7, Y+13	; 0x0d
    158c:	8c 84       	ldd	r8, Y+12	; 0x0c
    158e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1590:	aa 84       	ldd	r10, Y+10	; 0x0a
    1592:	b9 84       	ldd	r11, Y+9	; 0x09
    1594:	c8 84       	ldd	r12, Y+8	; 0x08
    1596:	df 80       	ldd	r13, Y+7	; 0x07
    1598:	ee 80       	ldd	r14, Y+6	; 0x06
    159a:	fd 80       	ldd	r15, Y+5	; 0x05
    159c:	0c 81       	ldd	r16, Y+4	; 0x04
    159e:	1b 81       	ldd	r17, Y+3	; 0x03
    15a0:	aa 81       	ldd	r26, Y+2	; 0x02
    15a2:	b9 81       	ldd	r27, Y+1	; 0x01
    15a4:	ce 0f       	add	r28, r30
    15a6:	d1 1d       	adc	r29, r1
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	ed 01       	movw	r28, r26
    15b4:	08 95       	ret

000015b6 <__umulhisi3>:
    15b6:	a2 9f       	mul	r26, r18
    15b8:	b0 01       	movw	r22, r0
    15ba:	b3 9f       	mul	r27, r19
    15bc:	c0 01       	movw	r24, r0
    15be:	a3 9f       	mul	r26, r19
    15c0:	70 0d       	add	r23, r0
    15c2:	81 1d       	adc	r24, r1
    15c4:	11 24       	eor	r1, r1
    15c6:	91 1d       	adc	r25, r1
    15c8:	b2 9f       	mul	r27, r18
    15ca:	70 0d       	add	r23, r0
    15cc:	81 1d       	adc	r24, r1
    15ce:	11 24       	eor	r1, r1
    15d0:	91 1d       	adc	r25, r1
    15d2:	08 95       	ret

000015d4 <_exit>:
    15d4:	f8 94       	cli

000015d6 <__stop_program>:
    15d6:	ff cf       	rjmp	.-2      	; 0x15d6 <__stop_program>
