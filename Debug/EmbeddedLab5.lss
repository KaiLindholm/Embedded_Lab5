
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000010ba  0000114e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800116  00800116  00001164  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f39  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a34  00000000  00000000  0000216d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000790  00000000  00000000  00002ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00003334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ca  00000000  00000000  00003b58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_18>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_20>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <malloc+0x78>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <uart_get_command+0x4c>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <get_adc_value+0x5c>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <i2c_init_with_pullups+0x10>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ea eb       	ldi	r30, 0xBA	; 186
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a6 31       	cpi	r26, 0x16	; 22
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a6 e1       	ldi	r26, 0x16	; 22
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a3 3a       	cpi	r26, 0xA3	; 163
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 3d 02 	call	0x47a	; 0x47a <main>
     198:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <i2c_wait>:
/**
 * Wait until I2C Interface is ready
 */
static void i2c_wait ( void )
{
    while ( !( TWCR &   ( TWINT ) ) );
     1a0:	ec eb       	ldi	r30, 0xBC	; 188
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	87 70       	andi	r24, 0x07	; 7
     1a8:	e9 f3       	breq	.-6      	; 0x1a4 <i2c_wait+0x4>
}
     1aa:	08 95       	ret

000001ac <i2c_init>:
/**
 * Initialize I2C Interface
 */
void i2c_init ( void )
{
    TWCR |= TWEN ;
     1ac:	ec eb       	ldi	r30, 0xBC	; 188
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	80 81       	ld	r24, Z
     1b2:	82 60       	ori	r24, 0x02	; 2
     1b4:	80 83       	st	Z, r24
    TWBR = ( F_CPU / I2C_CONFIG_F_SCL - 16 ) / 2;
     1b6:	88 e4       	ldi	r24, 0x48	; 72
     1b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     1bc:	08 95       	ret

000001be <i2c_init_with_pullups>:
/**
 * Initialize I2C Interface with pullups
 */
void i2c_init_with_pullups ( void )
{
    I2C_CONFIG_DDR &= ~(   ( I2C_CONFIG_SDA ) |   ( I2C_CONFIG_SCL ) );
     1be:	87 b1       	in	r24, 0x07	; 7
     1c0:	8a 7f       	andi	r24, 0xFA	; 250
     1c2:	87 b9       	out	0x07, r24	; 7
    I2C_CONFIG_PORT |=   ( I2C_CONFIG_SDA ) |   ( I2C_CONFIG_SCL );
     1c4:	88 b1       	in	r24, 0x08	; 8
     1c6:	85 60       	ori	r24, 0x05	; 5
     1c8:	88 b9       	out	0x08, r24	; 8
    i2c_init (  );
     1ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_init>
     1ce:	08 95       	ret

000001d0 <i2c_uninit>:
/**
 * Uninitialize I2C Interface
 */
void i2c_uninit ( void )
{
    TWCR &= ~  ( TWEN );
     1d0:	ec eb       	ldi	r30, 0xBC	; 188
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	8d 7f       	andi	r24, 0xFD	; 253
     1d8:	80 83       	st	Z, r24
     1da:	08 95       	ret

000001dc <i2c_start>:
/**
 * Send I2C Start Condition
 */
int8_t i2c_start ( void )
{
    TWCR =   ( TWEN ) |   ( TWINT ) |   ( TWSTA );
     1dc:	87 e0       	ldi	r24, 0x07	; 7
     1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait (  );
     1e2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_wait>
    return ( TWSR & TW_STATUS_MASK ) != TW_START;
     1e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1ea:	98 7f       	andi	r25, 0xF8	; 248
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	98 30       	cpi	r25, 0x08	; 8
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <i2c_start+0x18>
     1f2:	80 e0       	ldi	r24, 0x00	; 0
}
     1f4:	08 95       	ret

000001f6 <i2c_restart>:
/**
 * Send I2C Repeated-Start Condition
 */
int8_t i2c_restart ( void )
{
    TWCR =   ( TWEN ) |   ( TWINT ) |   ( TWSTA );
     1f6:	87 e0       	ldi	r24, 0x07	; 7
     1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait (  );
     1fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_wait>
    return ( TWSR & TW_STATUS_MASK ) != TW_REP_START;
     200:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     204:	98 7f       	andi	r25, 0xF8	; 248
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 31       	cpi	r25, 0x10	; 16
     20a:	09 f4       	brne	.+2      	; 0x20e <i2c_restart+0x18>
     20c:	80 e0       	ldi	r24, 0x00	; 0
}
     20e:	08 95       	ret

00000210 <i2c_stop>:
/**
 * Send I2C Stop Condition
 */
int8_t i2c_stop ( void )
{
    TWCR =   ( TWEN ) |   ( TWINT ) |   ( TWSTO );
     210:	87 e0       	ldi	r24, 0x07	; 7
     212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ( TWCR &   ( TWSTO ) );
     216:	ec eb       	ldi	r30, 0xBC	; 188
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	82 fd       	sbrc	r24, 2
     21e:	fd cf       	rjmp	.-6      	; 0x21a <i2c_stop+0xa>
    return 0;
}
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	08 95       	ret

00000224 <i2c_addr>:

/**
 * Select I2C Slave Address
 */
int8_t i2c_addr ( uint8_t addr )
{
     224:	cf 93       	push	r28
     226:	c8 2f       	mov	r28, r24
    TWDR = addr;
     228:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR =   ( TWEN ) |   ( TWINT );
     22c:	87 e0       	ldi	r24, 0x07	; 7
     22e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait (  );
     232:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_wait>
    return ( TWSR & TW_STATUS_MASK ) != ( ( addr & 1 ) ? TW_MR_SLA_ACK : TW_MT_SLA_ACK );
     236:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     23a:	28 7f       	andi	r18, 0xF8	; 248
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	c0 fd       	sbrc	r28, 0
     240:	03 c0       	rjmp	.+6      	; 0x248 <i2c_addr+0x24>
     242:	48 e1       	ldi	r20, 0x18	; 24
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	02 c0       	rjmp	.+4      	; 0x24c <i2c_addr+0x28>
     248:	40 e4       	ldi	r20, 0x40	; 64
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	42 17       	cp	r20, r18
     250:	53 07       	cpc	r21, r19
     252:	09 f4       	brne	.+2      	; 0x256 <i2c_addr+0x32>
     254:	80 e0       	ldi	r24, 0x00	; 0
}
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <i2c_tx_byte>:
/**
 * Send data byte to Slave Device
 */
int8_t i2c_tx_byte ( uint8_t byte )
{
    TWDR = byte;
     25a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR =   ( TWEN ) |   ( TWINT );
     25e:	87 e0       	ldi	r24, 0x07	; 7
     260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait (  );
     264:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_wait>
    return ( TWSR & TW_STATUS_MASK ) != TW_MT_DATA_ACK;
     268:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     26c:	98 7f       	andi	r25, 0xF8	; 248
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	98 32       	cpi	r25, 0x28	; 40
     272:	09 f4       	brne	.+2      	; 0x276 <i2c_tx_byte+0x1c>
     274:	80 e0       	ldi	r24, 0x00	; 0
}
     276:	08 95       	ret

00000278 <i2c_tx_data>:

/**
 * Send data bytes to Slave Device
 */
int8_t i2c_tx_data ( const uint8_t * data, size_t len )
{
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
    size_t i;

    for ( i = 0; i < len; i++ )
     280:	61 15       	cp	r22, r1
     282:	71 05       	cpc	r23, r1
     284:	69 f0       	breq	.+26     	; 0x2a0 <i2c_tx_data+0x28>
     286:	8c 01       	movw	r16, r24
     288:	ec 01       	movw	r28, r24
     28a:	06 0f       	add	r16, r22
     28c:	17 1f       	adc	r17, r23
    {
        if ( i2c_tx_byte ( data[i] ) )
     28e:	89 91       	ld	r24, Y+
     290:	0e 94 2d 01 	call	0x25a	; 0x25a <i2c_tx_byte>
     294:	81 11       	cpse	r24, r1
     296:	06 c0       	rjmp	.+12     	; 0x2a4 <i2c_tx_data+0x2c>
 */
int8_t i2c_tx_data ( const uint8_t * data, size_t len )
{
    size_t i;

    for ( i = 0; i < len; i++ )
     298:	c0 17       	cp	r28, r16
     29a:	d1 07       	cpc	r29, r17
     29c:	c1 f7       	brne	.-16     	; 0x28e <i2c_tx_data+0x16>
     29e:	03 c0       	rjmp	.+6      	; 0x2a6 <i2c_tx_data+0x2e>
        {
            return 1;
        }
    }

    return 0;
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <i2c_tx_data+0x2e>

    for ( i = 0; i < len; i++ )
    {
        if ( i2c_tx_byte ( data[i] ) )
        {
            return 1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return 0;
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <i2c_rx_byte>:

/**
 * Receive data byte from Slave Device
 */
int8_t i2c_rx_byte ( uint8_t * byte )
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
    TWCR =   ( TWEN ) |   ( TWINT ) |   ( TWEA );
     2b6:	87 e0       	ldi	r24, 0x07	; 7
     2b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait (  );
     2bc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_wait>
    *byte = TWDR;
     2c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     2c4:	88 83       	st	Y, r24
    return ( TWSR & TW_STATUS_MASK ) != TW_MR_DATA_ACK;
     2c6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2ca:	98 7f       	andi	r25, 0xF8	; 248
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	90 35       	cpi	r25, 0x50	; 80
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <i2c_rx_byte+0x24>
     2d2:	80 e0       	ldi	r24, 0x00	; 0
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <i2c_rx_last>:

/**
 * Receive last data byte from Slave Device
 */
int8_t i2c_rx_last ( uint8_t * byte )
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
    TWCR =   ( TWEN ) |   ( TWINT );
     2e0:	87 e0       	ldi	r24, 0x07	; 7
     2e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2c_wait (  );
     2e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_wait>
    *byte = TWDR;
     2ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     2ee:	88 83       	st	Y, r24
    return ( TWSR & TW_STATUS_MASK ) != TW_MR_DATA_NACK;
     2f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2f4:	98 7f       	andi	r25, 0xF8	; 248
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	98 35       	cpi	r25, 0x58	; 88
     2fa:	09 f4       	brne	.+2      	; 0x2fe <i2c_rx_last+0x24>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <i2c_rx_data>:

/**
 * Receive data bytes from Slave Device
 */
int8_t i2c_rx_data ( uint8_t * data, size_t len )
{
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	6c 01       	movw	r12, r24
     316:	7b 01       	movw	r14, r22
     318:	8c 01       	movw	r16, r24
    size_t i;

    for ( i = 0; i + 1 < len; i++ )
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	08 c0       	rjmp	.+16     	; 0x330 <i2c_rx_data+0x2c>
    {
        if ( i2c_rx_byte ( data + i ) )
     320:	c8 01       	movw	r24, r16
     322:	0e 94 58 01 	call	0x2b0	; 0x2b0 <i2c_rx_byte>
     326:	0f 5f       	subi	r16, 0xFF	; 255
     328:	1f 4f       	sbci	r17, 0xFF	; 255
 */
int8_t i2c_rx_data ( uint8_t * data, size_t len )
{
    size_t i;

    for ( i = 0; i + 1 < len; i++ )
     32a:	9e 01       	movw	r18, r28
    {
        if ( i2c_rx_byte ( data + i ) )
     32c:	81 11       	cpse	r24, r1
     32e:	11 c0       	rjmp	.+34     	; 0x352 <i2c_rx_data+0x4e>
 */
int8_t i2c_rx_data ( uint8_t * data, size_t len )
{
    size_t i;

    for ( i = 0; i + 1 < len; i++ )
     330:	e9 01       	movw	r28, r18
     332:	21 96       	adiw	r28, 0x01	; 1
     334:	ce 15       	cp	r28, r14
     336:	df 05       	cpc	r29, r15
     338:	98 f3       	brcs	.-26     	; 0x320 <i2c_rx_data+0x1c>
        {
            return 1;
        }
    }

    if ( len )
     33a:	ef 28       	or	r14, r15
     33c:	61 f0       	breq	.+24     	; 0x356 <i2c_rx_data+0x52>
    {
        if ( i2c_rx_last ( data + i ) )
     33e:	c6 01       	movw	r24, r12
     340:	82 0f       	add	r24, r18
     342:	93 1f       	adc	r25, r19
     344:	0e 94 6d 01 	call	0x2da	; 0x2da <i2c_rx_last>

    for ( i = 0; i + 1 < len; i++ )
    {
        if ( i2c_rx_byte ( data + i ) )
        {
            return 1;
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	81 11       	cpse	r24, r1
     34c:	05 c0       	rjmp	.+10     	; 0x358 <i2c_rx_data+0x54>
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	03 c0       	rjmp	.+6      	; 0x358 <i2c_rx_data+0x54>
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	01 c0       	rjmp	.+2      	; 0x358 <i2c_rx_data+0x54>
        {
            return 1;
        }
    }

    return 0;
     356:	90 e0       	ldi	r25, 0x00	; 0
}
     358:	89 2f       	mov	r24, r25
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	08 95       	ret

0000036c <setup>:
#include "i2c/i2c.h"
#include "my_uart.h"
#include "main.h"

void setup(){
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
     36c:	ea e7       	ldi	r30, 0x7A	; 122
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	87 68       	ori	r24, 0x87	; 135
     374:	80 83       	st	Z, r24
	ADMUX = 0b00000000;   // clear ADMUX for ADC0 pin 
     376:	ec e7       	ldi	r30, 0x7C	; 124
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0); // setup internal reference voltage of 1.1V
     37c:	80 81       	ld	r24, Z
     37e:	80 64       	ori	r24, 0x40	; 64
     380:	80 83       	st	Z, r24
     382:	08 95       	ret

00000384 <get_adc_value>:
			read_command(uart_get_command());
		}
	}
}

void get_adc_value(){
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	2b 97       	sbiw	r28, 0x0b	; 11
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
	ADCSRA |= (1<<ADSC);      // enable a single conversion
     39c:	ea e7       	ldi	r30, 0x7A	; 122
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	80 64       	ori	r24, 0x40	; 64
     3a4:	80 83       	st	Z, r24
	
	while (!(ADCSRA & (1<<ADIF))); // wait for the conversion to be completed		
     3a6:	80 81       	ld	r24, Z
     3a8:	84 ff       	sbrs	r24, 4
     3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <get_adc_value+0x22>
	
	float result = (ADC*5.0)/1024;	// convert to float 
     3ac:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3b0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
	char buffer[6];	
	dtostrf(result, 3, 2, buffer); // convert float to string 
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__floatunsisf>
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	40 ea       	ldi	r20, 0xA0	; 160
     3c2:	50 e4       	ldi	r21, 0x40	; 64
     3c4:	0e 94 a5 03 	call	0x74a	; 0x74a <__mulsf3>
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	40 e8       	ldi	r20, 0x80	; 128
     3ce:	5a e3       	ldi	r21, 0x3A	; 58
     3d0:	0e 94 a5 03 	call	0x74a	; 0x74a <__mulsf3>
     3d4:	8e 01       	movw	r16, r28
     3d6:	0f 5f       	subi	r16, 0xFF	; 255
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
     3da:	22 e0       	ldi	r18, 0x02	; 2
     3dc:	43 e0       	ldi	r20, 0x03	; 3
     3de:	0e 94 85 04 	call	0x90a	; 0x90a <dtostrf>
	
	char header[] = "V = "; 
     3e2:	85 e0       	ldi	r24, 0x05	; 5
     3e4:	e7 e0       	ldi	r30, 0x07	; 7
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	de 01       	movw	r26, r28
     3ea:	17 96       	adiw	r26, 0x07	; 7
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	8a 95       	dec	r24
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <get_adc_value+0x68>
	uart_send_string(header);
     3f4:	ce 01       	movw	r24, r28
     3f6:	07 96       	adiw	r24, 0x07	; 7
     3f8:	0e 94 04 03 	call	0x608	; 0x608 <uart_send_string>
	uart_send_string(buffer);
     3fc:	c8 01       	movw	r24, r16
     3fe:	0e 94 04 03 	call	0x608	; 0x608 <uart_send_string>
	uart_send_byte('\n');
     402:	8a e0       	ldi	r24, 0x0A	; 10
     404:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <uart_send_byte>
		
	ADCSRA |= (1<<ADIF);		// reset AD complete flag for next conversion. 
     408:	ea e7       	ldi	r30, 0x7A	; 122
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	80 61       	ori	r24, 0x10	; 16
     410:	80 83       	st	Z, r24
}
     412:	2b 96       	adiw	r28, 0x0b	; 11
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	08 95       	ret

00000428 <read_command>:

void read_command(char * command) {
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	00 d0       	rcall	.+0      	; 0x432 <read_command+0xa>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	8c 01       	movw	r16, r24
	char delim[] = ",";
     438:	8c e2       	ldi	r24, 0x2C	; 44
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	9a 83       	std	Y+2, r25	; 0x02
     43e:	89 83       	std	Y+1, r24	; 0x01
	char  * token = strtok(command, delim); 
     440:	be 01       	movw	r22, r28
     442:	6f 5f       	subi	r22, 0xFF	; 255
     444:	7f 4f       	sbci	r23, 0xFF	; 255
     446:	c8 01       	movw	r24, r16
     448:	0e 94 c6 05 	call	0xb8c	; 0xb8c <strtok>
	while(token != NULL){
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	59 f0       	breq	.+22     	; 0x466 <read_command+0x3e>
		uart_send_string(token);
     450:	0e 94 04 03 	call	0x608	; 0x608 <uart_send_string>
		token = strtok(NULL, delim);
     454:	be 01       	movw	r22, r28
     456:	6f 5f       	subi	r22, 0xFF	; 255
     458:	7f 4f       	sbci	r23, 0xFF	; 255
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <strtok>
}

void read_command(char * command) {
	char delim[] = ",";
	char  * token = strtok(command, delim); 
	while(token != NULL){
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	a9 f7       	brne	.-22     	; 0x450 <read_command+0x28>
		uart_send_string(token);
		token = strtok(NULL, delim);
	}
	free(command);
     466:	c8 01       	movw	r24, r16
     468:	0e 94 3d 05 	call	0xa7a	; 0xa7a <free>
}
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	08 95       	ret

0000047a <main>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
	ADMUX = 0b00000000;   // clear ADMUX for ADC0 pin 
	ADMUX |= (1<<REFS0); // setup internal reference voltage of 1.1V
}

int main(void) {
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	29 97       	sbiw	r28, 0x09	; 9
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
	setup();
     48e:	0e 94 b6 01 	call	0x36c	; 0x36c <setup>
	i2c_init();
     492:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_init>
	uart_init(9600);
     496:	60 e8       	ldi	r22, 0x80	; 128
     498:	75 e2       	ldi	r23, 0x25	; 37
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 c0 02 	call	0x580	; 0x580 <uart_init>
	char str[] = "Started!";
     4a2:	89 e0       	ldi	r24, 0x09	; 9
     4a4:	ec e0       	ldi	r30, 0x0C	; 12
     4a6:	f1 e0       	ldi	r31, 0x01	; 1
     4a8:	de 01       	movw	r26, r28
     4aa:	11 96       	adiw	r26, 0x01	; 1
     4ac:	01 90       	ld	r0, Z+
     4ae:	0d 92       	st	X+, r0
     4b0:	8a 95       	dec	r24
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <main+0x32>
	sei();
     4b4:	78 94       	sei
	
	uart_send_string(str);
     4b6:	ce 01       	movw	r24, r28
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	0e 94 04 03 	call	0x608	; 0x608 <uart_send_string>
	uart_send_byte('\n');
     4be:	8a e0       	ldi	r24, 0x0A	; 10
     4c0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <uart_send_byte>
	
    while (1) {	
		if(uart_string_complete()){
     4c4:	0e 94 bd 02 	call	0x57a	; 0x57a <uart_string_complete>
     4c8:	88 23       	and	r24, r24
     4ca:	e1 f3       	breq	.-8      	; 0x4c4 <main+0x4a>
			read_command(uart_get_command());
     4cc:	0e 94 31 03 	call	0x662	; 0x662 <uart_get_command>
     4d0:	0e 94 14 02 	call	0x428	; 0x428 <read_command>
     4d4:	f7 cf       	rjmp	.-18     	; 0x4c4 <main+0x4a>

000004d6 <__vector_18>:

volatile static uint8_t uart_tx_busy = 1;
volatile static uint8_t uart_fetch_complete = 0;		// when the buffer has reached a '\n' char flag set to 1. once the string has been read from flag set to 0. 
UARTBuffer uart_buffer; 

ISR(USART_RX_vect){
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	2f 93       	push	r18
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
	if (UDR0 == '\n' || UDR0 == '\r') { // if a newline or carriage return is received
     4ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     4f2:	8a 30       	cpi	r24, 0x0A	; 10
     4f4:	21 f0       	breq	.+8      	; 0x4fe <__vector_18+0x28>
     4f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     4fa:	8d 30       	cpi	r24, 0x0D	; 13
     4fc:	21 f4       	brne	.+8      	; 0x506 <__vector_18+0x30>
		uart_fetch_complete = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
     504:	14 c0       	rjmp	.+40     	; 0x52e <__vector_18+0x58>
	} else {
		uart_buffer.buffer[uart_buffer.head] = UDR0;			 // read in the UDR0 register
     506:	eb e9       	ldi	r30, 0x9B	; 155
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	80 81       	ld	r24, Z
     50c:	91 81       	ldd	r25, Z+1	; 0x01
     50e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     512:	dc 01       	movw	r26, r24
     514:	a7 5e       	subi	r26, 0xE7	; 231
     516:	be 4f       	sbci	r27, 0xFE	; 254
     518:	2c 93       	st	X, r18
		uart_buffer.head++;
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	91 83       	std	Z+1, r25	; 0x01
     51e:	80 83       	st	Z, r24
		uart_buffer.size++;
     520:	e9 e9       	ldi	r30, 0x99	; 153
     522:	f1 e0       	ldi	r31, 0x01	; 1
     524:	80 81       	ld	r24, Z
     526:	91 81       	ldd	r25, Z+1	; 0x01
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	91 83       	std	Z+1, r25	; 0x01
     52c:	80 83       	st	Z, r24
	}
	
	if (uart_buffer.head >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
     52e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <uart_buffer+0x82>
     532:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <uart_buffer+0x83>
     536:	80 38       	cpi	r24, 0x80	; 128
     538:	91 05       	cpc	r25, r1
     53a:	20 f0       	brcs	.+8      	; 0x544 <__vector_18+0x6e>
		uart_buffer.head = 0;
     53c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <uart_buffer+0x83>
     540:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <uart_buffer+0x82>
	}
	
}
     544:	ff 91       	pop	r31
     546:	ef 91       	pop	r30
     548:	bf 91       	pop	r27
     54a:	af 91       	pop	r26
     54c:	9f 91       	pop	r25
     54e:	8f 91       	pop	r24
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti

0000055c <__vector_20>:

ISR(USART_TX_vect){
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	8f 93       	push	r24
	uart_tx_busy = 1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
     56e:	8f 91       	pop	r24
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <uart_string_complete>:

uint8_t uart_string_complete(){
	return uart_fetch_complete;
     57a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
}
     57e:	08 95       	ret

00000580 <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	aa 1f       	adc	r26, r26
     58a:	bb 1f       	adc	r27, r27
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	aa 1f       	adc	r26, r26
     592:	bb 1f       	adc	r27, r27
     594:	9c 01       	movw	r18, r24
     596:	ad 01       	movw	r20, r26
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	44 1f       	adc	r20, r20
     59e:	55 1f       	adc	r21, r21
     5a0:	22 0f       	add	r18, r18
     5a2:	33 1f       	adc	r19, r19
     5a4:	44 1f       	adc	r20, r20
     5a6:	55 1f       	adc	r21, r21
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	74 e2       	ldi	r23, 0x24	; 36
     5ac:	84 ef       	ldi	r24, 0xF4	; 244
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__udivmodsi4>
     5b4:	ba 01       	movw	r22, r20
     5b6:	a9 01       	movw	r20, r18
     5b8:	41 50       	subi	r20, 0x01	; 1
     5ba:	51 09       	sbc	r21, r1
     5bc:	61 09       	sbc	r22, r1
     5be:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
     5c0:	db 01       	movw	r26, r22
     5c2:	ca 01       	movw	r24, r20
     5c4:	88 27       	eor	r24, r24
     5c6:	9f 70       	andi	r25, 0x0F	; 15
     5c8:	aa 27       	eor	r26, r26
     5ca:	bb 27       	eor	r27, r27
     5cc:	89 2f       	mov	r24, r25
     5ce:	9a 2f       	mov	r25, r26
     5d0:	ab 2f       	mov	r26, r27
     5d2:	bb 27       	eor	r27, r27
     5d4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
     5d8:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
     5dc:	e1 ec       	ldi	r30, 0xC1	; 193
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	88 6d       	ori	r24, 0xD8	; 216
     5e4:	80 83       	st	Z, r24
	
	/* Initialize Objects */
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};		
     5e6:	e9 e1       	ldi	r30, 0x19	; 25
     5e8:	f1 e0       	ldi	r31, 0x01	; 1
     5ea:	86 e8       	ldi	r24, 0x86	; 134
     5ec:	df 01       	movw	r26, r30
     5ee:	1d 92       	st	X+, r1
     5f0:	8a 95       	dec	r24
     5f2:	e9 f7       	brne	.-6      	; 0x5ee <uart_init+0x6e>
     5f4:	08 95       	ret

000005f6 <uart_send_byte>:
}


void uart_send_byte(char data){
	while(uart_tx_busy == 0); // while UART is not transmitting
     5f6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     5fa:	99 23       	and	r25, r25
     5fc:	e1 f3       	breq	.-8      	; 0x5f6 <uart_send_byte>
	
	uart_tx_busy = 0; 
     5fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	UDR0 = data;				// load byte passed into the function to the uart buffer
     602:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     606:	08 95       	ret

00000608 <uart_send_string>:
}

void uart_send_string(char *arr) {
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
     60e:	89 91       	ld	r24, Y+
     610:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <uart_send_byte>
		i++;
	} while(arr[i] != '\0');
     614:	88 81       	ld	r24, Y
     616:	81 11       	cpse	r24, r1
     618:	fa cf       	rjmp	.-12     	; 0x60e <uart_send_string+0x6>

}
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <uart_get_buffer_size>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
     620:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <uart_buffer+0x80>
     624:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <uart_buffer+0x81>
     628:	08 95       	ret

0000062a <uart_read_buffer>:
	command[i] = '\0';
	return command; 
}

uint8_t uart_read_buffer(void){
	uint8_t data = uart_buffer.buffer[uart_buffer.tail];		// pull the data out of the buffer at the tail.
     62a:	ed e9       	ldi	r30, 0x9D	; 157
     62c:	f1 e0       	ldi	r31, 0x01	; 1
     62e:	20 81       	ld	r18, Z
     630:	31 81       	ldd	r19, Z+1	; 0x01
     632:	d9 01       	movw	r26, r18
     634:	a7 5e       	subi	r26, 0xE7	; 231
     636:	be 4f       	sbci	r27, 0xFE	; 254
     638:	8c 91       	ld	r24, X
	uart_buffer.tail++;								// increment the position of the tail
     63a:	2f 5f       	subi	r18, 0xFF	; 255
     63c:	3f 4f       	sbci	r19, 0xFF	; 255
     63e:	31 83       	std	Z+1, r19	; 0x01
     640:	20 83       	st	Z, r18
	uart_buffer.size--; 							// decrement the size of the queue.
     642:	e9 e9       	ldi	r30, 0x99	; 153
     644:	f1 e0       	ldi	r31, 0x01	; 1
     646:	40 81       	ld	r20, Z
     648:	51 81       	ldd	r21, Z+1	; 0x01
     64a:	41 50       	subi	r20, 0x01	; 1
     64c:	51 09       	sbc	r21, r1
     64e:	51 83       	std	Z+1, r21	; 0x01
     650:	40 83       	st	Z, r20

	if(uart_buffer.tail >= MAX_BUFFER_SIZE){		// reading has gone past the buffers size wrap the tail to the start.
     652:	20 38       	cpi	r18, 0x80	; 128
     654:	31 05       	cpc	r19, r1
     656:	20 f0       	brcs	.+8      	; 0x660 <uart_read_buffer+0x36>
		uart_buffer.tail = 0;
     658:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <uart_buffer+0x85>
     65c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <uart_buffer+0x84>
	}
	
	return data;
     660:	08 95       	ret

00000662 <uart_get_command>:
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
char * uart_get_command(void) {
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
	uart_fetch_complete = 0; 
     670:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
	} while(arr[i] != '\0');

}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     674:	00 91 99 01 	lds	r16, 0x0199	; 0x800199 <uart_buffer+0x80>
     678:	10 91 9a 01 	lds	r17, 0x019A	; 0x80019a <uart_buffer+0x81>
}
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
     67c:	c8 01       	movw	r24, r16
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	0e 94 a5 04 	call	0x94a	; 0x94a <malloc>
     684:	7c 01       	movw	r14, r24
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     686:	01 2b       	or	r16, r17
     688:	a9 f0       	breq	.+42     	; 0x6b4 <uart_get_command+0x52>
     68a:	c0 e0       	ldi	r28, 0x00	; 0
	} while(arr[i] != '\0');

}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     68c:	0f 2e       	mov	r0, r31
     68e:	f9 e9       	ldi	r31, 0x99	; 153
     690:	cf 2e       	mov	r12, r31
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	df 2e       	mov	r13, r31
     696:	f0 2d       	mov	r31, r0
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
     698:	87 01       	movw	r16, r14
     69a:	0c 0f       	add	r16, r28
     69c:	11 1d       	adc	r17, r1
     69e:	0e 94 15 03 	call	0x62a	; 0x62a <uart_read_buffer>
     6a2:	f8 01       	movw	r30, r16
     6a4:	80 83       	st	Z, r24
		++i; 
     6a6:	cf 5f       	subi	r28, 0xFF	; 255
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     6a8:	f6 01       	movw	r30, r12
     6aa:	80 81       	ld	r24, Z
     6ac:	91 81       	ldd	r25, Z+1	; 0x01
     6ae:	89 2b       	or	r24, r25
     6b0:	99 f7       	brne	.-26     	; 0x698 <uart_get_command+0x36>
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <uart_get_command+0x54>
}
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size +1) * sizeof(char));
	uint8_t i = 0;
     6b4:	c0 e0       	ldi	r28, 0x00	; 0
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
		++i; 
	}
	command[i] = '\0';
     6b6:	f7 01       	movw	r30, r14
     6b8:	ec 0f       	add	r30, r28
     6ba:	f1 1d       	adc	r31, r1
     6bc:	10 82       	st	Z, r1
	return command; 
}
     6be:	c7 01       	movw	r24, r14
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	08 95       	ret

000006d0 <__floatunsisf>:
     6d0:	e8 94       	clt
     6d2:	09 c0       	rjmp	.+18     	; 0x6e6 <__floatsisf+0x12>

000006d4 <__floatsisf>:
     6d4:	97 fb       	bst	r25, 7
     6d6:	3e f4       	brtc	.+14     	; 0x6e6 <__floatsisf+0x12>
     6d8:	90 95       	com	r25
     6da:	80 95       	com	r24
     6dc:	70 95       	com	r23
     6de:	61 95       	neg	r22
     6e0:	7f 4f       	sbci	r23, 0xFF	; 255
     6e2:	8f 4f       	sbci	r24, 0xFF	; 255
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	99 23       	and	r25, r25
     6e8:	a9 f0       	breq	.+42     	; 0x714 <__floatsisf+0x40>
     6ea:	f9 2f       	mov	r31, r25
     6ec:	96 e9       	ldi	r25, 0x96	; 150
     6ee:	bb 27       	eor	r27, r27
     6f0:	93 95       	inc	r25
     6f2:	f6 95       	lsr	r31
     6f4:	87 95       	ror	r24
     6f6:	77 95       	ror	r23
     6f8:	67 95       	ror	r22
     6fa:	b7 95       	ror	r27
     6fc:	f1 11       	cpse	r31, r1
     6fe:	f8 cf       	rjmp	.-16     	; 0x6f0 <__floatsisf+0x1c>
     700:	fa f4       	brpl	.+62     	; 0x740 <__floatsisf+0x6c>
     702:	bb 0f       	add	r27, r27
     704:	11 f4       	brne	.+4      	; 0x70a <__floatsisf+0x36>
     706:	60 ff       	sbrs	r22, 0
     708:	1b c0       	rjmp	.+54     	; 0x740 <__floatsisf+0x6c>
     70a:	6f 5f       	subi	r22, 0xFF	; 255
     70c:	7f 4f       	sbci	r23, 0xFF	; 255
     70e:	8f 4f       	sbci	r24, 0xFF	; 255
     710:	9f 4f       	sbci	r25, 0xFF	; 255
     712:	16 c0       	rjmp	.+44     	; 0x740 <__floatsisf+0x6c>
     714:	88 23       	and	r24, r24
     716:	11 f0       	breq	.+4      	; 0x71c <__floatsisf+0x48>
     718:	96 e9       	ldi	r25, 0x96	; 150
     71a:	11 c0       	rjmp	.+34     	; 0x73e <__floatsisf+0x6a>
     71c:	77 23       	and	r23, r23
     71e:	21 f0       	breq	.+8      	; 0x728 <__floatsisf+0x54>
     720:	9e e8       	ldi	r25, 0x8E	; 142
     722:	87 2f       	mov	r24, r23
     724:	76 2f       	mov	r23, r22
     726:	05 c0       	rjmp	.+10     	; 0x732 <__floatsisf+0x5e>
     728:	66 23       	and	r22, r22
     72a:	71 f0       	breq	.+28     	; 0x748 <__floatsisf+0x74>
     72c:	96 e8       	ldi	r25, 0x86	; 134
     72e:	86 2f       	mov	r24, r22
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	2a f0       	brmi	.+10     	; 0x740 <__floatsisf+0x6c>
     736:	9a 95       	dec	r25
     738:	66 0f       	add	r22, r22
     73a:	77 1f       	adc	r23, r23
     73c:	88 1f       	adc	r24, r24
     73e:	da f7       	brpl	.-10     	; 0x736 <__floatsisf+0x62>
     740:	88 0f       	add	r24, r24
     742:	96 95       	lsr	r25
     744:	87 95       	ror	r24
     746:	97 f9       	bld	r25, 7
     748:	08 95       	ret

0000074a <__mulsf3>:
     74a:	0e 94 b8 03 	call	0x770	; 0x770 <__mulsf3x>
     74e:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_round>
     752:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_pscA>
     756:	38 f0       	brcs	.+14     	; 0x766 <__mulsf3+0x1c>
     758:	0e 94 22 04 	call	0x844	; 0x844 <__fp_pscB>
     75c:	20 f0       	brcs	.+8      	; 0x766 <__mulsf3+0x1c>
     75e:	95 23       	and	r25, r21
     760:	11 f0       	breq	.+4      	; 0x766 <__mulsf3+0x1c>
     762:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_inf>
     766:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_nan>
     76a:	11 24       	eor	r1, r1
     76c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_szero>

00000770 <__mulsf3x>:
     770:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_split3>
     774:	70 f3       	brcs	.-36     	; 0x752 <__mulsf3+0x8>

00000776 <__mulsf3_pse>:
     776:	95 9f       	mul	r25, r21
     778:	c1 f3       	breq	.-16     	; 0x76a <__mulsf3+0x20>
     77a:	95 0f       	add	r25, r21
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	55 1f       	adc	r21, r21
     780:	62 9f       	mul	r22, r18
     782:	f0 01       	movw	r30, r0
     784:	72 9f       	mul	r23, r18
     786:	bb 27       	eor	r27, r27
     788:	f0 0d       	add	r31, r0
     78a:	b1 1d       	adc	r27, r1
     78c:	63 9f       	mul	r22, r19
     78e:	aa 27       	eor	r26, r26
     790:	f0 0d       	add	r31, r0
     792:	b1 1d       	adc	r27, r1
     794:	aa 1f       	adc	r26, r26
     796:	64 9f       	mul	r22, r20
     798:	66 27       	eor	r22, r22
     79a:	b0 0d       	add	r27, r0
     79c:	a1 1d       	adc	r26, r1
     79e:	66 1f       	adc	r22, r22
     7a0:	82 9f       	mul	r24, r18
     7a2:	22 27       	eor	r18, r18
     7a4:	b0 0d       	add	r27, r0
     7a6:	a1 1d       	adc	r26, r1
     7a8:	62 1f       	adc	r22, r18
     7aa:	73 9f       	mul	r23, r19
     7ac:	b0 0d       	add	r27, r0
     7ae:	a1 1d       	adc	r26, r1
     7b0:	62 1f       	adc	r22, r18
     7b2:	83 9f       	mul	r24, r19
     7b4:	a0 0d       	add	r26, r0
     7b6:	61 1d       	adc	r22, r1
     7b8:	22 1f       	adc	r18, r18
     7ba:	74 9f       	mul	r23, r20
     7bc:	33 27       	eor	r19, r19
     7be:	a0 0d       	add	r26, r0
     7c0:	61 1d       	adc	r22, r1
     7c2:	23 1f       	adc	r18, r19
     7c4:	84 9f       	mul	r24, r20
     7c6:	60 0d       	add	r22, r0
     7c8:	21 1d       	adc	r18, r1
     7ca:	82 2f       	mov	r24, r18
     7cc:	76 2f       	mov	r23, r22
     7ce:	6a 2f       	mov	r22, r26
     7d0:	11 24       	eor	r1, r1
     7d2:	9f 57       	subi	r25, 0x7F	; 127
     7d4:	50 40       	sbci	r21, 0x00	; 0
     7d6:	9a f0       	brmi	.+38     	; 0x7fe <__mulsf3_pse+0x88>
     7d8:	f1 f0       	breq	.+60     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7da:	88 23       	and	r24, r24
     7dc:	4a f0       	brmi	.+18     	; 0x7f0 <__mulsf3_pse+0x7a>
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	bb 1f       	adc	r27, r27
     7e4:	66 1f       	adc	r22, r22
     7e6:	77 1f       	adc	r23, r23
     7e8:	88 1f       	adc	r24, r24
     7ea:	91 50       	subi	r25, 0x01	; 1
     7ec:	50 40       	sbci	r21, 0x00	; 0
     7ee:	a9 f7       	brne	.-22     	; 0x7da <__mulsf3_pse+0x64>
     7f0:	9e 3f       	cpi	r25, 0xFE	; 254
     7f2:	51 05       	cpc	r21, r1
     7f4:	80 f0       	brcs	.+32     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7f6:	0c 94 12 04 	jmp	0x824	; 0x824 <__fp_inf>
     7fa:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_szero>
     7fe:	5f 3f       	cpi	r21, 0xFF	; 255
     800:	e4 f3       	brlt	.-8      	; 0x7fa <__mulsf3_pse+0x84>
     802:	98 3e       	cpi	r25, 0xE8	; 232
     804:	d4 f3       	brlt	.-12     	; 0x7fa <__mulsf3_pse+0x84>
     806:	86 95       	lsr	r24
     808:	77 95       	ror	r23
     80a:	67 95       	ror	r22
     80c:	b7 95       	ror	r27
     80e:	f7 95       	ror	r31
     810:	e7 95       	ror	r30
     812:	9f 5f       	subi	r25, 0xFF	; 255
     814:	c1 f7       	brne	.-16     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     816:	fe 2b       	or	r31, r30
     818:	88 0f       	add	r24, r24
     81a:	91 1d       	adc	r25, r1
     81c:	96 95       	lsr	r25
     81e:	87 95       	ror	r24
     820:	97 f9       	bld	r25, 7
     822:	08 95       	ret

00000824 <__fp_inf>:
     824:	97 f9       	bld	r25, 7
     826:	9f 67       	ori	r25, 0x7F	; 127
     828:	80 e8       	ldi	r24, 0x80	; 128
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	08 95       	ret

00000830 <__fp_nan>:
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	80 ec       	ldi	r24, 0xC0	; 192
     834:	08 95       	ret

00000836 <__fp_pscA>:
     836:	00 24       	eor	r0, r0
     838:	0a 94       	dec	r0
     83a:	16 16       	cp	r1, r22
     83c:	17 06       	cpc	r1, r23
     83e:	18 06       	cpc	r1, r24
     840:	09 06       	cpc	r0, r25
     842:	08 95       	ret

00000844 <__fp_pscB>:
     844:	00 24       	eor	r0, r0
     846:	0a 94       	dec	r0
     848:	12 16       	cp	r1, r18
     84a:	13 06       	cpc	r1, r19
     84c:	14 06       	cpc	r1, r20
     84e:	05 06       	cpc	r0, r21
     850:	08 95       	ret

00000852 <__fp_round>:
     852:	09 2e       	mov	r0, r25
     854:	03 94       	inc	r0
     856:	00 0c       	add	r0, r0
     858:	11 f4       	brne	.+4      	; 0x85e <__fp_round+0xc>
     85a:	88 23       	and	r24, r24
     85c:	52 f0       	brmi	.+20     	; 0x872 <__fp_round+0x20>
     85e:	bb 0f       	add	r27, r27
     860:	40 f4       	brcc	.+16     	; 0x872 <__fp_round+0x20>
     862:	bf 2b       	or	r27, r31
     864:	11 f4       	brne	.+4      	; 0x86a <__fp_round+0x18>
     866:	60 ff       	sbrs	r22, 0
     868:	04 c0       	rjmp	.+8      	; 0x872 <__fp_round+0x20>
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	8f 4f       	sbci	r24, 0xFF	; 255
     870:	9f 4f       	sbci	r25, 0xFF	; 255
     872:	08 95       	ret

00000874 <__fp_split3>:
     874:	57 fd       	sbrc	r21, 7
     876:	90 58       	subi	r25, 0x80	; 128
     878:	44 0f       	add	r20, r20
     87a:	55 1f       	adc	r21, r21
     87c:	59 f0       	breq	.+22     	; 0x894 <__fp_splitA+0x10>
     87e:	5f 3f       	cpi	r21, 0xFF	; 255
     880:	71 f0       	breq	.+28     	; 0x89e <__fp_splitA+0x1a>
     882:	47 95       	ror	r20

00000884 <__fp_splitA>:
     884:	88 0f       	add	r24, r24
     886:	97 fb       	bst	r25, 7
     888:	99 1f       	adc	r25, r25
     88a:	61 f0       	breq	.+24     	; 0x8a4 <__fp_splitA+0x20>
     88c:	9f 3f       	cpi	r25, 0xFF	; 255
     88e:	79 f0       	breq	.+30     	; 0x8ae <__fp_splitA+0x2a>
     890:	87 95       	ror	r24
     892:	08 95       	ret
     894:	12 16       	cp	r1, r18
     896:	13 06       	cpc	r1, r19
     898:	14 06       	cpc	r1, r20
     89a:	55 1f       	adc	r21, r21
     89c:	f2 cf       	rjmp	.-28     	; 0x882 <__fp_split3+0xe>
     89e:	46 95       	lsr	r20
     8a0:	f1 df       	rcall	.-30     	; 0x884 <__fp_splitA>
     8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <__fp_splitA+0x30>
     8a4:	16 16       	cp	r1, r22
     8a6:	17 06       	cpc	r1, r23
     8a8:	18 06       	cpc	r1, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	f1 cf       	rjmp	.-30     	; 0x890 <__fp_splitA+0xc>
     8ae:	86 95       	lsr	r24
     8b0:	71 05       	cpc	r23, r1
     8b2:	61 05       	cpc	r22, r1
     8b4:	08 94       	sec
     8b6:	08 95       	ret

000008b8 <__fp_zero>:
     8b8:	e8 94       	clt

000008ba <__fp_szero>:
     8ba:	bb 27       	eor	r27, r27
     8bc:	66 27       	eor	r22, r22
     8be:	77 27       	eor	r23, r23
     8c0:	cb 01       	movw	r24, r22
     8c2:	97 f9       	bld	r25, 7
     8c4:	08 95       	ret

000008c6 <__udivmodsi4>:
     8c6:	a1 e2       	ldi	r26, 0x21	; 33
     8c8:	1a 2e       	mov	r1, r26
     8ca:	aa 1b       	sub	r26, r26
     8cc:	bb 1b       	sub	r27, r27
     8ce:	fd 01       	movw	r30, r26
     8d0:	0d c0       	rjmp	.+26     	; 0x8ec <__udivmodsi4_ep>

000008d2 <__udivmodsi4_loop>:
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	ee 1f       	adc	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	a2 17       	cp	r26, r18
     8dc:	b3 07       	cpc	r27, r19
     8de:	e4 07       	cpc	r30, r20
     8e0:	f5 07       	cpc	r31, r21
     8e2:	20 f0       	brcs	.+8      	; 0x8ec <__udivmodsi4_ep>
     8e4:	a2 1b       	sub	r26, r18
     8e6:	b3 0b       	sbc	r27, r19
     8e8:	e4 0b       	sbc	r30, r20
     8ea:	f5 0b       	sbc	r31, r21

000008ec <__udivmodsi4_ep>:
     8ec:	66 1f       	adc	r22, r22
     8ee:	77 1f       	adc	r23, r23
     8f0:	88 1f       	adc	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	1a 94       	dec	r1
     8f6:	69 f7       	brne	.-38     	; 0x8d2 <__udivmodsi4_loop>
     8f8:	60 95       	com	r22
     8fa:	70 95       	com	r23
     8fc:	80 95       	com	r24
     8fe:	90 95       	com	r25
     900:	9b 01       	movw	r18, r22
     902:	ac 01       	movw	r20, r24
     904:	bd 01       	movw	r22, r26
     906:	cf 01       	movw	r24, r30
     908:	08 95       	ret

0000090a <dtostrf>:
     90a:	ef 92       	push	r14
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	e8 01       	movw	r28, r16
     916:	47 fd       	sbrc	r20, 7
     918:	02 c0       	rjmp	.+4      	; 0x91e <dtostrf+0x14>
     91a:	34 e0       	ldi	r19, 0x04	; 4
     91c:	01 c0       	rjmp	.+2      	; 0x920 <dtostrf+0x16>
     91e:	34 e1       	ldi	r19, 0x14	; 20
     920:	04 2e       	mov	r0, r20
     922:	00 0c       	add	r0, r0
     924:	55 0b       	sbc	r21, r21
     926:	57 ff       	sbrs	r21, 7
     928:	03 c0       	rjmp	.+6      	; 0x930 <dtostrf+0x26>
     92a:	51 95       	neg	r21
     92c:	41 95       	neg	r20
     92e:	51 09       	sbc	r21, r1
     930:	e3 2e       	mov	r14, r19
     932:	02 2f       	mov	r16, r18
     934:	24 2f       	mov	r18, r20
     936:	ae 01       	movw	r20, r28
     938:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <dtoa_prf>
     93c:	ce 01       	movw	r24, r28
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ef 90       	pop	r14
     948:	08 95       	ret

0000094a <malloc>:
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	91 05       	cpc	r25, r1
     956:	10 f4       	brcc	.+4      	; 0x95c <malloc+0x12>
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <__flp>
     960:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <__flp+0x1>
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	a0 e0       	ldi	r26, 0x00	; 0
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	30 97       	sbiw	r30, 0x00	; 0
     96e:	19 f1       	breq	.+70     	; 0x9b6 <malloc+0x6c>
     970:	40 81       	ld	r20, Z
     972:	51 81       	ldd	r21, Z+1	; 0x01
     974:	02 81       	ldd	r16, Z+2	; 0x02
     976:	13 81       	ldd	r17, Z+3	; 0x03
     978:	48 17       	cp	r20, r24
     97a:	59 07       	cpc	r21, r25
     97c:	c8 f0       	brcs	.+50     	; 0x9b0 <malloc+0x66>
     97e:	84 17       	cp	r24, r20
     980:	95 07       	cpc	r25, r21
     982:	69 f4       	brne	.+26     	; 0x99e <malloc+0x54>
     984:	10 97       	sbiw	r26, 0x00	; 0
     986:	31 f0       	breq	.+12     	; 0x994 <malloc+0x4a>
     988:	12 96       	adiw	r26, 0x02	; 2
     98a:	0c 93       	st	X, r16
     98c:	12 97       	sbiw	r26, 0x02	; 2
     98e:	13 96       	adiw	r26, 0x03	; 3
     990:	1c 93       	st	X, r17
     992:	27 c0       	rjmp	.+78     	; 0x9e2 <malloc+0x98>
     994:	00 93 a1 01 	sts	0x01A1, r16	; 0x8001a1 <__flp>
     998:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__flp+0x1>
     99c:	22 c0       	rjmp	.+68     	; 0x9e2 <malloc+0x98>
     99e:	21 15       	cp	r18, r1
     9a0:	31 05       	cpc	r19, r1
     9a2:	19 f0       	breq	.+6      	; 0x9aa <malloc+0x60>
     9a4:	42 17       	cp	r20, r18
     9a6:	53 07       	cpc	r21, r19
     9a8:	18 f4       	brcc	.+6      	; 0x9b0 <malloc+0x66>
     9aa:	9a 01       	movw	r18, r20
     9ac:	bd 01       	movw	r22, r26
     9ae:	ef 01       	movw	r28, r30
     9b0:	df 01       	movw	r26, r30
     9b2:	f8 01       	movw	r30, r16
     9b4:	db cf       	rjmp	.-74     	; 0x96c <malloc+0x22>
     9b6:	21 15       	cp	r18, r1
     9b8:	31 05       	cpc	r19, r1
     9ba:	f9 f0       	breq	.+62     	; 0x9fa <malloc+0xb0>
     9bc:	28 1b       	sub	r18, r24
     9be:	39 0b       	sbc	r19, r25
     9c0:	24 30       	cpi	r18, 0x04	; 4
     9c2:	31 05       	cpc	r19, r1
     9c4:	80 f4       	brcc	.+32     	; 0x9e6 <malloc+0x9c>
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ca:	61 15       	cp	r22, r1
     9cc:	71 05       	cpc	r23, r1
     9ce:	21 f0       	breq	.+8      	; 0x9d8 <malloc+0x8e>
     9d0:	fb 01       	movw	r30, r22
     9d2:	93 83       	std	Z+3, r25	; 0x03
     9d4:	82 83       	std	Z+2, r24	; 0x02
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <malloc+0x96>
     9d8:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <__flp+0x1>
     9dc:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <__flp>
     9e0:	fe 01       	movw	r30, r28
     9e2:	32 96       	adiw	r30, 0x02	; 2
     9e4:	44 c0       	rjmp	.+136    	; 0xa6e <malloc+0x124>
     9e6:	fe 01       	movw	r30, r28
     9e8:	e2 0f       	add	r30, r18
     9ea:	f3 1f       	adc	r31, r19
     9ec:	81 93       	st	Z+, r24
     9ee:	91 93       	st	Z+, r25
     9f0:	22 50       	subi	r18, 0x02	; 2
     9f2:	31 09       	sbc	r19, r1
     9f4:	39 83       	std	Y+1, r19	; 0x01
     9f6:	28 83       	st	Y, r18
     9f8:	3a c0       	rjmp	.+116    	; 0xa6e <malloc+0x124>
     9fa:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     9fe:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     a02:	23 2b       	or	r18, r19
     a04:	41 f4       	brne	.+16     	; 0xa16 <malloc+0xcc>
     a06:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__malloc_heap_start>
     a0a:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__malloc_heap_start+0x1>
     a0e:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <__brkval+0x1>
     a12:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <__brkval>
     a16:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <__malloc_heap_end>
     a1a:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <__malloc_heap_end+0x1>
     a1e:	21 15       	cp	r18, r1
     a20:	31 05       	cpc	r19, r1
     a22:	41 f4       	brne	.+16     	; 0xa34 <malloc+0xea>
     a24:	2d b7       	in	r18, 0x3d	; 61
     a26:	3e b7       	in	r19, 0x3e	; 62
     a28:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <__malloc_margin>
     a2c:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <__malloc_margin+0x1>
     a30:	24 1b       	sub	r18, r20
     a32:	35 0b       	sbc	r19, r21
     a34:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <__brkval>
     a38:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <__brkval+0x1>
     a3c:	e2 17       	cp	r30, r18
     a3e:	f3 07       	cpc	r31, r19
     a40:	a0 f4       	brcc	.+40     	; 0xa6a <malloc+0x120>
     a42:	2e 1b       	sub	r18, r30
     a44:	3f 0b       	sbc	r19, r31
     a46:	28 17       	cp	r18, r24
     a48:	39 07       	cpc	r19, r25
     a4a:	78 f0       	brcs	.+30     	; 0xa6a <malloc+0x120>
     a4c:	ac 01       	movw	r20, r24
     a4e:	4e 5f       	subi	r20, 0xFE	; 254
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	24 17       	cp	r18, r20
     a54:	35 07       	cpc	r19, r21
     a56:	48 f0       	brcs	.+18     	; 0xa6a <malloc+0x120>
     a58:	4e 0f       	add	r20, r30
     a5a:	5f 1f       	adc	r21, r31
     a5c:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <__brkval+0x1>
     a60:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <__brkval>
     a64:	81 93       	st	Z+, r24
     a66:	91 93       	st	Z+, r25
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <malloc+0x124>
     a6a:	e0 e0       	ldi	r30, 0x00	; 0
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	cf 01       	movw	r24, r30
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <free>:
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	09 f4       	brne	.+2      	; 0xa84 <free+0xa>
     a82:	81 c0       	rjmp	.+258    	; 0xb86 <free+0x10c>
     a84:	fc 01       	movw	r30, r24
     a86:	32 97       	sbiw	r30, 0x02	; 2
     a88:	13 82       	std	Z+3, r1	; 0x03
     a8a:	12 82       	std	Z+2, r1	; 0x02
     a8c:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <__flp>
     a90:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <__flp+0x1>
     a94:	10 97       	sbiw	r26, 0x00	; 0
     a96:	81 f4       	brne	.+32     	; 0xab8 <free+0x3e>
     a98:	20 81       	ld	r18, Z
     a9a:	31 81       	ldd	r19, Z+1	; 0x01
     a9c:	82 0f       	add	r24, r18
     a9e:	93 1f       	adc	r25, r19
     aa0:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     aa4:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     aa8:	28 17       	cp	r18, r24
     aaa:	39 07       	cpc	r19, r25
     aac:	51 f5       	brne	.+84     	; 0xb02 <free+0x88>
     aae:	f0 93 a0 01 	sts	0x01A0, r31	; 0x8001a0 <__brkval+0x1>
     ab2:	e0 93 9f 01 	sts	0x019F, r30	; 0x80019f <__brkval>
     ab6:	67 c0       	rjmp	.+206    	; 0xb86 <free+0x10c>
     ab8:	ed 01       	movw	r28, r26
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	ce 17       	cp	r28, r30
     ac0:	df 07       	cpc	r29, r31
     ac2:	40 f4       	brcc	.+16     	; 0xad4 <free+0x5a>
     ac4:	4a 81       	ldd	r20, Y+2	; 0x02
     ac6:	5b 81       	ldd	r21, Y+3	; 0x03
     ac8:	9e 01       	movw	r18, r28
     aca:	41 15       	cp	r20, r1
     acc:	51 05       	cpc	r21, r1
     ace:	f1 f0       	breq	.+60     	; 0xb0c <free+0x92>
     ad0:	ea 01       	movw	r28, r20
     ad2:	f5 cf       	rjmp	.-22     	; 0xabe <free+0x44>
     ad4:	d3 83       	std	Z+3, r29	; 0x03
     ad6:	c2 83       	std	Z+2, r28	; 0x02
     ad8:	40 81       	ld	r20, Z
     ada:	51 81       	ldd	r21, Z+1	; 0x01
     adc:	84 0f       	add	r24, r20
     ade:	95 1f       	adc	r25, r21
     ae0:	c8 17       	cp	r28, r24
     ae2:	d9 07       	cpc	r29, r25
     ae4:	59 f4       	brne	.+22     	; 0xafc <free+0x82>
     ae6:	88 81       	ld	r24, Y
     ae8:	99 81       	ldd	r25, Y+1	; 0x01
     aea:	84 0f       	add	r24, r20
     aec:	95 1f       	adc	r25, r21
     aee:	02 96       	adiw	r24, 0x02	; 2
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	80 83       	st	Z, r24
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	9b 81       	ldd	r25, Y+3	; 0x03
     af8:	93 83       	std	Z+3, r25	; 0x03
     afa:	82 83       	std	Z+2, r24	; 0x02
     afc:	21 15       	cp	r18, r1
     afe:	31 05       	cpc	r19, r1
     b00:	29 f4       	brne	.+10     	; 0xb0c <free+0x92>
     b02:	f0 93 a2 01 	sts	0x01A2, r31	; 0x8001a2 <__flp+0x1>
     b06:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <__flp>
     b0a:	3d c0       	rjmp	.+122    	; 0xb86 <free+0x10c>
     b0c:	e9 01       	movw	r28, r18
     b0e:	fb 83       	std	Y+3, r31	; 0x03
     b10:	ea 83       	std	Y+2, r30	; 0x02
     b12:	49 91       	ld	r20, Y+
     b14:	59 91       	ld	r21, Y+
     b16:	c4 0f       	add	r28, r20
     b18:	d5 1f       	adc	r29, r21
     b1a:	ec 17       	cp	r30, r28
     b1c:	fd 07       	cpc	r31, r29
     b1e:	61 f4       	brne	.+24     	; 0xb38 <free+0xbe>
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	84 0f       	add	r24, r20
     b26:	95 1f       	adc	r25, r21
     b28:	02 96       	adiw	r24, 0x02	; 2
     b2a:	e9 01       	movw	r28, r18
     b2c:	99 83       	std	Y+1, r25	; 0x01
     b2e:	88 83       	st	Y, r24
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	93 81       	ldd	r25, Z+3	; 0x03
     b34:	9b 83       	std	Y+3, r25	; 0x03
     b36:	8a 83       	std	Y+2, r24	; 0x02
     b38:	e0 e0       	ldi	r30, 0x00	; 0
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	12 96       	adiw	r26, 0x02	; 2
     b3e:	8d 91       	ld	r24, X+
     b40:	9c 91       	ld	r25, X
     b42:	13 97       	sbiw	r26, 0x03	; 3
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	19 f0       	breq	.+6      	; 0xb4e <free+0xd4>
     b48:	fd 01       	movw	r30, r26
     b4a:	dc 01       	movw	r26, r24
     b4c:	f7 cf       	rjmp	.-18     	; 0xb3c <free+0xc2>
     b4e:	8d 91       	ld	r24, X+
     b50:	9c 91       	ld	r25, X
     b52:	11 97       	sbiw	r26, 0x01	; 1
     b54:	9d 01       	movw	r18, r26
     b56:	2e 5f       	subi	r18, 0xFE	; 254
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
     b5a:	82 0f       	add	r24, r18
     b5c:	93 1f       	adc	r25, r19
     b5e:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     b62:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     b66:	28 17       	cp	r18, r24
     b68:	39 07       	cpc	r19, r25
     b6a:	69 f4       	brne	.+26     	; 0xb86 <free+0x10c>
     b6c:	30 97       	sbiw	r30, 0x00	; 0
     b6e:	29 f4       	brne	.+10     	; 0xb7a <free+0x100>
     b70:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__flp+0x1>
     b74:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__flp>
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <free+0x104>
     b7a:	13 82       	std	Z+3, r1	; 0x03
     b7c:	12 82       	std	Z+2, r1	; 0x02
     b7e:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <__brkval+0x1>
     b82:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <__brkval>
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <strtok>:
     b8c:	47 e1       	ldi	r20, 0x17	; 23
     b8e:	51 e0       	ldi	r21, 0x01	; 1
     b90:	0e 94 cb 05 	call	0xb96	; 0xb96 <strtok_r>
     b94:	08 95       	ret

00000b96 <strtok_r>:
     b96:	fa 01       	movw	r30, r20
     b98:	a1 91       	ld	r26, Z+
     b9a:	b0 81       	ld	r27, Z
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	19 f4       	brne	.+6      	; 0xba6 <strtok_r+0x10>
     ba0:	10 97       	sbiw	r26, 0x00	; 0
     ba2:	e1 f0       	breq	.+56     	; 0xbdc <strtok_r+0x46>
     ba4:	cd 01       	movw	r24, r26
     ba6:	dc 01       	movw	r26, r24
     ba8:	cd 01       	movw	r24, r26
     baa:	0d 90       	ld	r0, X+
     bac:	00 20       	and	r0, r0
     bae:	11 f4       	brne	.+4      	; 0xbb4 <strtok_r+0x1e>
     bb0:	c0 01       	movw	r24, r0
     bb2:	13 c0       	rjmp	.+38     	; 0xbda <strtok_r+0x44>
     bb4:	fb 01       	movw	r30, r22
     bb6:	21 91       	ld	r18, Z+
     bb8:	22 23       	and	r18, r18
     bba:	19 f0       	breq	.+6      	; 0xbc2 <strtok_r+0x2c>
     bbc:	20 15       	cp	r18, r0
     bbe:	d9 f7       	brne	.-10     	; 0xbb6 <strtok_r+0x20>
     bc0:	f3 cf       	rjmp	.-26     	; 0xba8 <strtok_r+0x12>
     bc2:	fb 01       	movw	r30, r22
     bc4:	21 91       	ld	r18, Z+
     bc6:	20 15       	cp	r18, r0
     bc8:	19 f4       	brne	.+6      	; 0xbd0 <strtok_r+0x3a>
     bca:	1e 92       	st	-X, r1
     bcc:	11 96       	adiw	r26, 0x01	; 1
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <strtok_r+0x46>
     bd0:	22 23       	and	r18, r18
     bd2:	c1 f7       	brne	.-16     	; 0xbc4 <strtok_r+0x2e>
     bd4:	0d 90       	ld	r0, X+
     bd6:	00 20       	and	r0, r0
     bd8:	a1 f7       	brne	.-24     	; 0xbc2 <strtok_r+0x2c>
     bda:	d0 01       	movw	r26, r0
     bdc:	fa 01       	movw	r30, r20
     bde:	a1 93       	st	Z+, r26
     be0:	b0 83       	st	Z, r27
     be2:	08 95       	ret

00000be4 <dtoa_prf>:
     be4:	a9 e0       	ldi	r26, 0x09	; 9
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 ef       	ldi	r30, 0xF8	; 248
     bea:	f5 e0       	ldi	r31, 0x05	; 5
     bec:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__prologue_saves__+0xc>
     bf0:	6a 01       	movw	r12, r20
     bf2:	12 2f       	mov	r17, r18
     bf4:	b0 2e       	mov	r11, r16
     bf6:	2b e3       	ldi	r18, 0x3B	; 59
     bf8:	20 17       	cp	r18, r16
     bfa:	20 f0       	brcs	.+8      	; 0xc04 <dtoa_prf+0x20>
     bfc:	ff 24       	eor	r15, r15
     bfe:	f3 94       	inc	r15
     c00:	f0 0e       	add	r15, r16
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <dtoa_prf+0x24>
     c04:	2c e3       	ldi	r18, 0x3C	; 60
     c06:	f2 2e       	mov	r15, r18
     c08:	0f 2d       	mov	r16, r15
     c0a:	27 e0       	ldi	r18, 0x07	; 7
     c0c:	ae 01       	movw	r20, r28
     c0e:	4f 5f       	subi	r20, 0xFF	; 255
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	0e 94 4c 07 	call	0xe98	; 0xe98 <__ftoa_engine>
     c16:	bc 01       	movw	r22, r24
     c18:	49 81       	ldd	r20, Y+1	; 0x01
     c1a:	84 2f       	mov	r24, r20
     c1c:	89 70       	andi	r24, 0x09	; 9
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	31 f0       	breq	.+12     	; 0xc2e <dtoa_prf+0x4a>
     c22:	e1 fc       	sbrc	r14, 1
     c24:	06 c0       	rjmp	.+12     	; 0xc32 <dtoa_prf+0x4e>
     c26:	e0 fe       	sbrs	r14, 0
     c28:	06 c0       	rjmp	.+12     	; 0xc36 <dtoa_prf+0x52>
     c2a:	90 e2       	ldi	r25, 0x20	; 32
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <dtoa_prf+0x54>
     c2e:	9d e2       	ldi	r25, 0x2D	; 45
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <dtoa_prf+0x54>
     c32:	9b e2       	ldi	r25, 0x2B	; 43
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <dtoa_prf+0x54>
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	5e 2d       	mov	r21, r14
     c3a:	50 71       	andi	r21, 0x10	; 16
     c3c:	43 ff       	sbrs	r20, 3
     c3e:	3c c0       	rjmp	.+120    	; 0xcb8 <dtoa_prf+0xd4>
     c40:	91 11       	cpse	r25, r1
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <dtoa_prf+0x64>
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <dtoa_prf+0x66>
     c48:	84 e0       	ldi	r24, 0x04	; 4
     c4a:	81 17       	cp	r24, r17
     c4c:	18 f4       	brcc	.+6      	; 0xc54 <dtoa_prf+0x70>
     c4e:	21 2f       	mov	r18, r17
     c50:	28 1b       	sub	r18, r24
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <dtoa_prf+0x72>
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	51 11       	cpse	r21, r1
     c58:	0b c0       	rjmp	.+22     	; 0xc70 <dtoa_prf+0x8c>
     c5a:	f6 01       	movw	r30, r12
     c5c:	82 2f       	mov	r24, r18
     c5e:	30 e2       	ldi	r19, 0x20	; 32
     c60:	88 23       	and	r24, r24
     c62:	19 f0       	breq	.+6      	; 0xc6a <dtoa_prf+0x86>
     c64:	31 93       	st	Z+, r19
     c66:	81 50       	subi	r24, 0x01	; 1
     c68:	fb cf       	rjmp	.-10     	; 0xc60 <dtoa_prf+0x7c>
     c6a:	c2 0e       	add	r12, r18
     c6c:	d1 1c       	adc	r13, r1
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	99 23       	and	r25, r25
     c72:	29 f0       	breq	.+10     	; 0xc7e <dtoa_prf+0x9a>
     c74:	d6 01       	movw	r26, r12
     c76:	9c 93       	st	X, r25
     c78:	f6 01       	movw	r30, r12
     c7a:	31 96       	adiw	r30, 0x01	; 1
     c7c:	6f 01       	movw	r12, r30
     c7e:	c6 01       	movw	r24, r12
     c80:	03 96       	adiw	r24, 0x03	; 3
     c82:	e2 fe       	sbrs	r14, 2
     c84:	0a c0       	rjmp	.+20     	; 0xc9a <dtoa_prf+0xb6>
     c86:	3e e4       	ldi	r19, 0x4E	; 78
     c88:	d6 01       	movw	r26, r12
     c8a:	3c 93       	st	X, r19
     c8c:	41 e4       	ldi	r20, 0x41	; 65
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	4c 93       	st	X, r20
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	12 96       	adiw	r26, 0x02	; 2
     c96:	3c 93       	st	X, r19
     c98:	06 c0       	rjmp	.+12     	; 0xca6 <dtoa_prf+0xc2>
     c9a:	3e e6       	ldi	r19, 0x6E	; 110
     c9c:	f6 01       	movw	r30, r12
     c9e:	30 83       	st	Z, r19
     ca0:	41 e6       	ldi	r20, 0x61	; 97
     ca2:	41 83       	std	Z+1, r20	; 0x01
     ca4:	32 83       	std	Z+2, r19	; 0x02
     ca6:	fc 01       	movw	r30, r24
     ca8:	32 2f       	mov	r19, r18
     caa:	40 e2       	ldi	r20, 0x20	; 32
     cac:	33 23       	and	r19, r19
     cae:	09 f4       	brne	.+2      	; 0xcb2 <dtoa_prf+0xce>
     cb0:	42 c0       	rjmp	.+132    	; 0xd36 <dtoa_prf+0x152>
     cb2:	41 93       	st	Z+, r20
     cb4:	31 50       	subi	r19, 0x01	; 1
     cb6:	fa cf       	rjmp	.-12     	; 0xcac <dtoa_prf+0xc8>
     cb8:	42 ff       	sbrs	r20, 2
     cba:	44 c0       	rjmp	.+136    	; 0xd44 <dtoa_prf+0x160>
     cbc:	91 11       	cpse	r25, r1
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <dtoa_prf+0xe0>
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <dtoa_prf+0xe2>
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	81 17       	cp	r24, r17
     cc8:	18 f4       	brcc	.+6      	; 0xcd0 <dtoa_prf+0xec>
     cca:	21 2f       	mov	r18, r17
     ccc:	28 1b       	sub	r18, r24
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <dtoa_prf+0xee>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	51 11       	cpse	r21, r1
     cd4:	0b c0       	rjmp	.+22     	; 0xcec <dtoa_prf+0x108>
     cd6:	f6 01       	movw	r30, r12
     cd8:	82 2f       	mov	r24, r18
     cda:	30 e2       	ldi	r19, 0x20	; 32
     cdc:	88 23       	and	r24, r24
     cde:	19 f0       	breq	.+6      	; 0xce6 <dtoa_prf+0x102>
     ce0:	31 93       	st	Z+, r19
     ce2:	81 50       	subi	r24, 0x01	; 1
     ce4:	fb cf       	rjmp	.-10     	; 0xcdc <dtoa_prf+0xf8>
     ce6:	c2 0e       	add	r12, r18
     ce8:	d1 1c       	adc	r13, r1
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	99 23       	and	r25, r25
     cee:	29 f0       	breq	.+10     	; 0xcfa <dtoa_prf+0x116>
     cf0:	d6 01       	movw	r26, r12
     cf2:	9c 93       	st	X, r25
     cf4:	f6 01       	movw	r30, r12
     cf6:	31 96       	adiw	r30, 0x01	; 1
     cf8:	6f 01       	movw	r12, r30
     cfa:	c6 01       	movw	r24, r12
     cfc:	03 96       	adiw	r24, 0x03	; 3
     cfe:	e2 fe       	sbrs	r14, 2
     d00:	0b c0       	rjmp	.+22     	; 0xd18 <dtoa_prf+0x134>
     d02:	39 e4       	ldi	r19, 0x49	; 73
     d04:	d6 01       	movw	r26, r12
     d06:	3c 93       	st	X, r19
     d08:	3e e4       	ldi	r19, 0x4E	; 78
     d0a:	11 96       	adiw	r26, 0x01	; 1
     d0c:	3c 93       	st	X, r19
     d0e:	11 97       	sbiw	r26, 0x01	; 1
     d10:	36 e4       	ldi	r19, 0x46	; 70
     d12:	12 96       	adiw	r26, 0x02	; 2
     d14:	3c 93       	st	X, r19
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <dtoa_prf+0x142>
     d18:	39 e6       	ldi	r19, 0x69	; 105
     d1a:	f6 01       	movw	r30, r12
     d1c:	30 83       	st	Z, r19
     d1e:	3e e6       	ldi	r19, 0x6E	; 110
     d20:	31 83       	std	Z+1, r19	; 0x01
     d22:	36 e6       	ldi	r19, 0x66	; 102
     d24:	32 83       	std	Z+2, r19	; 0x02
     d26:	fc 01       	movw	r30, r24
     d28:	32 2f       	mov	r19, r18
     d2a:	40 e2       	ldi	r20, 0x20	; 32
     d2c:	33 23       	and	r19, r19
     d2e:	19 f0       	breq	.+6      	; 0xd36 <dtoa_prf+0x152>
     d30:	41 93       	st	Z+, r20
     d32:	31 50       	subi	r19, 0x01	; 1
     d34:	fb cf       	rjmp	.-10     	; 0xd2c <dtoa_prf+0x148>
     d36:	fc 01       	movw	r30, r24
     d38:	e2 0f       	add	r30, r18
     d3a:	f1 1d       	adc	r31, r1
     d3c:	10 82       	st	Z, r1
     d3e:	8e ef       	ldi	r24, 0xFE	; 254
     d40:	9f ef       	ldi	r25, 0xFF	; 255
     d42:	a6 c0       	rjmp	.+332    	; 0xe90 <dtoa_prf+0x2ac>
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	91 11       	cpse	r25, r1
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <dtoa_prf+0x16c>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	16 16       	cp	r1, r22
     d52:	17 06       	cpc	r1, r23
     d54:	1c f4       	brge	.+6      	; 0xd5c <dtoa_prf+0x178>
     d56:	fb 01       	movw	r30, r22
     d58:	31 96       	adiw	r30, 0x01	; 1
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <dtoa_prf+0x17c>
     d5c:	e1 e0       	ldi	r30, 0x01	; 1
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	2e 0f       	add	r18, r30
     d62:	3f 1f       	adc	r19, r31
     d64:	bb 20       	and	r11, r11
     d66:	21 f0       	breq	.+8      	; 0xd70 <dtoa_prf+0x18c>
     d68:	eb 2d       	mov	r30, r11
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	31 96       	adiw	r30, 0x01	; 1
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <dtoa_prf+0x190>
     d70:	e0 e0       	ldi	r30, 0x00	; 0
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	2e 0f       	add	r18, r30
     d76:	3f 1f       	adc	r19, r31
     d78:	e1 2f       	mov	r30, r17
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	2e 17       	cp	r18, r30
     d7e:	3f 07       	cpc	r19, r31
     d80:	1c f4       	brge	.+6      	; 0xd88 <dtoa_prf+0x1a4>
     d82:	12 1b       	sub	r17, r18
     d84:	21 2f       	mov	r18, r17
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <dtoa_prf+0x1a6>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	8e 2d       	mov	r24, r14
     d8c:	88 71       	andi	r24, 0x18	; 24
     d8e:	59 f4       	brne	.+22     	; 0xda6 <dtoa_prf+0x1c2>
     d90:	f6 01       	movw	r30, r12
     d92:	82 2f       	mov	r24, r18
     d94:	30 e2       	ldi	r19, 0x20	; 32
     d96:	88 23       	and	r24, r24
     d98:	19 f0       	breq	.+6      	; 0xda0 <dtoa_prf+0x1bc>
     d9a:	31 93       	st	Z+, r19
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	fb cf       	rjmp	.-10     	; 0xd96 <dtoa_prf+0x1b2>
     da0:	c2 0e       	add	r12, r18
     da2:	d1 1c       	adc	r13, r1
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	99 23       	and	r25, r25
     da8:	29 f0       	breq	.+10     	; 0xdb4 <dtoa_prf+0x1d0>
     daa:	d6 01       	movw	r26, r12
     dac:	9c 93       	st	X, r25
     dae:	f6 01       	movw	r30, r12
     db0:	31 96       	adiw	r30, 0x01	; 1
     db2:	6f 01       	movw	r12, r30
     db4:	51 11       	cpse	r21, r1
     db6:	0b c0       	rjmp	.+22     	; 0xdce <dtoa_prf+0x1ea>
     db8:	f6 01       	movw	r30, r12
     dba:	82 2f       	mov	r24, r18
     dbc:	90 e3       	ldi	r25, 0x30	; 48
     dbe:	88 23       	and	r24, r24
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <dtoa_prf+0x1e4>
     dc2:	91 93       	st	Z+, r25
     dc4:	81 50       	subi	r24, 0x01	; 1
     dc6:	fb cf       	rjmp	.-10     	; 0xdbe <dtoa_prf+0x1da>
     dc8:	c2 0e       	add	r12, r18
     dca:	d1 1c       	adc	r13, r1
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	0f 2d       	mov	r16, r15
     dd0:	06 0f       	add	r16, r22
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	34 2f       	mov	r19, r20
     dd6:	30 71       	andi	r19, 0x10	; 16
     dd8:	44 ff       	sbrs	r20, 4
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <dtoa_prf+0x1fe>
     ddc:	91 33       	cpi	r25, 0x31	; 49
     dde:	09 f4       	brne	.+2      	; 0xde2 <dtoa_prf+0x1fe>
     de0:	01 50       	subi	r16, 0x01	; 1
     de2:	10 16       	cp	r1, r16
     de4:	24 f4       	brge	.+8      	; 0xdee <dtoa_prf+0x20a>
     de6:	09 30       	cpi	r16, 0x09	; 9
     de8:	18 f0       	brcs	.+6      	; 0xdf0 <dtoa_prf+0x20c>
     dea:	08 e0       	ldi	r16, 0x08	; 8
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <dtoa_prf+0x20c>
     dee:	01 e0       	ldi	r16, 0x01	; 1
     df0:	ab 01       	movw	r20, r22
     df2:	77 ff       	sbrs	r23, 7
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <dtoa_prf+0x216>
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	fb 01       	movw	r30, r22
     dfc:	e4 1b       	sub	r30, r20
     dfe:	f5 0b       	sbc	r31, r21
     e00:	a1 e0       	ldi	r26, 0x01	; 1
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	ac 0f       	add	r26, r28
     e06:	bd 1f       	adc	r27, r29
     e08:	ea 0f       	add	r30, r26
     e0a:	fb 1f       	adc	r31, r27
     e0c:	8e e2       	ldi	r24, 0x2E	; 46
     e0e:	a8 2e       	mov	r10, r24
     e10:	4b 01       	movw	r8, r22
     e12:	80 1a       	sub	r8, r16
     e14:	91 08       	sbc	r9, r1
     e16:	0b 2d       	mov	r16, r11
     e18:	10 e0       	ldi	r17, 0x00	; 0
     e1a:	11 95       	neg	r17
     e1c:	01 95       	neg	r16
     e1e:	11 09       	sbc	r17, r1
     e20:	4f 3f       	cpi	r20, 0xFF	; 255
     e22:	bf ef       	ldi	r27, 0xFF	; 255
     e24:	5b 07       	cpc	r21, r27
     e26:	21 f4       	brne	.+8      	; 0xe30 <dtoa_prf+0x24c>
     e28:	d6 01       	movw	r26, r12
     e2a:	ac 92       	st	X, r10
     e2c:	11 96       	adiw	r26, 0x01	; 1
     e2e:	6d 01       	movw	r12, r26
     e30:	64 17       	cp	r22, r20
     e32:	75 07       	cpc	r23, r21
     e34:	2c f0       	brlt	.+10     	; 0xe40 <dtoa_prf+0x25c>
     e36:	84 16       	cp	r8, r20
     e38:	95 06       	cpc	r9, r21
     e3a:	14 f4       	brge	.+4      	; 0xe40 <dtoa_prf+0x25c>
     e3c:	81 81       	ldd	r24, Z+1	; 0x01
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <dtoa_prf+0x25e>
     e40:	80 e3       	ldi	r24, 0x30	; 48
     e42:	41 50       	subi	r20, 0x01	; 1
     e44:	51 09       	sbc	r21, r1
     e46:	31 96       	adiw	r30, 0x01	; 1
     e48:	d6 01       	movw	r26, r12
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	7d 01       	movw	r14, r26
     e4e:	40 17       	cp	r20, r16
     e50:	51 07       	cpc	r21, r17
     e52:	24 f0       	brlt	.+8      	; 0xe5c <dtoa_prf+0x278>
     e54:	d6 01       	movw	r26, r12
     e56:	8c 93       	st	X, r24
     e58:	67 01       	movw	r12, r14
     e5a:	e2 cf       	rjmp	.-60     	; 0xe20 <dtoa_prf+0x23c>
     e5c:	64 17       	cp	r22, r20
     e5e:	75 07       	cpc	r23, r21
     e60:	39 f4       	brne	.+14     	; 0xe70 <dtoa_prf+0x28c>
     e62:	96 33       	cpi	r25, 0x36	; 54
     e64:	20 f4       	brcc	.+8      	; 0xe6e <dtoa_prf+0x28a>
     e66:	95 33       	cpi	r25, 0x35	; 53
     e68:	19 f4       	brne	.+6      	; 0xe70 <dtoa_prf+0x28c>
     e6a:	31 11       	cpse	r19, r1
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <dtoa_prf+0x28c>
     e6e:	81 e3       	ldi	r24, 0x31	; 49
     e70:	f6 01       	movw	r30, r12
     e72:	80 83       	st	Z, r24
     e74:	f7 01       	movw	r30, r14
     e76:	82 2f       	mov	r24, r18
     e78:	90 e2       	ldi	r25, 0x20	; 32
     e7a:	88 23       	and	r24, r24
     e7c:	19 f0       	breq	.+6      	; 0xe84 <dtoa_prf+0x2a0>
     e7e:	91 93       	st	Z+, r25
     e80:	81 50       	subi	r24, 0x01	; 1
     e82:	fb cf       	rjmp	.-10     	; 0xe7a <dtoa_prf+0x296>
     e84:	f7 01       	movw	r30, r14
     e86:	e2 0f       	add	r30, r18
     e88:	f1 1d       	adc	r31, r1
     e8a:	10 82       	st	Z, r1
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	29 96       	adiw	r28, 0x09	; 9
     e92:	ec e0       	ldi	r30, 0x0C	; 12
     e94:	0c 94 46 08 	jmp	0x108c	; 0x108c <__epilogue_restores__+0xc>

00000e98 <__ftoa_engine>:
     e98:	28 30       	cpi	r18, 0x08	; 8
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <__ftoa_engine+0x6>
     e9c:	27 e0       	ldi	r18, 0x07	; 7
     e9e:	33 27       	eor	r19, r19
     ea0:	da 01       	movw	r26, r20
     ea2:	99 0f       	add	r25, r25
     ea4:	31 1d       	adc	r19, r1
     ea6:	87 fd       	sbrc	r24, 7
     ea8:	91 60       	ori	r25, 0x01	; 1
     eaa:	00 96       	adiw	r24, 0x00	; 0
     eac:	61 05       	cpc	r22, r1
     eae:	71 05       	cpc	r23, r1
     eb0:	39 f4       	brne	.+14     	; 0xec0 <__ftoa_engine+0x28>
     eb2:	32 60       	ori	r19, 0x02	; 2
     eb4:	2e 5f       	subi	r18, 0xFE	; 254
     eb6:	3d 93       	st	X+, r19
     eb8:	30 e3       	ldi	r19, 0x30	; 48
     eba:	2a 95       	dec	r18
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <__ftoa_engine+0x1e>
     ebe:	08 95       	ret
     ec0:	9f 3f       	cpi	r25, 0xFF	; 255
     ec2:	30 f0       	brcs	.+12     	; 0xed0 <__ftoa_engine+0x38>
     ec4:	80 38       	cpi	r24, 0x80	; 128
     ec6:	71 05       	cpc	r23, r1
     ec8:	61 05       	cpc	r22, r1
     eca:	09 f0       	breq	.+2      	; 0xece <__ftoa_engine+0x36>
     ecc:	3c 5f       	subi	r19, 0xFC	; 252
     ece:	3c 5f       	subi	r19, 0xFC	; 252
     ed0:	3d 93       	st	X+, r19
     ed2:	91 30       	cpi	r25, 0x01	; 1
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <__ftoa_engine+0x40>
     ed6:	80 68       	ori	r24, 0x80	; 128
     ed8:	91 1d       	adc	r25, r1
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	1f 93       	push	r17
     ee0:	0f 93       	push	r16
     ee2:	ff 92       	push	r15
     ee4:	ef 92       	push	r14
     ee6:	19 2f       	mov	r17, r25
     ee8:	98 7f       	andi	r25, 0xF8	; 248
     eea:	96 95       	lsr	r25
     eec:	e9 2f       	mov	r30, r25
     eee:	96 95       	lsr	r25
     ef0:	96 95       	lsr	r25
     ef2:	e9 0f       	add	r30, r25
     ef4:	ff 27       	eor	r31, r31
     ef6:	ee 53       	subi	r30, 0x3E	; 62
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	99 27       	eor	r25, r25
     efc:	33 27       	eor	r19, r19
     efe:	ee 24       	eor	r14, r14
     f00:	ff 24       	eor	r15, r15
     f02:	a7 01       	movw	r20, r14
     f04:	e7 01       	movw	r28, r14
     f06:	05 90       	lpm	r0, Z+
     f08:	08 94       	sec
     f0a:	07 94       	ror	r0
     f0c:	28 f4       	brcc	.+10     	; 0xf18 <__ftoa_engine+0x80>
     f0e:	36 0f       	add	r19, r22
     f10:	e7 1e       	adc	r14, r23
     f12:	f8 1e       	adc	r15, r24
     f14:	49 1f       	adc	r20, r25
     f16:	51 1d       	adc	r21, r1
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	06 94       	lsr	r0
     f22:	a1 f7       	brne	.-24     	; 0xf0c <__ftoa_engine+0x74>
     f24:	05 90       	lpm	r0, Z+
     f26:	07 94       	ror	r0
     f28:	28 f4       	brcc	.+10     	; 0xf34 <__ftoa_engine+0x9c>
     f2a:	e7 0e       	add	r14, r23
     f2c:	f8 1e       	adc	r15, r24
     f2e:	49 1f       	adc	r20, r25
     f30:	56 1f       	adc	r21, r22
     f32:	c1 1d       	adc	r28, r1
     f34:	77 0f       	add	r23, r23
     f36:	88 1f       	adc	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	66 1f       	adc	r22, r22
     f3c:	06 94       	lsr	r0
     f3e:	a1 f7       	brne	.-24     	; 0xf28 <__ftoa_engine+0x90>
     f40:	05 90       	lpm	r0, Z+
     f42:	07 94       	ror	r0
     f44:	28 f4       	brcc	.+10     	; 0xf50 <__ftoa_engine+0xb8>
     f46:	f8 0e       	add	r15, r24
     f48:	49 1f       	adc	r20, r25
     f4a:	56 1f       	adc	r21, r22
     f4c:	c7 1f       	adc	r28, r23
     f4e:	d1 1d       	adc	r29, r1
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	66 1f       	adc	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	06 94       	lsr	r0
     f5a:	a1 f7       	brne	.-24     	; 0xf44 <__ftoa_engine+0xac>
     f5c:	05 90       	lpm	r0, Z+
     f5e:	07 94       	ror	r0
     f60:	20 f4       	brcc	.+8      	; 0xf6a <__ftoa_engine+0xd2>
     f62:	49 0f       	add	r20, r25
     f64:	56 1f       	adc	r21, r22
     f66:	c7 1f       	adc	r28, r23
     f68:	d8 1f       	adc	r29, r24
     f6a:	99 0f       	add	r25, r25
     f6c:	66 1f       	adc	r22, r22
     f6e:	77 1f       	adc	r23, r23
     f70:	88 1f       	adc	r24, r24
     f72:	06 94       	lsr	r0
     f74:	a9 f7       	brne	.-22     	; 0xf60 <__ftoa_engine+0xc8>
     f76:	84 91       	lpm	r24, Z
     f78:	10 95       	com	r17
     f7a:	17 70       	andi	r17, 0x07	; 7
     f7c:	41 f0       	breq	.+16     	; 0xf8e <__ftoa_engine+0xf6>
     f7e:	d6 95       	lsr	r29
     f80:	c7 95       	ror	r28
     f82:	57 95       	ror	r21
     f84:	47 95       	ror	r20
     f86:	f7 94       	ror	r15
     f88:	e7 94       	ror	r14
     f8a:	1a 95       	dec	r17
     f8c:	c1 f7       	brne	.-16     	; 0xf7e <__ftoa_engine+0xe6>
     f8e:	e8 e6       	ldi	r30, 0x68	; 104
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	68 94       	set
     f94:	15 90       	lpm	r1, Z+
     f96:	15 91       	lpm	r17, Z+
     f98:	35 91       	lpm	r19, Z+
     f9a:	65 91       	lpm	r22, Z+
     f9c:	95 91       	lpm	r25, Z+
     f9e:	05 90       	lpm	r0, Z+
     fa0:	7f e2       	ldi	r23, 0x2F	; 47
     fa2:	73 95       	inc	r23
     fa4:	e1 18       	sub	r14, r1
     fa6:	f1 0a       	sbc	r15, r17
     fa8:	43 0b       	sbc	r20, r19
     faa:	56 0b       	sbc	r21, r22
     fac:	c9 0b       	sbc	r28, r25
     fae:	d0 09       	sbc	r29, r0
     fb0:	c0 f7       	brcc	.-16     	; 0xfa2 <__ftoa_engine+0x10a>
     fb2:	e1 0c       	add	r14, r1
     fb4:	f1 1e       	adc	r15, r17
     fb6:	43 1f       	adc	r20, r19
     fb8:	56 1f       	adc	r21, r22
     fba:	c9 1f       	adc	r28, r25
     fbc:	d0 1d       	adc	r29, r0
     fbe:	7e f4       	brtc	.+30     	; 0xfde <__ftoa_engine+0x146>
     fc0:	70 33       	cpi	r23, 0x30	; 48
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <__ftoa_engine+0x130>
     fc4:	8a 95       	dec	r24
     fc6:	e6 cf       	rjmp	.-52     	; 0xf94 <__ftoa_engine+0xfc>
     fc8:	e8 94       	clt
     fca:	01 50       	subi	r16, 0x01	; 1
     fcc:	30 f0       	brcs	.+12     	; 0xfda <__ftoa_engine+0x142>
     fce:	08 0f       	add	r16, r24
     fd0:	0a f4       	brpl	.+2      	; 0xfd4 <__ftoa_engine+0x13c>
     fd2:	00 27       	eor	r16, r16
     fd4:	02 17       	cp	r16, r18
     fd6:	08 f4       	brcc	.+2      	; 0xfda <__ftoa_engine+0x142>
     fd8:	20 2f       	mov	r18, r16
     fda:	23 95       	inc	r18
     fdc:	02 2f       	mov	r16, r18
     fde:	7a 33       	cpi	r23, 0x3A	; 58
     fe0:	28 f0       	brcs	.+10     	; 0xfec <__ftoa_engine+0x154>
     fe2:	79 e3       	ldi	r23, 0x39	; 57
     fe4:	7d 93       	st	X+, r23
     fe6:	2a 95       	dec	r18
     fe8:	e9 f7       	brne	.-6      	; 0xfe4 <__ftoa_engine+0x14c>
     fea:	10 c0       	rjmp	.+32     	; 0x100c <__ftoa_engine+0x174>
     fec:	7d 93       	st	X+, r23
     fee:	2a 95       	dec	r18
     ff0:	89 f6       	brne	.-94     	; 0xf94 <__ftoa_engine+0xfc>
     ff2:	06 94       	lsr	r0
     ff4:	97 95       	ror	r25
     ff6:	67 95       	ror	r22
     ff8:	37 95       	ror	r19
     ffa:	17 95       	ror	r17
     ffc:	17 94       	ror	r1
     ffe:	e1 18       	sub	r14, r1
    1000:	f1 0a       	sbc	r15, r17
    1002:	43 0b       	sbc	r20, r19
    1004:	56 0b       	sbc	r21, r22
    1006:	c9 0b       	sbc	r28, r25
    1008:	d0 09       	sbc	r29, r0
    100a:	98 f0       	brcs	.+38     	; 0x1032 <__ftoa_engine+0x19a>
    100c:	23 95       	inc	r18
    100e:	7e 91       	ld	r23, -X
    1010:	73 95       	inc	r23
    1012:	7a 33       	cpi	r23, 0x3A	; 58
    1014:	08 f0       	brcs	.+2      	; 0x1018 <__ftoa_engine+0x180>
    1016:	70 e3       	ldi	r23, 0x30	; 48
    1018:	7c 93       	st	X, r23
    101a:	20 13       	cpse	r18, r16
    101c:	b8 f7       	brcc	.-18     	; 0x100c <__ftoa_engine+0x174>
    101e:	7e 91       	ld	r23, -X
    1020:	70 61       	ori	r23, 0x10	; 16
    1022:	7d 93       	st	X+, r23
    1024:	30 f0       	brcs	.+12     	; 0x1032 <__ftoa_engine+0x19a>
    1026:	83 95       	inc	r24
    1028:	71 e3       	ldi	r23, 0x31	; 49
    102a:	7d 93       	st	X+, r23
    102c:	70 e3       	ldi	r23, 0x30	; 48
    102e:	2a 95       	dec	r18
    1030:	e1 f7       	brne	.-8      	; 0x102a <__ftoa_engine+0x192>
    1032:	11 24       	eor	r1, r1
    1034:	ef 90       	pop	r14
    1036:	ff 90       	pop	r15
    1038:	0f 91       	pop	r16
    103a:	1f 91       	pop	r17
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	99 27       	eor	r25, r25
    1042:	87 fd       	sbrc	r24, 7
    1044:	90 95       	com	r25
    1046:	08 95       	ret

00001048 <__prologue_saves__>:
    1048:	2f 92       	push	r2
    104a:	3f 92       	push	r3
    104c:	4f 92       	push	r4
    104e:	5f 92       	push	r5
    1050:	6f 92       	push	r6
    1052:	7f 92       	push	r7
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	ca 1b       	sub	r28, r26
    1072:	db 0b       	sbc	r29, r27
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	09 94       	ijmp

00001080 <__epilogue_restores__>:
    1080:	2a 88       	ldd	r2, Y+18	; 0x12
    1082:	39 88       	ldd	r3, Y+17	; 0x11
    1084:	48 88       	ldd	r4, Y+16	; 0x10
    1086:	5f 84       	ldd	r5, Y+15	; 0x0f
    1088:	6e 84       	ldd	r6, Y+14	; 0x0e
    108a:	7d 84       	ldd	r7, Y+13	; 0x0d
    108c:	8c 84       	ldd	r8, Y+12	; 0x0c
    108e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1090:	aa 84       	ldd	r10, Y+10	; 0x0a
    1092:	b9 84       	ldd	r11, Y+9	; 0x09
    1094:	c8 84       	ldd	r12, Y+8	; 0x08
    1096:	df 80       	ldd	r13, Y+7	; 0x07
    1098:	ee 80       	ldd	r14, Y+6	; 0x06
    109a:	fd 80       	ldd	r15, Y+5	; 0x05
    109c:	0c 81       	ldd	r16, Y+4	; 0x04
    109e:	1b 81       	ldd	r17, Y+3	; 0x03
    10a0:	aa 81       	ldd	r26, Y+2	; 0x02
    10a2:	b9 81       	ldd	r27, Y+1	; 0x01
    10a4:	ce 0f       	add	r28, r30
    10a6:	d1 1d       	adc	r29, r1
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	ed 01       	movw	r28, r26
    10b4:	08 95       	ret

000010b6 <_exit>:
    10b6:	f8 94       	cli

000010b8 <__stop_program>:
    10b8:	ff cf       	rjmp	.-2      	; 0x10b8 <__stop_program>
