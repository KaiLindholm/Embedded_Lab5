
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800110  00800110  0000037c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d1  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d2  00000000  00000000  00000dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a6  00000000  00000000  000015cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002dd  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "my_uart.h"

int main(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2e 97       	sbiw	r28, 0x0e	; 14
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	uart_init(9600);
  ba:	60 e8       	ldi	r22, 0x80	; 128
  bc:	75 e2       	ldi	r23, 0x25	; 37
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 bf 00 	call	0x17e	; 0x17e <uart_init>
	unsigned char str[] = "Started !!!\n\r";
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	e1 e0       	ldi	r30, 0x01	; 1
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	de 01       	movw	r26, r28
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x2a>
	sei();
  d8:	78 94       	sei
	
	uart_send_string(str);
  da:	ce 01       	movw	r24, r28
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	0e 94 19 01 	call	0x232	; 0x232 <uart_send_string>
	
    while (1) {	
		if(uart_get_buffer_size()>0){
  e2:	0e 94 27 01 	call	0x24e	; 0x24e <uart_get_buffer_size>
  e6:	89 2b       	or	r24, r25
  e8:	e1 f3       	breq	.-8      	; 0xe2 <main+0x3c>
			uint8_t data = uart_read_buffer();
  ea:	0e 94 2c 01 	call	0x258	; 0x258 <uart_read_buffer>
			uart_send_byte(data);
  ee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <uart_send_byte>
  f2:	f7 cf       	rjmp	.-18     	; 0xe2 <main+0x3c>

000000f4 <__vector_18>:

#define MAX_BUFFER_SIZE 128

volatile static uint8_t uart_tx_busy = 1;
UARTBuffer uart_buffer; 
ISR(USART_RX_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	uart_buffer.buffer[uart_buffer.head] = UDR0;			 // read in the UDR0 register
 10e:	e2 e9       	ldi	r30, 0x92	; 146
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11a:	dc 01       	movw	r26, r24
 11c:	a0 5f       	subi	r26, 0xF0	; 240
 11e:	be 4f       	sbci	r27, 0xFE	; 254
 120:	2c 93       	st	X, r18
	uart_buffer.head++;						    // declared where the newest data is stored in the list.
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	91 83       	std	Z+1, r25	; 0x01
 126:	80 83       	st	Z, r24
	uart_buffer.size++;
 128:	e0 e9       	ldi	r30, 0x90	; 144
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	20 81       	ld	r18, Z
 12e:	31 81       	ldd	r19, Z+1	; 0x01
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	31 83       	std	Z+1, r19	; 0x01
 136:	20 83       	st	Z, r18
	if (uart_buffer.head >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
 138:	80 38       	cpi	r24, 0x80	; 128
 13a:	91 05       	cpc	r25, r1
 13c:	20 f0       	brcs	.+8      	; 0x146 <__vector_18+0x52>
		uart_buffer.head = 0;
 13e:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x83>
 142:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end+0x82>
	}
	
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_20>:

ISR(USART_TX_vect){
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
	uart_tx_busy = 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	aa 1f       	adc	r26, r26
 188:	bb 1f       	adc	r27, r27
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	aa 1f       	adc	r26, r26
 190:	bb 1f       	adc	r27, r27
 192:	9c 01       	movw	r18, r24
 194:	ad 01       	movw	r20, r26
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	44 1f       	adc	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	44 1f       	adc	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	60 e4       	ldi	r22, 0x40	; 64
 1a8:	72 e4       	ldi	r23, 0x42	; 66
 1aa:	8f e0       	ldi	r24, 0x0F	; 15
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 48 01 	call	0x290	; 0x290 <__udivmodsi4>
 1b2:	ba 01       	movw	r22, r20
 1b4:	a9 01       	movw	r20, r18
 1b6:	41 50       	subi	r20, 0x01	; 1
 1b8:	51 09       	sbc	r21, r1
 1ba:	61 09       	sbc	r22, r1
 1bc:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
 1be:	db 01       	movw	r26, r22
 1c0:	ca 01       	movw	r24, r20
 1c2:	88 27       	eor	r24, r24
 1c4:	9f 70       	andi	r25, 0x0F	; 15
 1c6:	aa 27       	eor	r26, r26
 1c8:	bb 27       	eor	r27, r27
 1ca:	89 2f       	mov	r24, r25
 1cc:	9a 2f       	mov	r25, r26
 1ce:	ab 2f       	mov	r26, r27
 1d0:	bb 27       	eor	r27, r27
 1d2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
 1d6:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
 1da:	e1 ec       	ldi	r30, 0xC1	; 193
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	88 6d       	ori	r24, 0xD8	; 216
 1e2:	80 83       	st	Z, r24
	
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};
 1e4:	e0 e1       	ldi	r30, 0x10	; 16
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	86 e8       	ldi	r24, 0x86	; 134
 1ea:	df 01       	movw	r26, r30
 1ec:	1d 92       	st	X+, r1
 1ee:	8a 95       	dec	r24
 1f0:	e9 f7       	brne	.-6      	; 0x1ec <uart_init+0x6e>
 1f2:	08 95       	ret

000001f4 <uart_send_byte>:
}


void uart_send_byte(uint8_t data){
	while(uart_tx_busy == 0); // while UART is not transmitting
 1f4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f8:	99 23       	and	r25, r25
 1fa:	e1 f3       	breq	.-8      	; 0x1f4 <uart_send_byte>
	
	uart_tx_busy = 0; 
 1fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = data;				// load byte passed into the function to the uart buffer
 200:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 204:	08 95       	ret

00000206 <uart_send_array>:
}

void uart_send_array(uint8_t *arr, uint16_t len){
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
	for(uint16_t i = 0; i < len; ++i){
 20e:	61 15       	cp	r22, r1
 210:	71 05       	cpc	r23, r1
 212:	51 f0       	breq	.+20     	; 0x228 <uart_send_array+0x22>
 214:	8c 01       	movw	r16, r24
 216:	ec 01       	movw	r28, r24
 218:	06 0f       	add	r16, r22
 21a:	17 1f       	adc	r17, r23
		uart_send_byte(arr[i]);
 21c:	89 91       	ld	r24, Y+
 21e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <uart_send_byte>
	uart_tx_busy = 0; 
	UDR0 = data;				// load byte passed into the function to the uart buffer
}

void uart_send_array(uint8_t *arr, uint16_t len){
	for(uint16_t i = 0; i < len; ++i){
 222:	c0 17       	cp	r28, r16
 224:	d1 07       	cpc	r29, r17
 226:	d1 f7       	brne	.-12     	; 0x21c <uart_send_array+0x16>
		uart_send_byte(arr[i]);
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <uart_send_string>:

void uart_send_string(uint8_t *arr) {
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
 238:	89 91       	ld	r24, Y+
 23a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <uart_send_byte>
		i++;
	} while(arr[i] != '\0');
 23e:	88 81       	ld	r24, Y
 240:	81 11       	cpse	r24, r1
 242:	fa cf       	rjmp	.-12     	; 0x238 <uart_send_string+0x6>
	uart_send_byte(arr[i]);
 244:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <uart_send_byte>

}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <uart_get_buffer_size>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
 24e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end+0x80>
 252:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x81>
 256:	08 95       	ret

00000258 <uart_read_buffer>:

uint8_t uart_read_buffer(void){
	uint8_t data = uart_buffer.buffer[uart_buffer.tail];		// pull the data out of the buffer at the tail.
 258:	e4 e9       	ldi	r30, 0x94	; 148
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	20 81       	ld	r18, Z
 25e:	31 81       	ldd	r19, Z+1	; 0x01
 260:	d9 01       	movw	r26, r18
 262:	a0 5f       	subi	r26, 0xF0	; 240
 264:	be 4f       	sbci	r27, 0xFE	; 254
 266:	8c 91       	ld	r24, X
	uart_buffer.tail++;								// increment the position of the tail
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	31 83       	std	Z+1, r19	; 0x01
 26e:	20 83       	st	Z, r18
	uart_buffer.size--; 							// decrement the size of the queue.
 270:	e0 e9       	ldi	r30, 0x90	; 144
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	40 81       	ld	r20, Z
 276:	51 81       	ldd	r21, Z+1	; 0x01
 278:	41 50       	subi	r20, 0x01	; 1
 27a:	51 09       	sbc	r21, r1
 27c:	51 83       	std	Z+1, r21	; 0x01
 27e:	40 83       	st	Z, r20

	if(uart_buffer.tail >= MAX_BUFFER_SIZE){		// reading has gone past the buffers size wrap the tail to the start.
 280:	20 38       	cpi	r18, 0x80	; 128
 282:	31 05       	cpc	r19, r1
 284:	20 f0       	brcs	.+8      	; 0x28e <uart_read_buffer+0x36>
		uart_buffer.tail = 0;
 286:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x85>
 28a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end+0x84>
	}
	
	return data;
 28e:	08 95       	ret

00000290 <__udivmodsi4>:
 290:	a1 e2       	ldi	r26, 0x21	; 33
 292:	1a 2e       	mov	r1, r26
 294:	aa 1b       	sub	r26, r26
 296:	bb 1b       	sub	r27, r27
 298:	fd 01       	movw	r30, r26
 29a:	0d c0       	rjmp	.+26     	; 0x2b6 <__udivmodsi4_ep>

0000029c <__udivmodsi4_loop>:
 29c:	aa 1f       	adc	r26, r26
 29e:	bb 1f       	adc	r27, r27
 2a0:	ee 1f       	adc	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	a2 17       	cp	r26, r18
 2a6:	b3 07       	cpc	r27, r19
 2a8:	e4 07       	cpc	r30, r20
 2aa:	f5 07       	cpc	r31, r21
 2ac:	20 f0       	brcs	.+8      	; 0x2b6 <__udivmodsi4_ep>
 2ae:	a2 1b       	sub	r26, r18
 2b0:	b3 0b       	sbc	r27, r19
 2b2:	e4 0b       	sbc	r30, r20
 2b4:	f5 0b       	sbc	r31, r21

000002b6 <__udivmodsi4_ep>:
 2b6:	66 1f       	adc	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	88 1f       	adc	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	1a 94       	dec	r1
 2c0:	69 f7       	brne	.-38     	; 0x29c <__udivmodsi4_loop>
 2c2:	60 95       	com	r22
 2c4:	70 95       	com	r23
 2c6:	80 95       	com	r24
 2c8:	90 95       	com	r25
 2ca:	9b 01       	movw	r18, r22
 2cc:	ac 01       	movw	r20, r24
 2ce:	bd 01       	movw	r22, r26
 2d0:	cf 01       	movw	r24, r30
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
