
EmbeddedLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000014e8  0000157c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800116  00800116  00001592  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001151  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3d  00000000  00000000  000027e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000813  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00003a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000560  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082e  00000000  00000000  0000423c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_18>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_20>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      ab:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      bb:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      cb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      db:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      eb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      fb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     10b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     11b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     12b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     13b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     14b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     15b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     16b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     17b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     18b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     19b:	3d 27 00                                            ='.

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d8 e0       	ldi	r29, 0x08	; 8
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	e8 ee       	ldi	r30, 0xE8	; 232
     1b2:	f4 e1       	ldi	r31, 0x14	; 20
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a6 31       	cpi	r26, 0x16	; 22
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	a6 e1       	ldi	r26, 0x16	; 22
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a5 3a       	cpi	r26, 0xA5	; 165
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
     1d4:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <setup>:

#define MAX518_ADDR 0b01000000
#define DAC0 0x00
#define DAC1 0x01

void setup(uint32_t scl_clock, uint32_t baud){
     1dc:	cf 92       	push	r12
     1de:	df 92       	push	r13
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	69 01       	movw	r12, r18
     1e6:	7a 01       	movw	r14, r20
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)| (1<<ADEN);
     1e8:	ea e7       	ldi	r30, 0x7A	; 122
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	87 68       	ori	r24, 0x87	; 135
     1f0:	80 83       	st	Z, r24
	ADMUX = 0b00000000;		// clear ADMUX for ADC0 pin 
     1f2:	ec e7       	ldi	r30, 0x7C	; 124
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);	
     1f8:	80 81       	ld	r24, Z
     1fa:	80 64       	ori	r24, 0x40	; 64
     1fc:	80 83       	st	Z, r24
	i2c_init();
     1fe:	0e 94 14 03 	call	0x628	; 0x628 <i2c_init>
	uart_init(baud);
     202:	c7 01       	movw	r24, r14
     204:	b6 01       	movw	r22, r12
     206:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <uart_init>
}
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	df 90       	pop	r13
     210:	cf 90       	pop	r12
     212:	08 95       	ret

00000214 <get_adc_value>:
			read_command(uart_get_command());
		}
	}
}

char * get_adc_value(){
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
	ADCSRA |= (1<<ADSC);      // enable a single conversion
     21c:	ea e7       	ldi	r30, 0x7A	; 122
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	80 64       	ori	r24, 0x40	; 64
     224:	80 83       	st	Z, r24
	
	while (!(ADCSRA & (1<<ADIF))); // wait for the conversion to be completed		
     226:	80 81       	ld	r24, Z
     228:	84 ff       	sbrs	r24, 4
     22a:	fd cf       	rjmp	.-6      	; 0x226 <get_adc_value+0x12>
	
	float result = (ADC * 5.0)/1024;	// convert to float 
     22c:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     230:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
	char * buffer = (char* ) malloc(6 * sizeof(char));	
     234:	86 e0       	ldi	r24, 0x06	; 6
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 dd 04 	call	0x9ba	; 0x9ba <malloc>
     23c:	ec 01       	movw	r28, r24
	dtostrf(result, 3, 2, buffer); // convert float to string 
     23e:	b8 01       	movw	r22, r16
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 a0 03 	call	0x740	; 0x740 <__floatunsisf>
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 ea       	ldi	r20, 0xA0	; 160
     24e:	50 e4       	ldi	r21, 0x40	; 64
     250:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3>
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e8       	ldi	r20, 0x80	; 128
     25a:	5a e3       	ldi	r21, 0x3A	; 58
     25c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3>
     260:	8e 01       	movw	r16, r28
     262:	22 e0       	ldi	r18, 0x02	; 2
     264:	43 e0       	ldi	r20, 0x03	; 3
     266:	0e 94 bd 04 	call	0x97a	; 0x97a <dtostrf>

	ADCSRA |= (1<<ADIF);		// reset AD complete flag for next conversion. 
     26a:	ea e7       	ldi	r30, 0x7A	; 122
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	80 61       	ori	r24, 0x10	; 16
     272:	80 83       	st	Z, r24
	
	return buffer; 
}
     274:	ce 01       	movw	r24, r28
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <print_adc_value>:

void print_adc_value(char * buffer){
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	ec 01       	movw	r28, r24
	uart_send_string("V = ");
     286:	87 e0       	ldi	r24, 0x07	; 7
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 b0 02 	call	0x560	; 0x560 <uart_send_string>
	uart_send_string(buffer);
     28e:	ce 01       	movw	r24, r28
     290:	0e 94 b0 02 	call	0x560	; 0x560 <uart_send_string>
	uart_send_byte('\n');
     294:	8a e0       	ldi	r24, 0x0A	; 10
     296:	0e 94 a7 02 	call	0x54e	; 0x54e <uart_send_byte>
	
	free(buffer); 
     29a:	ce 01       	movw	r24, r28
     29c:	0e 94 75 05 	call	0xaea	; 0xaea <free>
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <set_dac_output>:
	}
	
	free(command);
}

void set_dac_output(uint8_t dac, float voltage){
     2a6:	08 95       	ret

000002a8 <gen_wave_form>:
	
}

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
     2a8:	cf 93       	push	r28
     2aa:	c4 2f       	mov	r28, r20
	uart_send_byte('W');
     2ac:	87 e5       	ldi	r24, 0x57	; 87
     2ae:	0e 94 a7 02 	call	0x54e	; 0x54e <uart_send_byte>
	uint8_t * wave;
	int i = 0; 
	while( i < cycles){
     2b2:	4c 2f       	mov	r20, r28
     2b4:	50 e0       	ldi	r21, 0x00	; 0
     2b6:	14 16       	cp	r1, r20
     2b8:	15 06       	cpc	r1, r21
     2ba:	4c f0       	brlt	.+18     	; 0x2ce <gen_wave_form+0x26>
     2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <gen_wave_form+0x30>
     2be:	01 97       	sbiw	r24, 0x01	; 1
		for(int i =0; i < 64; ++i){
     2c0:	f1 f7       	brne	.-4      	; 0x2be <gen_wave_form+0x16>
			set_dac_output(dac, wave[i]);
		}
		//_delay_ms(1/(freq*1000));
		++i;
     2c2:	2f 5f       	subi	r18, 0xFF	; 255
     2c4:	3f 4f       	sbci	r19, 0xFF	; 255

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
	uart_send_byte('W');
	uint8_t * wave;
	int i = 0; 
	while( i < cycles){
     2c6:	24 17       	cp	r18, r20
     2c8:	35 07       	cpc	r19, r21
     2ca:	19 f4       	brne	.+6      	; 0x2d2 <gen_wave_form+0x2a>
     2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <gen_wave_form+0x30>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0

void set_dac_output(uint8_t dac, float voltage){
	
}

void gen_wave_form(uint8_t dac, uint8_t freq, uint8_t cycles){
     2d2:	80 e4       	ldi	r24, 0x40	; 64
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	f3 cf       	rjmp	.-26     	; 0x2be <gen_wave_form+0x16>
			set_dac_output(dac, wave[i]);
		}
		//_delay_ms(1/(freq*1000));
		++i;
	}
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <read_command>:
	uart_send_string(buffer);
	uart_send_byte('\n');
	
	free(buffer); 
}
void read_command(char * command) {
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <read_command+0xe>
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	8c 01       	movw	r16, r24
	char delim[] = ",";
     2f0:	8c e2       	ldi	r24, 0x2C	; 44
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	9a 83       	std	Y+2, r25	; 0x02
     2f6:	89 83       	std	Y+1, r24	; 0x01

	char * token = strtok(command, delim);
     2f8:	be 01       	movw	r22, r28
     2fa:	6f 5f       	subi	r22, 0xFF	; 255
     2fc:	7f 4f       	sbci	r23, 0xFF	; 255
     2fe:	c8 01       	movw	r24, r16
     300:	0e 94 20 06 	call	0xc40	; 0xc40 <strtok>
	if(token[1] == 'G'){
     304:	fc 01       	movw	r30, r24
     306:	81 81       	ldd	r24, Z+1	; 0x01
     308:	87 34       	cpi	r24, 0x47	; 71
     30a:	29 f4       	brne	.+10     	; 0x316 <read_command+0x3a>
		print_adc_value(get_adc_value());
     30c:	0e 94 0a 01 	call	0x214	; 0x214 <get_adc_value>
     310:	0e 94 40 01 	call	0x280	; 0x280 <print_adc_value>
     314:	3b c0       	rjmp	.+118    	; 0x38c <read_command+0xb0>
	} else if(token[1] == 'W') {
     316:	87 35       	cpi	r24, 0x57	; 87
     318:	19 f5       	brne	.+70     	; 0x360 <read_command+0x84>
		uint8_t dac = atoi(strtok(NULL, delim));
     31a:	be 01       	movw	r22, r28
     31c:	6f 5f       	subi	r22, 0xFF	; 255
     31e:	7f 4f       	sbci	r23, 0xFF	; 255
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 20 06 	call	0xc40	; 0xc40 <strtok>
     328:	0e 94 02 06 	call	0xc04	; 0xc04 <atoi>
     32c:	f8 2e       	mov	r15, r24
		uint8_t freq = atoi(strtok(NULL, delim));
     32e:	be 01       	movw	r22, r28
     330:	6f 5f       	subi	r22, 0xFF	; 255
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 20 06 	call	0xc40	; 0xc40 <strtok>
     33c:	0e 94 02 06 	call	0xc04	; 0xc04 <atoi>
     340:	e8 2e       	mov	r14, r24
		uint8_t cycles = atoi(strtok(NULL, delim));
     342:	be 01       	movw	r22, r28
     344:	6f 5f       	subi	r22, 0xFF	; 255
     346:	7f 4f       	sbci	r23, 0xFF	; 255
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 20 06 	call	0xc40	; 0xc40 <strtok>
     350:	0e 94 02 06 	call	0xc04	; 0xc04 <atoi>
	
		gen_wave_form(dac, freq, cycles);
     354:	48 2f       	mov	r20, r24
     356:	6e 2d       	mov	r22, r14
     358:	8f 2d       	mov	r24, r15
     35a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <gen_wave_form>
     35e:	16 c0       	rjmp	.+44     	; 0x38c <read_command+0xb0>
	} else if(token[1] == 'S') {
     360:	83 35       	cpi	r24, 0x53	; 83
     362:	89 f4       	brne	.+34     	; 0x386 <read_command+0xaa>
		uint8_t dac = atoi(strtok(NULL, delim));
     364:	be 01       	movw	r22, r28
     366:	6f 5f       	subi	r22, 0xFF	; 255
     368:	7f 4f       	sbci	r23, 0xFF	; 255
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 20 06 	call	0xc40	; 0xc40 <strtok>
		float voltage = atof(strtok(NULL, delim));
     372:	be 01       	movw	r22, r28
     374:	6f 5f       	subi	r22, 0xFF	; 255
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 20 06 	call	0xc40	; 0xc40 <strtok>
     380:	0e 94 fe 05 	call	0xbfc	; 0xbfc <atof>
     384:	03 c0       	rjmp	.+6      	; 0x38c <read_command+0xb0>
		set_dac_output(dac, voltage);
	} else {
		uart_send_byte('X');
     386:	88 e5       	ldi	r24, 0x58	; 88
     388:	0e 94 a7 02 	call	0x54e	; 0x54e <uart_send_byte>
	}
	
	free(command);
     38c:	c8 01       	movw	r24, r16
     38e:	0e 94 75 05 	call	0xaea	; 0xaea <free>
}
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	08 95       	ret

000003a4 <main>:
	ADMUX |= (1<<REFS0);	
	i2c_init();
	uart_init(baud);
}

int main(void) {
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	29 97       	sbiw	r28, 0x09	; 9
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
	char str[] = "Started!";
     3b8:	89 e0       	ldi	r24, 0x09	; 9
     3ba:	ec e0       	ldi	r30, 0x0C	; 12
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	de 01       	movw	r26, r28
     3c0:	11 96       	adiw	r26, 0x01	; 1
     3c2:	01 90       	ld	r0, Z+
     3c4:	0d 92       	st	X+, r0
     3c6:	8a 95       	dec	r24
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x1e>
	uint8_t voltage = 0;
	
	char * adc; 
	setup(100000, 9600);
     3ca:	20 e8       	ldi	r18, 0x80	; 128
     3cc:	35 e2       	ldi	r19, 0x25	; 37
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	60 ea       	ldi	r22, 0xA0	; 160
     3d4:	76 e8       	ldi	r23, 0x86	; 134
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 ee 00 	call	0x1dc	; 0x1dc <setup>
	sei();
     3de:	78 94       	sei
	
	

	voltage = 100;
	adc = get_adc_value();  // initialize adc for faster future computations. 
     3e0:	0e 94 0a 01 	call	0x214	; 0x214 <get_adc_value>
	i2c_start(MAX518_ADDR + 0);     // send start signal to MAX518
     3e4:	80 e4       	ldi	r24, 0x40	; 64
     3e6:	0e 94 1d 03 	call	0x63a	; 0x63a <i2c_start>
	i2c_write(DAC0);                        // write to DAC0
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 78 03 	call	0x6f0	; 0x6f0 <i2c_write>
	i2c_write(voltage);                      // write voltage to dac0
     3f0:	84 e6       	ldi	r24, 0x64	; 100
     3f2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <i2c_write>
	i2c_stop(); 
     3f6:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_stop>
	
	
	
	uart_send_string(str);
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	0e 94 b0 02 	call	0x560	; 0x560 <uart_send_string>
	uart_send_byte('\n');
     402:	8a e0       	ldi	r24, 0x0A	; 10
     404:	0e 94 a7 02 	call	0x54e	; 0x54e <uart_send_byte>
	
	
	adc = get_adc_value();
     408:	0e 94 0a 01 	call	0x214	; 0x214 <get_adc_value>
	print_adc_value(adc);
     40c:	0e 94 40 01 	call	0x280	; 0x280 <print_adc_value>
	while (1) {	
		if(uart_string_complete()){
     410:	0e 94 69 02 	call	0x4d2	; 0x4d2 <uart_string_complete>
     414:	88 23       	and	r24, r24
     416:	e1 f3       	breq	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			read_command(uart_get_command());
     418:	0e 94 dd 02 	call	0x5ba	; 0x5ba <uart_get_command>
     41c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <read_command>
     420:	f7 cf       	rjmp	.-18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>

00000422 <__vector_18>:

volatile static uint8_t uart_tx_busy = 1;
volatile static uint8_t uart_fetch_complete = 0;		// when the buffer has reached a '\n' char flag set to 1. once the string has been read from flag set to 0. 
UARTBuffer uart_buffer; 

ISR(USART_RX_vect){
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
     432:	af 93       	push	r26
     434:	bf 93       	push	r27
     436:	ef 93       	push	r30
     438:	ff 93       	push	r31
	if (UDR0 == '\n' || UDR0 == '\r') { // if a newline or carriage return is received
     43a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     43e:	8a 30       	cpi	r24, 0x0A	; 10
     440:	21 f0       	breq	.+8      	; 0x44a <__vector_18+0x28>
     442:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     446:	8d 30       	cpi	r24, 0x0D	; 13
     448:	51 f4       	brne	.+20     	; 0x45e <__vector_18+0x3c>
		if(uart_get_buffer_size() > 0){
     44a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <uart_buffer+0x80>
     44e:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <uart_buffer+0x81>
     452:	89 2b       	or	r24, r25
     454:	c1 f0       	breq	.+48     	; 0x486 <__vector_18+0x64>
			uart_fetch_complete = 1;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
     45c:	14 c0       	rjmp	.+40     	; 0x486 <__vector_18+0x64>
		}
	} else {
		uart_buffer.buffer[uart_buffer.head] = UDR0;			 // read in the UDR0 register
     45e:	eb e9       	ldi	r30, 0x9B	; 155
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	80 81       	ld	r24, Z
     464:	91 81       	ldd	r25, Z+1	; 0x01
     466:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     46a:	dc 01       	movw	r26, r24
     46c:	a7 5e       	subi	r26, 0xE7	; 231
     46e:	be 4f       	sbci	r27, 0xFE	; 254
     470:	2c 93       	st	X, r18
		uart_buffer.head++;
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	91 83       	std	Z+1, r25	; 0x01
     476:	80 83       	st	Z, r24
		uart_buffer.size++;
     478:	e9 e9       	ldi	r30, 0x99	; 153
     47a:	f1 e0       	ldi	r31, 0x01	; 1
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	91 83       	std	Z+1, r25	; 0x01
     484:	80 83       	st	Z, r24
	}
	
	if (uart_buffer.head >= MAX_BUFFER_SIZE){		// if the rx position overruns the rx max buffer size. return rx pos to 0. "Circular FIFO data structure as stated in the datasheet"
     486:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <uart_buffer+0x82>
     48a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <uart_buffer+0x83>
     48e:	80 38       	cpi	r24, 0x80	; 128
     490:	91 05       	cpc	r25, r1
     492:	20 f0       	brcs	.+8      	; 0x49c <__vector_18+0x7a>
		uart_buffer.head = 0;
     494:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <uart_buffer+0x83>
     498:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <uart_buffer+0x82>
	}
	
}
     49c:	ff 91       	pop	r31
     49e:	ef 91       	pop	r30
     4a0:	bf 91       	pop	r27
     4a2:	af 91       	pop	r26
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	2f 91       	pop	r18
     4aa:	0f 90       	pop	r0
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	0f 90       	pop	r0
     4b0:	1f 90       	pop	r1
     4b2:	18 95       	reti

000004b4 <__vector_20>:

ISR(USART_TX_vect){
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	8f 93       	push	r24
	uart_tx_busy = 1;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     4c6:	8f 91       	pop	r24
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <uart_string_complete>:

uint8_t uart_string_complete(){
	return uart_fetch_complete;
     4d2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
}
     4d6:	08 95       	ret

000004d8 <uart_init>:

void uart_init(uint32_t baud){
	/*Set baud rate*/
	baud = F_CPU/(16*baud) - 1;
     4d8:	dc 01       	movw	r26, r24
     4da:	cb 01       	movw	r24, r22
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	aa 1f       	adc	r26, r26
     4e2:	bb 1f       	adc	r27, r27
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	aa 1f       	adc	r26, r26
     4ea:	bb 1f       	adc	r27, r27
     4ec:	9c 01       	movw	r18, r24
     4ee:	ad 01       	movw	r20, r26
     4f0:	22 0f       	add	r18, r18
     4f2:	33 1f       	adc	r19, r19
     4f4:	44 1f       	adc	r20, r20
     4f6:	55 1f       	adc	r21, r21
     4f8:	22 0f       	add	r18, r18
     4fa:	33 1f       	adc	r19, r19
     4fc:	44 1f       	adc	r20, r20
     4fe:	55 1f       	adc	r21, r21
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	74 e2       	ldi	r23, 0x24	; 36
     504:	84 ef       	ldi	r24, 0xF4	; 244
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 9b 04 	call	0x936	; 0x936 <__udivmodsi4>
     50c:	ba 01       	movw	r22, r20
     50e:	a9 01       	movw	r20, r18
     510:	41 50       	subi	r20, 0x01	; 1
     512:	51 09       	sbc	r21, r1
     514:	61 09       	sbc	r22, r1
     516:	71 09       	sbc	r23, r1
	UBRR0H = (baud & 0x0F00) >> 8;	// mask out the upper 4 bits
     518:	db 01       	movw	r26, r22
     51a:	ca 01       	movw	r24, r20
     51c:	88 27       	eor	r24, r24
     51e:	9f 70       	andi	r25, 0x0F	; 15
     520:	aa 27       	eor	r26, r26
     522:	bb 27       	eor	r27, r27
     524:	89 2f       	mov	r24, r25
     526:	9a 2f       	mov	r25, r26
     528:	ab 2f       	mov	r26, r27
     52a:	bb 27       	eor	r27, r27
     52c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);		// mask out the lower 8 bits
     530:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Enable Rx and Tx as well as Rx and Rx complete interrupts*/
	UCSR0B |= (1<< RXEN0) | (1<<TXEN0) | (1<< RXCIE0) | (1 << TXCIE0);
     534:	e1 ec       	ldi	r30, 0xC1	; 193
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 6d       	ori	r24, 0xD8	; 216
     53c:	80 83       	st	Z, r24
	
	/* Initialize Objects */
	uart_buffer = (UARTBuffer){ .buffer = {0}, .head = 0, .tail = 0};		
     53e:	e9 e1       	ldi	r30, 0x19	; 25
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	86 e8       	ldi	r24, 0x86	; 134
     544:	df 01       	movw	r26, r30
     546:	1d 92       	st	X+, r1
     548:	8a 95       	dec	r24
     54a:	e9 f7       	brne	.-6      	; 0x546 <uart_init+0x6e>
     54c:	08 95       	ret

0000054e <uart_send_byte>:
}


void uart_send_byte(char data){
	while(uart_tx_busy == 0); // while UART is not transmitting
     54e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     552:	99 23       	and	r25, r25
     554:	e1 f3       	breq	.-8      	; 0x54e <uart_send_byte>
	
	uart_tx_busy = 0; 
     556:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	UDR0 = data;				// load byte passed into the function to the uart buffer
     55a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     55e:	08 95       	ret

00000560 <uart_send_string>:
}

void uart_send_string(char *arr) {
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ec 01       	movw	r28, r24
	uint16_t i = 0; 
	
	do {
		uart_send_byte(arr[i]);
     566:	89 91       	ld	r24, Y+
     568:	0e 94 a7 02 	call	0x54e	; 0x54e <uart_send_byte>
		i++;
	} while(arr[i] != '\0');
     56c:	88 81       	ld	r24, Y
     56e:	81 11       	cpse	r24, r1
     570:	fa cf       	rjmp	.-12     	; 0x566 <uart_send_string+0x6>
}
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <uart_get_buffer_size>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}
     578:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <uart_buffer+0x80>
     57c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <uart_buffer+0x81>
     580:	08 95       	ret

00000582 <uart_read_buffer>:
	command[i] = '\0';
	return command; 
}

uint8_t uart_read_buffer(void){
	uint8_t data = uart_buffer.buffer[uart_buffer.tail];		// pull the data out of the buffer at the tail.
     582:	ed e9       	ldi	r30, 0x9D	; 157
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	20 81       	ld	r18, Z
     588:	31 81       	ldd	r19, Z+1	; 0x01
     58a:	d9 01       	movw	r26, r18
     58c:	a7 5e       	subi	r26, 0xE7	; 231
     58e:	be 4f       	sbci	r27, 0xFE	; 254
     590:	8c 91       	ld	r24, X
	uart_buffer.tail++;								// increment the position of the tail
     592:	2f 5f       	subi	r18, 0xFF	; 255
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	31 83       	std	Z+1, r19	; 0x01
     598:	20 83       	st	Z, r18
	uart_buffer.size--; 							// decrement the size of the queue.
     59a:	e9 e9       	ldi	r30, 0x99	; 153
     59c:	f1 e0       	ldi	r31, 0x01	; 1
     59e:	40 81       	ld	r20, Z
     5a0:	51 81       	ldd	r21, Z+1	; 0x01
     5a2:	41 50       	subi	r20, 0x01	; 1
     5a4:	51 09       	sbc	r21, r1
     5a6:	51 83       	std	Z+1, r21	; 0x01
     5a8:	40 83       	st	Z, r20

	if(uart_buffer.tail >= MAX_BUFFER_SIZE){		// reading has gone past the buffers size wrap the tail to the start.
     5aa:	20 38       	cpi	r18, 0x80	; 128
     5ac:	31 05       	cpc	r19, r1
     5ae:	20 f0       	brcs	.+8      	; 0x5b8 <uart_read_buffer+0x36>
		uart_buffer.tail = 0;
     5b0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <uart_buffer+0x85>
     5b4:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <uart_buffer+0x84>
	}
	
	return data;
     5b8:	08 95       	ret

000005ba <uart_get_command>:

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
}

char * uart_get_command(void) {
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
	uart_fetch_complete = 0; 
     5c8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
		i++;
	} while(arr[i] != '\0');
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     5cc:	00 91 99 01 	lds	r16, 0x0199	; 0x800199 <uart_buffer+0x80>
     5d0:	10 91 9a 01 	lds	r17, 0x019A	; 0x80019a <uart_buffer+0x81>
}

char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
     5d4:	c8 01       	movw	r24, r16
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <malloc>
     5dc:	7c 01       	movw	r14, r24
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     5de:	01 2b       	or	r16, r17
     5e0:	a9 f0       	breq	.+42     	; 0x60c <uart_get_command+0x52>
     5e2:	c0 e0       	ldi	r28, 0x00	; 0
		i++;
	} while(arr[i] != '\0');
}

uint16_t uart_get_buffer_size(void){
	return uart_buffer.size;
     5e4:	0f 2e       	mov	r0, r31
     5e6:	f9 e9       	ldi	r31, 0x99	; 153
     5e8:	cf 2e       	mov	r12, r31
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	df 2e       	mov	r13, r31
     5ee:	f0 2d       	mov	r31, r0
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
     5f0:	87 01       	movw	r16, r14
     5f2:	0c 0f       	add	r16, r28
     5f4:	11 1d       	adc	r17, r1
     5f6:	0e 94 c1 02 	call	0x582	; 0x582 <uart_read_buffer>
     5fa:	f8 01       	movw	r30, r16
     5fc:	80 83       	st	Z, r24
		++i; 
     5fe:	cf 5f       	subi	r28, 0xFF	; 255
char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
	while(uart_get_buffer_size() > 0){
     600:	f6 01       	movw	r30, r12
     602:	80 81       	ld	r24, Z
     604:	91 81       	ldd	r25, Z+1	; 0x01
     606:	89 2b       	or	r24, r25
     608:	99 f7       	brne	.-26     	; 0x5f0 <uart_get_command+0x36>
     60a:	01 c0       	rjmp	.+2      	; 0x60e <uart_get_command+0x54>

char * uart_get_command(void) {
	uart_fetch_complete = 0; 
	uint16_t size = uart_get_buffer_size();
	char * command = (char *) malloc((size + 1) * sizeof(char));
	uint8_t i = 0;
     60c:	c0 e0       	ldi	r28, 0x00	; 0
	while(uart_get_buffer_size() > 0){
		command[i] = uart_read_buffer();		// 
		++i; 
	}
	command[i] = '\0';
     60e:	f7 01       	movw	r30, r14
     610:	ec 0f       	add	r30, r28
     612:	f1 1d       	adc	r31, r1
     614:	10 82       	st	Z, r1
	return command; 
}
     616:	c7 01       	movw	r24, r14
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	cf 90       	pop	r12
     626:	08 95       	ret

00000628 <i2c_init>:
*************************************************************************/
void i2c_init()
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     628:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLK) - 16)/2;  /* must be > 10 for stable operation */
     62c:	88 e4       	ldi	r24, 0x48	; 72
     62e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  TWCR = (1<<TWEN);
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     638:	08 95       	ret

0000063a <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     63a:	94 ea       	ldi	r25, 0xA4	; 164
     63c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while((TWCR & (1<<TWINT)) == 0);
     640:	ec eb       	ldi	r30, 0xBC	; 188
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	90 81       	ld	r25, Z
     646:	99 23       	and	r25, r25
     648:	ec f7       	brge	.-6      	; 0x644 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     64a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     64e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     650:	98 30       	cpi	r25, 0x08	; 8
     652:	11 f0       	breq	.+4      	; 0x658 <i2c_start+0x1e>
     654:	90 31       	cpi	r25, 0x10	; 16
     656:	a1 f4       	brne	.+40     	; 0x680 <i2c_start+0x46>

	// send device address
	TWDR = address;
     658:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     65c:	84 e8       	ldi	r24, 0x84	; 132
     65e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     662:	ec eb       	ldi	r30, 0xBC	; 188
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 81       	ld	r24, Z
     668:	88 23       	and	r24, r24
     66a:	ec f7       	brge	.-6      	; 0x666 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     66c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     670:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     672:	98 31       	cpi	r25, 0x18	; 24
     674:	39 f0       	breq	.+14     	; 0x684 <i2c_start+0x4a>
	// wait until transmission completed
	while((TWCR & (1<<TWINT)) == 0);

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 34       	cpi	r25, 0x40	; 64
     67a:	29 f4       	brne	.+10     	; 0x686 <i2c_start+0x4c>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	08 95       	ret
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     684:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     686:	08 95       	ret

00000688 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     68c:	ec eb       	ldi	r30, 0xBC	; 188
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     692:	a9 eb       	ldi	r26, 0xB9	; 185
     694:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     696:	cb eb       	ldi	r28, 0xBB	; 187
     698:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     69a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     69c:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     69e:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     6a0:	90 81       	ld	r25, Z
     6a2:	99 23       	and	r25, r25
     6a4:	ec f7       	brge	.-6      	; 0x6a0 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     6a6:	9c 91       	ld	r25, X
     6a8:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     6aa:	98 30       	cpi	r25, 0x08	; 8
     6ac:	11 f0       	breq	.+4      	; 0x6b2 <i2c_start_wait+0x2a>
     6ae:	90 31       	cpi	r25, 0x10	; 16
     6b0:	b1 f7       	brne	.-20     	; 0x69e <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
     6b2:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     6b4:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     6b6:	90 81       	ld	r25, Z
     6b8:	99 23       	and	r25, r25
     6ba:	ec f7       	brge	.-6      	; 0x6b6 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     6bc:	9c 91       	ld	r25, X
     6be:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     6c0:	90 32       	cpi	r25, 0x20	; 32
     6c2:	11 f0       	breq	.+4      	; 0x6c8 <i2c_start_wait+0x40>
     6c4:	98 35       	cpi	r25, 0x58	; 88
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6c8:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     6ca:	90 81       	ld	r25, Z
     6cc:	94 fd       	sbrc	r25, 4
     6ce:	fd cf       	rjmp	.-6      	; 0x6ca <i2c_start_wait+0x42>
     6d0:	e6 cf       	rjmp	.-52     	; 0x69e <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     6d8:	0e 94 1d 03 	call	0x63a	; 0x63a <i2c_start>

}/* i2c_rep_start */
     6dc:	08 95       	ret

000006de <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6de:	84 e9       	ldi	r24, 0x94	; 148
     6e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     6e4:	ec eb       	ldi	r30, 0xBC	; 188
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	84 fd       	sbrc	r24, 4
     6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <i2c_stop+0xa>

}/* i2c_stop */
     6ee:	08 95       	ret

000006f0 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     6f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     6f4:	84 e8       	ldi	r24, 0x84	; 132
     6f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while((TWCR & (1<<TWINT)) == 0);
     6fa:	ec eb       	ldi	r30, 0xBC	; 188
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	88 23       	and	r24, r24
     702:	ec f7       	brge	.-6      	; 0x6fe <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     704:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     708:	98 7f       	andi	r25, 0xF8	; 248
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	98 32       	cpi	r25, 0x28	; 40
     70e:	09 f4       	brne	.+2      	; 0x712 <i2c_write+0x22>
     710:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     712:	08 95       	ret

00000714 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     714:	84 ec       	ldi	r24, 0xC4	; 196
     716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
     71a:	ec eb       	ldi	r30, 0xBC	; 188
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	88 23       	and	r24, r24
     722:	ec f7       	brge	.-6      	; 0x71e <i2c_readAck+0xa>

    return TWDR;
     724:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
     728:	08 95       	ret

0000072a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     72a:	84 e8       	ldi	r24, 0x84	; 132
     72c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     730:	ec eb       	ldi	r30, 0xBC	; 188
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	88 23       	and	r24, r24
     738:	ec f7       	brge	.-6      	; 0x734 <i2c_readNak+0xa>
	
    return TWDR;
     73a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
     73e:	08 95       	ret

00000740 <__floatunsisf>:
     740:	e8 94       	clt
     742:	09 c0       	rjmp	.+18     	; 0x756 <__floatsisf+0x12>

00000744 <__floatsisf>:
     744:	97 fb       	bst	r25, 7
     746:	3e f4       	brtc	.+14     	; 0x756 <__floatsisf+0x12>
     748:	90 95       	com	r25
     74a:	80 95       	com	r24
     74c:	70 95       	com	r23
     74e:	61 95       	neg	r22
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	8f 4f       	sbci	r24, 0xFF	; 255
     754:	9f 4f       	sbci	r25, 0xFF	; 255
     756:	99 23       	and	r25, r25
     758:	a9 f0       	breq	.+42     	; 0x784 <__floatsisf+0x40>
     75a:	f9 2f       	mov	r31, r25
     75c:	96 e9       	ldi	r25, 0x96	; 150
     75e:	bb 27       	eor	r27, r27
     760:	93 95       	inc	r25
     762:	f6 95       	lsr	r31
     764:	87 95       	ror	r24
     766:	77 95       	ror	r23
     768:	67 95       	ror	r22
     76a:	b7 95       	ror	r27
     76c:	f1 11       	cpse	r31, r1
     76e:	f8 cf       	rjmp	.-16     	; 0x760 <__floatsisf+0x1c>
     770:	fa f4       	brpl	.+62     	; 0x7b0 <__floatsisf+0x6c>
     772:	bb 0f       	add	r27, r27
     774:	11 f4       	brne	.+4      	; 0x77a <__floatsisf+0x36>
     776:	60 ff       	sbrs	r22, 0
     778:	1b c0       	rjmp	.+54     	; 0x7b0 <__floatsisf+0x6c>
     77a:	6f 5f       	subi	r22, 0xFF	; 255
     77c:	7f 4f       	sbci	r23, 0xFF	; 255
     77e:	8f 4f       	sbci	r24, 0xFF	; 255
     780:	9f 4f       	sbci	r25, 0xFF	; 255
     782:	16 c0       	rjmp	.+44     	; 0x7b0 <__floatsisf+0x6c>
     784:	88 23       	and	r24, r24
     786:	11 f0       	breq	.+4      	; 0x78c <__floatsisf+0x48>
     788:	96 e9       	ldi	r25, 0x96	; 150
     78a:	11 c0       	rjmp	.+34     	; 0x7ae <__floatsisf+0x6a>
     78c:	77 23       	and	r23, r23
     78e:	21 f0       	breq	.+8      	; 0x798 <__floatsisf+0x54>
     790:	9e e8       	ldi	r25, 0x8E	; 142
     792:	87 2f       	mov	r24, r23
     794:	76 2f       	mov	r23, r22
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <__floatsisf+0x5e>
     798:	66 23       	and	r22, r22
     79a:	71 f0       	breq	.+28     	; 0x7b8 <__floatsisf+0x74>
     79c:	96 e8       	ldi	r25, 0x86	; 134
     79e:	86 2f       	mov	r24, r22
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	2a f0       	brmi	.+10     	; 0x7b0 <__floatsisf+0x6c>
     7a6:	9a 95       	dec	r25
     7a8:	66 0f       	add	r22, r22
     7aa:	77 1f       	adc	r23, r23
     7ac:	88 1f       	adc	r24, r24
     7ae:	da f7       	brpl	.-10     	; 0x7a6 <__floatsisf+0x62>
     7b0:	88 0f       	add	r24, r24
     7b2:	96 95       	lsr	r25
     7b4:	87 95       	ror	r24
     7b6:	97 f9       	bld	r25, 7
     7b8:	08 95       	ret

000007ba <__mulsf3>:
     7ba:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__mulsf3x>
     7be:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_round>
     7c2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscA>
     7c6:	38 f0       	brcs	.+14     	; 0x7d6 <__mulsf3+0x1c>
     7c8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscB>
     7cc:	20 f0       	brcs	.+8      	; 0x7d6 <__mulsf3+0x1c>
     7ce:	95 23       	and	r25, r21
     7d0:	11 f0       	breq	.+4      	; 0x7d6 <__mulsf3+0x1c>
     7d2:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
     7d6:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_nan>
     7da:	11 24       	eor	r1, r1
     7dc:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>

000007e0 <__mulsf3x>:
     7e0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_split3>
     7e4:	70 f3       	brcs	.-36     	; 0x7c2 <__mulsf3+0x8>

000007e6 <__mulsf3_pse>:
     7e6:	95 9f       	mul	r25, r21
     7e8:	c1 f3       	breq	.-16     	; 0x7da <__mulsf3+0x20>
     7ea:	95 0f       	add	r25, r21
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	55 1f       	adc	r21, r21
     7f0:	62 9f       	mul	r22, r18
     7f2:	f0 01       	movw	r30, r0
     7f4:	72 9f       	mul	r23, r18
     7f6:	bb 27       	eor	r27, r27
     7f8:	f0 0d       	add	r31, r0
     7fa:	b1 1d       	adc	r27, r1
     7fc:	63 9f       	mul	r22, r19
     7fe:	aa 27       	eor	r26, r26
     800:	f0 0d       	add	r31, r0
     802:	b1 1d       	adc	r27, r1
     804:	aa 1f       	adc	r26, r26
     806:	64 9f       	mul	r22, r20
     808:	66 27       	eor	r22, r22
     80a:	b0 0d       	add	r27, r0
     80c:	a1 1d       	adc	r26, r1
     80e:	66 1f       	adc	r22, r22
     810:	82 9f       	mul	r24, r18
     812:	22 27       	eor	r18, r18
     814:	b0 0d       	add	r27, r0
     816:	a1 1d       	adc	r26, r1
     818:	62 1f       	adc	r22, r18
     81a:	73 9f       	mul	r23, r19
     81c:	b0 0d       	add	r27, r0
     81e:	a1 1d       	adc	r26, r1
     820:	62 1f       	adc	r22, r18
     822:	83 9f       	mul	r24, r19
     824:	a0 0d       	add	r26, r0
     826:	61 1d       	adc	r22, r1
     828:	22 1f       	adc	r18, r18
     82a:	74 9f       	mul	r23, r20
     82c:	33 27       	eor	r19, r19
     82e:	a0 0d       	add	r26, r0
     830:	61 1d       	adc	r22, r1
     832:	23 1f       	adc	r18, r19
     834:	84 9f       	mul	r24, r20
     836:	60 0d       	add	r22, r0
     838:	21 1d       	adc	r18, r1
     83a:	82 2f       	mov	r24, r18
     83c:	76 2f       	mov	r23, r22
     83e:	6a 2f       	mov	r22, r26
     840:	11 24       	eor	r1, r1
     842:	9f 57       	subi	r25, 0x7F	; 127
     844:	50 40       	sbci	r21, 0x00	; 0
     846:	9a f0       	brmi	.+38     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     848:	f1 f0       	breq	.+60     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     84a:	88 23       	and	r24, r24
     84c:	4a f0       	brmi	.+18     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	bb 1f       	adc	r27, r27
     854:	66 1f       	adc	r22, r22
     856:	77 1f       	adc	r23, r23
     858:	88 1f       	adc	r24, r24
     85a:	91 50       	subi	r25, 0x01	; 1
     85c:	50 40       	sbci	r21, 0x00	; 0
     85e:	a9 f7       	brne	.-22     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     860:	9e 3f       	cpi	r25, 0xFE	; 254
     862:	51 05       	cpc	r21, r1
     864:	80 f0       	brcs	.+32     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     866:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
     86a:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>
     86e:	5f 3f       	cpi	r21, 0xFF	; 255
     870:	e4 f3       	brlt	.-8      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     872:	98 3e       	cpi	r25, 0xE8	; 232
     874:	d4 f3       	brlt	.-12     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     876:	86 95       	lsr	r24
     878:	77 95       	ror	r23
     87a:	67 95       	ror	r22
     87c:	b7 95       	ror	r27
     87e:	f7 95       	ror	r31
     880:	e7 95       	ror	r30
     882:	9f 5f       	subi	r25, 0xFF	; 255
     884:	c1 f7       	brne	.-16     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     886:	fe 2b       	or	r31, r30
     888:	88 0f       	add	r24, r24
     88a:	91 1d       	adc	r25, r1
     88c:	96 95       	lsr	r25
     88e:	87 95       	ror	r24
     890:	97 f9       	bld	r25, 7
     892:	08 95       	ret

00000894 <__fp_inf>:
     894:	97 f9       	bld	r25, 7
     896:	9f 67       	ori	r25, 0x7F	; 127
     898:	80 e8       	ldi	r24, 0x80	; 128
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	08 95       	ret

000008a0 <__fp_nan>:
     8a0:	9f ef       	ldi	r25, 0xFF	; 255
     8a2:	80 ec       	ldi	r24, 0xC0	; 192
     8a4:	08 95       	ret

000008a6 <__fp_pscA>:
     8a6:	00 24       	eor	r0, r0
     8a8:	0a 94       	dec	r0
     8aa:	16 16       	cp	r1, r22
     8ac:	17 06       	cpc	r1, r23
     8ae:	18 06       	cpc	r1, r24
     8b0:	09 06       	cpc	r0, r25
     8b2:	08 95       	ret

000008b4 <__fp_pscB>:
     8b4:	00 24       	eor	r0, r0
     8b6:	0a 94       	dec	r0
     8b8:	12 16       	cp	r1, r18
     8ba:	13 06       	cpc	r1, r19
     8bc:	14 06       	cpc	r1, r20
     8be:	05 06       	cpc	r0, r21
     8c0:	08 95       	ret

000008c2 <__fp_round>:
     8c2:	09 2e       	mov	r0, r25
     8c4:	03 94       	inc	r0
     8c6:	00 0c       	add	r0, r0
     8c8:	11 f4       	brne	.+4      	; 0x8ce <__fp_round+0xc>
     8ca:	88 23       	and	r24, r24
     8cc:	52 f0       	brmi	.+20     	; 0x8e2 <__fp_round+0x20>
     8ce:	bb 0f       	add	r27, r27
     8d0:	40 f4       	brcc	.+16     	; 0x8e2 <__fp_round+0x20>
     8d2:	bf 2b       	or	r27, r31
     8d4:	11 f4       	brne	.+4      	; 0x8da <__fp_round+0x18>
     8d6:	60 ff       	sbrs	r22, 0
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <__fp_round+0x20>
     8da:	6f 5f       	subi	r22, 0xFF	; 255
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	8f 4f       	sbci	r24, 0xFF	; 255
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	08 95       	ret

000008e4 <__fp_split3>:
     8e4:	57 fd       	sbrc	r21, 7
     8e6:	90 58       	subi	r25, 0x80	; 128
     8e8:	44 0f       	add	r20, r20
     8ea:	55 1f       	adc	r21, r21
     8ec:	59 f0       	breq	.+22     	; 0x904 <__stack+0x5>
     8ee:	5f 3f       	cpi	r21, 0xFF	; 255
     8f0:	71 f0       	breq	.+28     	; 0x90e <__stack+0xf>
     8f2:	47 95       	ror	r20

000008f4 <__fp_splitA>:
     8f4:	88 0f       	add	r24, r24
     8f6:	97 fb       	bst	r25, 7
     8f8:	99 1f       	adc	r25, r25
     8fa:	61 f0       	breq	.+24     	; 0x914 <__stack+0x15>
     8fc:	9f 3f       	cpi	r25, 0xFF	; 255
     8fe:	79 f0       	breq	.+30     	; 0x91e <__stack+0x1f>
     900:	87 95       	ror	r24
     902:	08 95       	ret
     904:	12 16       	cp	r1, r18
     906:	13 06       	cpc	r1, r19
     908:	14 06       	cpc	r1, r20
     90a:	55 1f       	adc	r21, r21
     90c:	f2 cf       	rjmp	.-28     	; 0x8f2 <__fp_split3+0xe>
     90e:	46 95       	lsr	r20
     910:	f1 df       	rcall	.-30     	; 0x8f4 <__fp_splitA>
     912:	08 c0       	rjmp	.+16     	; 0x924 <__stack+0x25>
     914:	16 16       	cp	r1, r22
     916:	17 06       	cpc	r1, r23
     918:	18 06       	cpc	r1, r24
     91a:	99 1f       	adc	r25, r25
     91c:	f1 cf       	rjmp	.-30     	; 0x900 <__stack+0x1>
     91e:	86 95       	lsr	r24
     920:	71 05       	cpc	r23, r1
     922:	61 05       	cpc	r22, r1
     924:	08 94       	sec
     926:	08 95       	ret

00000928 <__fp_zero>:
     928:	e8 94       	clt

0000092a <__fp_szero>:
     92a:	bb 27       	eor	r27, r27
     92c:	66 27       	eor	r22, r22
     92e:	77 27       	eor	r23, r23
     930:	cb 01       	movw	r24, r22
     932:	97 f9       	bld	r25, 7
     934:	08 95       	ret

00000936 <__udivmodsi4>:
     936:	a1 e2       	ldi	r26, 0x21	; 33
     938:	1a 2e       	mov	r1, r26
     93a:	aa 1b       	sub	r26, r26
     93c:	bb 1b       	sub	r27, r27
     93e:	fd 01       	movw	r30, r26
     940:	0d c0       	rjmp	.+26     	; 0x95c <__udivmodsi4_ep>

00000942 <__udivmodsi4_loop>:
     942:	aa 1f       	adc	r26, r26
     944:	bb 1f       	adc	r27, r27
     946:	ee 1f       	adc	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	a2 17       	cp	r26, r18
     94c:	b3 07       	cpc	r27, r19
     94e:	e4 07       	cpc	r30, r20
     950:	f5 07       	cpc	r31, r21
     952:	20 f0       	brcs	.+8      	; 0x95c <__udivmodsi4_ep>
     954:	a2 1b       	sub	r26, r18
     956:	b3 0b       	sbc	r27, r19
     958:	e4 0b       	sbc	r30, r20
     95a:	f5 0b       	sbc	r31, r21

0000095c <__udivmodsi4_ep>:
     95c:	66 1f       	adc	r22, r22
     95e:	77 1f       	adc	r23, r23
     960:	88 1f       	adc	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	1a 94       	dec	r1
     966:	69 f7       	brne	.-38     	; 0x942 <__udivmodsi4_loop>
     968:	60 95       	com	r22
     96a:	70 95       	com	r23
     96c:	80 95       	com	r24
     96e:	90 95       	com	r25
     970:	9b 01       	movw	r18, r22
     972:	ac 01       	movw	r20, r24
     974:	bd 01       	movw	r22, r26
     976:	cf 01       	movw	r24, r30
     978:	08 95       	ret

0000097a <dtostrf>:
     97a:	ef 92       	push	r14
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	e8 01       	movw	r28, r16
     986:	47 fd       	sbrc	r20, 7
     988:	02 c0       	rjmp	.+4      	; 0x98e <dtostrf+0x14>
     98a:	34 e0       	ldi	r19, 0x04	; 4
     98c:	01 c0       	rjmp	.+2      	; 0x990 <dtostrf+0x16>
     98e:	34 e1       	ldi	r19, 0x14	; 20
     990:	04 2e       	mov	r0, r20
     992:	00 0c       	add	r0, r0
     994:	55 0b       	sbc	r21, r21
     996:	57 ff       	sbrs	r21, 7
     998:	03 c0       	rjmp	.+6      	; 0x9a0 <dtostrf+0x26>
     99a:	51 95       	neg	r21
     99c:	41 95       	neg	r20
     99e:	51 09       	sbc	r21, r1
     9a0:	e3 2e       	mov	r14, r19
     9a2:	02 2f       	mov	r16, r18
     9a4:	24 2f       	mov	r18, r20
     9a6:	ae 01       	movw	r20, r28
     9a8:	0e 94 54 06 	call	0xca8	; 0xca8 <dtoa_prf>
     9ac:	ce 01       	movw	r24, r28
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ef 90       	pop	r14
     9b8:	08 95       	ret

000009ba <malloc>:
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	91 05       	cpc	r25, r1
     9c6:	10 f4       	brcc	.+4      	; 0x9cc <malloc+0x12>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <__flp>
     9d0:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <__flp+0x1>
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	30 97       	sbiw	r30, 0x00	; 0
     9de:	19 f1       	breq	.+70     	; 0xa26 <malloc+0x6c>
     9e0:	40 81       	ld	r20, Z
     9e2:	51 81       	ldd	r21, Z+1	; 0x01
     9e4:	02 81       	ldd	r16, Z+2	; 0x02
     9e6:	13 81       	ldd	r17, Z+3	; 0x03
     9e8:	48 17       	cp	r20, r24
     9ea:	59 07       	cpc	r21, r25
     9ec:	c8 f0       	brcs	.+50     	; 0xa20 <malloc+0x66>
     9ee:	84 17       	cp	r24, r20
     9f0:	95 07       	cpc	r25, r21
     9f2:	69 f4       	brne	.+26     	; 0xa0e <malloc+0x54>
     9f4:	10 97       	sbiw	r26, 0x00	; 0
     9f6:	31 f0       	breq	.+12     	; 0xa04 <malloc+0x4a>
     9f8:	12 96       	adiw	r26, 0x02	; 2
     9fa:	0c 93       	st	X, r16
     9fc:	12 97       	sbiw	r26, 0x02	; 2
     9fe:	13 96       	adiw	r26, 0x03	; 3
     a00:	1c 93       	st	X, r17
     a02:	27 c0       	rjmp	.+78     	; 0xa52 <malloc+0x98>
     a04:	00 93 a1 01 	sts	0x01A1, r16	; 0x8001a1 <__flp>
     a08:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__flp+0x1>
     a0c:	22 c0       	rjmp	.+68     	; 0xa52 <malloc+0x98>
     a0e:	21 15       	cp	r18, r1
     a10:	31 05       	cpc	r19, r1
     a12:	19 f0       	breq	.+6      	; 0xa1a <malloc+0x60>
     a14:	42 17       	cp	r20, r18
     a16:	53 07       	cpc	r21, r19
     a18:	18 f4       	brcc	.+6      	; 0xa20 <malloc+0x66>
     a1a:	9a 01       	movw	r18, r20
     a1c:	bd 01       	movw	r22, r26
     a1e:	ef 01       	movw	r28, r30
     a20:	df 01       	movw	r26, r30
     a22:	f8 01       	movw	r30, r16
     a24:	db cf       	rjmp	.-74     	; 0x9dc <malloc+0x22>
     a26:	21 15       	cp	r18, r1
     a28:	31 05       	cpc	r19, r1
     a2a:	f9 f0       	breq	.+62     	; 0xa6a <malloc+0xb0>
     a2c:	28 1b       	sub	r18, r24
     a2e:	39 0b       	sbc	r19, r25
     a30:	24 30       	cpi	r18, 0x04	; 4
     a32:	31 05       	cpc	r19, r1
     a34:	80 f4       	brcc	.+32     	; 0xa56 <malloc+0x9c>
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	9b 81       	ldd	r25, Y+3	; 0x03
     a3a:	61 15       	cp	r22, r1
     a3c:	71 05       	cpc	r23, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <malloc+0x8e>
     a40:	fb 01       	movw	r30, r22
     a42:	93 83       	std	Z+3, r25	; 0x03
     a44:	82 83       	std	Z+2, r24	; 0x02
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <malloc+0x96>
     a48:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <__flp+0x1>
     a4c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <__flp>
     a50:	fe 01       	movw	r30, r28
     a52:	32 96       	adiw	r30, 0x02	; 2
     a54:	44 c0       	rjmp	.+136    	; 0xade <malloc+0x124>
     a56:	fe 01       	movw	r30, r28
     a58:	e2 0f       	add	r30, r18
     a5a:	f3 1f       	adc	r31, r19
     a5c:	81 93       	st	Z+, r24
     a5e:	91 93       	st	Z+, r25
     a60:	22 50       	subi	r18, 0x02	; 2
     a62:	31 09       	sbc	r19, r1
     a64:	39 83       	std	Y+1, r19	; 0x01
     a66:	28 83       	st	Y, r18
     a68:	3a c0       	rjmp	.+116    	; 0xade <malloc+0x124>
     a6a:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     a6e:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     a72:	23 2b       	or	r18, r19
     a74:	41 f4       	brne	.+16     	; 0xa86 <malloc+0xcc>
     a76:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__malloc_heap_start>
     a7a:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__malloc_heap_start+0x1>
     a7e:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <__brkval+0x1>
     a82:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <__brkval>
     a86:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <__malloc_heap_end>
     a8a:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <__malloc_heap_end+0x1>
     a8e:	21 15       	cp	r18, r1
     a90:	31 05       	cpc	r19, r1
     a92:	41 f4       	brne	.+16     	; 0xaa4 <malloc+0xea>
     a94:	2d b7       	in	r18, 0x3d	; 61
     a96:	3e b7       	in	r19, 0x3e	; 62
     a98:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <__malloc_margin>
     a9c:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <__malloc_margin+0x1>
     aa0:	24 1b       	sub	r18, r20
     aa2:	35 0b       	sbc	r19, r21
     aa4:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <__brkval>
     aa8:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <__brkval+0x1>
     aac:	e2 17       	cp	r30, r18
     aae:	f3 07       	cpc	r31, r19
     ab0:	a0 f4       	brcc	.+40     	; 0xada <malloc+0x120>
     ab2:	2e 1b       	sub	r18, r30
     ab4:	3f 0b       	sbc	r19, r31
     ab6:	28 17       	cp	r18, r24
     ab8:	39 07       	cpc	r19, r25
     aba:	78 f0       	brcs	.+30     	; 0xada <malloc+0x120>
     abc:	ac 01       	movw	r20, r24
     abe:	4e 5f       	subi	r20, 0xFE	; 254
     ac0:	5f 4f       	sbci	r21, 0xFF	; 255
     ac2:	24 17       	cp	r18, r20
     ac4:	35 07       	cpc	r19, r21
     ac6:	48 f0       	brcs	.+18     	; 0xada <malloc+0x120>
     ac8:	4e 0f       	add	r20, r30
     aca:	5f 1f       	adc	r21, r31
     acc:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <__brkval+0x1>
     ad0:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <__brkval>
     ad4:	81 93       	st	Z+, r24
     ad6:	91 93       	st	Z+, r25
     ad8:	02 c0       	rjmp	.+4      	; 0xade <malloc+0x124>
     ada:	e0 e0       	ldi	r30, 0x00	; 0
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	cf 01       	movw	r24, r30
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	08 95       	ret

00000aea <free>:
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	09 f4       	brne	.+2      	; 0xaf4 <free+0xa>
     af2:	81 c0       	rjmp	.+258    	; 0xbf6 <free+0x10c>
     af4:	fc 01       	movw	r30, r24
     af6:	32 97       	sbiw	r30, 0x02	; 2
     af8:	13 82       	std	Z+3, r1	; 0x03
     afa:	12 82       	std	Z+2, r1	; 0x02
     afc:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <__flp>
     b00:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <__flp+0x1>
     b04:	10 97       	sbiw	r26, 0x00	; 0
     b06:	81 f4       	brne	.+32     	; 0xb28 <free+0x3e>
     b08:	20 81       	ld	r18, Z
     b0a:	31 81       	ldd	r19, Z+1	; 0x01
     b0c:	82 0f       	add	r24, r18
     b0e:	93 1f       	adc	r25, r19
     b10:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     b14:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     b18:	28 17       	cp	r18, r24
     b1a:	39 07       	cpc	r19, r25
     b1c:	51 f5       	brne	.+84     	; 0xb72 <free+0x88>
     b1e:	f0 93 a0 01 	sts	0x01A0, r31	; 0x8001a0 <__brkval+0x1>
     b22:	e0 93 9f 01 	sts	0x019F, r30	; 0x80019f <__brkval>
     b26:	67 c0       	rjmp	.+206    	; 0xbf6 <free+0x10c>
     b28:	ed 01       	movw	r28, r26
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	ce 17       	cp	r28, r30
     b30:	df 07       	cpc	r29, r31
     b32:	40 f4       	brcc	.+16     	; 0xb44 <free+0x5a>
     b34:	4a 81       	ldd	r20, Y+2	; 0x02
     b36:	5b 81       	ldd	r21, Y+3	; 0x03
     b38:	9e 01       	movw	r18, r28
     b3a:	41 15       	cp	r20, r1
     b3c:	51 05       	cpc	r21, r1
     b3e:	f1 f0       	breq	.+60     	; 0xb7c <free+0x92>
     b40:	ea 01       	movw	r28, r20
     b42:	f5 cf       	rjmp	.-22     	; 0xb2e <free+0x44>
     b44:	d3 83       	std	Z+3, r29	; 0x03
     b46:	c2 83       	std	Z+2, r28	; 0x02
     b48:	40 81       	ld	r20, Z
     b4a:	51 81       	ldd	r21, Z+1	; 0x01
     b4c:	84 0f       	add	r24, r20
     b4e:	95 1f       	adc	r25, r21
     b50:	c8 17       	cp	r28, r24
     b52:	d9 07       	cpc	r29, r25
     b54:	59 f4       	brne	.+22     	; 0xb6c <free+0x82>
     b56:	88 81       	ld	r24, Y
     b58:	99 81       	ldd	r25, Y+1	; 0x01
     b5a:	84 0f       	add	r24, r20
     b5c:	95 1f       	adc	r25, r21
     b5e:	02 96       	adiw	r24, 0x02	; 2
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	80 83       	st	Z, r24
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	9b 81       	ldd	r25, Y+3	; 0x03
     b68:	93 83       	std	Z+3, r25	; 0x03
     b6a:	82 83       	std	Z+2, r24	; 0x02
     b6c:	21 15       	cp	r18, r1
     b6e:	31 05       	cpc	r19, r1
     b70:	29 f4       	brne	.+10     	; 0xb7c <free+0x92>
     b72:	f0 93 a2 01 	sts	0x01A2, r31	; 0x8001a2 <__flp+0x1>
     b76:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <__flp>
     b7a:	3d c0       	rjmp	.+122    	; 0xbf6 <free+0x10c>
     b7c:	e9 01       	movw	r28, r18
     b7e:	fb 83       	std	Y+3, r31	; 0x03
     b80:	ea 83       	std	Y+2, r30	; 0x02
     b82:	49 91       	ld	r20, Y+
     b84:	59 91       	ld	r21, Y+
     b86:	c4 0f       	add	r28, r20
     b88:	d5 1f       	adc	r29, r21
     b8a:	ec 17       	cp	r30, r28
     b8c:	fd 07       	cpc	r31, r29
     b8e:	61 f4       	brne	.+24     	; 0xba8 <free+0xbe>
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	84 0f       	add	r24, r20
     b96:	95 1f       	adc	r25, r21
     b98:	02 96       	adiw	r24, 0x02	; 2
     b9a:	e9 01       	movw	r28, r18
     b9c:	99 83       	std	Y+1, r25	; 0x01
     b9e:	88 83       	st	Y, r24
     ba0:	82 81       	ldd	r24, Z+2	; 0x02
     ba2:	93 81       	ldd	r25, Z+3	; 0x03
     ba4:	9b 83       	std	Y+3, r25	; 0x03
     ba6:	8a 83       	std	Y+2, r24	; 0x02
     ba8:	e0 e0       	ldi	r30, 0x00	; 0
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	12 96       	adiw	r26, 0x02	; 2
     bae:	8d 91       	ld	r24, X+
     bb0:	9c 91       	ld	r25, X
     bb2:	13 97       	sbiw	r26, 0x03	; 3
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	19 f0       	breq	.+6      	; 0xbbe <free+0xd4>
     bb8:	fd 01       	movw	r30, r26
     bba:	dc 01       	movw	r26, r24
     bbc:	f7 cf       	rjmp	.-18     	; 0xbac <free+0xc2>
     bbe:	8d 91       	ld	r24, X+
     bc0:	9c 91       	ld	r25, X
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	9d 01       	movw	r18, r26
     bc6:	2e 5f       	subi	r18, 0xFE	; 254
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     bd2:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     bd6:	28 17       	cp	r18, r24
     bd8:	39 07       	cpc	r19, r25
     bda:	69 f4       	brne	.+26     	; 0xbf6 <free+0x10c>
     bdc:	30 97       	sbiw	r30, 0x00	; 0
     bde:	29 f4       	brne	.+10     	; 0xbea <free+0x100>
     be0:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__flp+0x1>
     be4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__flp>
     be8:	02 c0       	rjmp	.+4      	; 0xbee <free+0x104>
     bea:	13 82       	std	Z+3, r1	; 0x03
     bec:	12 82       	std	Z+2, r1	; 0x02
     bee:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <__brkval+0x1>
     bf2:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <__brkval>
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <atof>:
     bfc:	66 27       	eor	r22, r22
     bfe:	77 27       	eor	r23, r23
     c00:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <strtod>

00000c04 <atoi>:
     c04:	fc 01       	movw	r30, r24
     c06:	88 27       	eor	r24, r24
     c08:	99 27       	eor	r25, r25
     c0a:	e8 94       	clt
     c0c:	21 91       	ld	r18, Z+
     c0e:	20 32       	cpi	r18, 0x20	; 32
     c10:	e9 f3       	breq	.-6      	; 0xc0c <atoi+0x8>
     c12:	29 30       	cpi	r18, 0x09	; 9
     c14:	10 f0       	brcs	.+4      	; 0xc1a <atoi+0x16>
     c16:	2e 30       	cpi	r18, 0x0E	; 14
     c18:	c8 f3       	brcs	.-14     	; 0xc0c <atoi+0x8>
     c1a:	2b 32       	cpi	r18, 0x2B	; 43
     c1c:	41 f0       	breq	.+16     	; 0xc2e <atoi+0x2a>
     c1e:	2d 32       	cpi	r18, 0x2D	; 45
     c20:	39 f4       	brne	.+14     	; 0xc30 <atoi+0x2c>
     c22:	68 94       	set
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <atoi+0x2a>
     c26:	0e 94 4c 06 	call	0xc98	; 0xc98 <__mulhi_const_10>
     c2a:	82 0f       	add	r24, r18
     c2c:	91 1d       	adc	r25, r1
     c2e:	21 91       	ld	r18, Z+
     c30:	20 53       	subi	r18, 0x30	; 48
     c32:	2a 30       	cpi	r18, 0x0A	; 10
     c34:	c0 f3       	brcs	.-16     	; 0xc26 <atoi+0x22>
     c36:	1e f4       	brtc	.+6      	; 0xc3e <atoi+0x3a>
     c38:	90 95       	com	r25
     c3a:	81 95       	neg	r24
     c3c:	9f 4f       	sbci	r25, 0xFF	; 255
     c3e:	08 95       	ret

00000c40 <strtok>:
     c40:	47 e1       	ldi	r20, 0x17	; 23
     c42:	51 e0       	ldi	r21, 0x01	; 1
     c44:	0e 94 25 06 	call	0xc4a	; 0xc4a <strtok_r>
     c48:	08 95       	ret

00000c4a <strtok_r>:
     c4a:	fa 01       	movw	r30, r20
     c4c:	a1 91       	ld	r26, Z+
     c4e:	b0 81       	ld	r27, Z
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	19 f4       	brne	.+6      	; 0xc5a <strtok_r+0x10>
     c54:	10 97       	sbiw	r26, 0x00	; 0
     c56:	e1 f0       	breq	.+56     	; 0xc90 <strtok_r+0x46>
     c58:	cd 01       	movw	r24, r26
     c5a:	dc 01       	movw	r26, r24
     c5c:	cd 01       	movw	r24, r26
     c5e:	0d 90       	ld	r0, X+
     c60:	00 20       	and	r0, r0
     c62:	11 f4       	brne	.+4      	; 0xc68 <strtok_r+0x1e>
     c64:	c0 01       	movw	r24, r0
     c66:	13 c0       	rjmp	.+38     	; 0xc8e <strtok_r+0x44>
     c68:	fb 01       	movw	r30, r22
     c6a:	21 91       	ld	r18, Z+
     c6c:	22 23       	and	r18, r18
     c6e:	19 f0       	breq	.+6      	; 0xc76 <strtok_r+0x2c>
     c70:	20 15       	cp	r18, r0
     c72:	d9 f7       	brne	.-10     	; 0xc6a <strtok_r+0x20>
     c74:	f3 cf       	rjmp	.-26     	; 0xc5c <strtok_r+0x12>
     c76:	fb 01       	movw	r30, r22
     c78:	21 91       	ld	r18, Z+
     c7a:	20 15       	cp	r18, r0
     c7c:	19 f4       	brne	.+6      	; 0xc84 <strtok_r+0x3a>
     c7e:	1e 92       	st	-X, r1
     c80:	11 96       	adiw	r26, 0x01	; 1
     c82:	06 c0       	rjmp	.+12     	; 0xc90 <strtok_r+0x46>
     c84:	22 23       	and	r18, r18
     c86:	c1 f7       	brne	.-16     	; 0xc78 <strtok_r+0x2e>
     c88:	0d 90       	ld	r0, X+
     c8a:	00 20       	and	r0, r0
     c8c:	a1 f7       	brne	.-24     	; 0xc76 <strtok_r+0x2c>
     c8e:	d0 01       	movw	r26, r0
     c90:	fa 01       	movw	r30, r20
     c92:	a1 93       	st	Z+, r26
     c94:	b0 83       	st	Z, r27
     c96:	08 95       	ret

00000c98 <__mulhi_const_10>:
     c98:	7a e0       	ldi	r23, 0x0A	; 10
     c9a:	97 9f       	mul	r25, r23
     c9c:	90 2d       	mov	r25, r0
     c9e:	87 9f       	mul	r24, r23
     ca0:	80 2d       	mov	r24, r0
     ca2:	91 0d       	add	r25, r1
     ca4:	11 24       	eor	r1, r1
     ca6:	08 95       	ret

00000ca8 <dtoa_prf>:
     ca8:	a9 e0       	ldi	r26, 0x09	; 9
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	ea e5       	ldi	r30, 0x5A	; 90
     cae:	f6 e0       	ldi	r31, 0x06	; 6
     cb0:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__prologue_saves__+0xc>
     cb4:	6a 01       	movw	r12, r20
     cb6:	12 2f       	mov	r17, r18
     cb8:	b0 2e       	mov	r11, r16
     cba:	2b e3       	ldi	r18, 0x3B	; 59
     cbc:	20 17       	cp	r18, r16
     cbe:	20 f0       	brcs	.+8      	; 0xcc8 <dtoa_prf+0x20>
     cc0:	ff 24       	eor	r15, r15
     cc2:	f3 94       	inc	r15
     cc4:	f0 0e       	add	r15, r16
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <dtoa_prf+0x24>
     cc8:	2c e3       	ldi	r18, 0x3C	; 60
     cca:	f2 2e       	mov	r15, r18
     ccc:	0f 2d       	mov	r16, r15
     cce:	27 e0       	ldi	r18, 0x07	; 7
     cd0:	ae 01       	movw	r20, r28
     cd2:	4f 5f       	subi	r20, 0xFF	; 255
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__ftoa_engine>
     cda:	bc 01       	movw	r22, r24
     cdc:	49 81       	ldd	r20, Y+1	; 0x01
     cde:	84 2f       	mov	r24, r20
     ce0:	89 70       	andi	r24, 0x09	; 9
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	31 f0       	breq	.+12     	; 0xcf2 <dtoa_prf+0x4a>
     ce6:	e1 fc       	sbrc	r14, 1
     ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <dtoa_prf+0x4e>
     cea:	e0 fe       	sbrs	r14, 0
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <dtoa_prf+0x52>
     cee:	90 e2       	ldi	r25, 0x20	; 32
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <dtoa_prf+0x54>
     cf2:	9d e2       	ldi	r25, 0x2D	; 45
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <dtoa_prf+0x54>
     cf6:	9b e2       	ldi	r25, 0x2B	; 43
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <dtoa_prf+0x54>
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	5e 2d       	mov	r21, r14
     cfe:	50 71       	andi	r21, 0x10	; 16
     d00:	43 ff       	sbrs	r20, 3
     d02:	3c c0       	rjmp	.+120    	; 0xd7c <dtoa_prf+0xd4>
     d04:	91 11       	cpse	r25, r1
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <dtoa_prf+0x64>
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <dtoa_prf+0x66>
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	81 17       	cp	r24, r17
     d10:	18 f4       	brcc	.+6      	; 0xd18 <dtoa_prf+0x70>
     d12:	21 2f       	mov	r18, r17
     d14:	28 1b       	sub	r18, r24
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <dtoa_prf+0x72>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	51 11       	cpse	r21, r1
     d1c:	0b c0       	rjmp	.+22     	; 0xd34 <dtoa_prf+0x8c>
     d1e:	f6 01       	movw	r30, r12
     d20:	82 2f       	mov	r24, r18
     d22:	30 e2       	ldi	r19, 0x20	; 32
     d24:	88 23       	and	r24, r24
     d26:	19 f0       	breq	.+6      	; 0xd2e <dtoa_prf+0x86>
     d28:	31 93       	st	Z+, r19
     d2a:	81 50       	subi	r24, 0x01	; 1
     d2c:	fb cf       	rjmp	.-10     	; 0xd24 <dtoa_prf+0x7c>
     d2e:	c2 0e       	add	r12, r18
     d30:	d1 1c       	adc	r13, r1
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	99 23       	and	r25, r25
     d36:	29 f0       	breq	.+10     	; 0xd42 <dtoa_prf+0x9a>
     d38:	d6 01       	movw	r26, r12
     d3a:	9c 93       	st	X, r25
     d3c:	f6 01       	movw	r30, r12
     d3e:	31 96       	adiw	r30, 0x01	; 1
     d40:	6f 01       	movw	r12, r30
     d42:	c6 01       	movw	r24, r12
     d44:	03 96       	adiw	r24, 0x03	; 3
     d46:	e2 fe       	sbrs	r14, 2
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <dtoa_prf+0xb6>
     d4a:	3e e4       	ldi	r19, 0x4E	; 78
     d4c:	d6 01       	movw	r26, r12
     d4e:	3c 93       	st	X, r19
     d50:	41 e4       	ldi	r20, 0x41	; 65
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	4c 93       	st	X, r20
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	12 96       	adiw	r26, 0x02	; 2
     d5a:	3c 93       	st	X, r19
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <dtoa_prf+0xc2>
     d5e:	3e e6       	ldi	r19, 0x6E	; 110
     d60:	f6 01       	movw	r30, r12
     d62:	30 83       	st	Z, r19
     d64:	41 e6       	ldi	r20, 0x61	; 97
     d66:	41 83       	std	Z+1, r20	; 0x01
     d68:	32 83       	std	Z+2, r19	; 0x02
     d6a:	fc 01       	movw	r30, r24
     d6c:	32 2f       	mov	r19, r18
     d6e:	40 e2       	ldi	r20, 0x20	; 32
     d70:	33 23       	and	r19, r19
     d72:	09 f4       	brne	.+2      	; 0xd76 <dtoa_prf+0xce>
     d74:	42 c0       	rjmp	.+132    	; 0xdfa <dtoa_prf+0x152>
     d76:	41 93       	st	Z+, r20
     d78:	31 50       	subi	r19, 0x01	; 1
     d7a:	fa cf       	rjmp	.-12     	; 0xd70 <dtoa_prf+0xc8>
     d7c:	42 ff       	sbrs	r20, 2
     d7e:	44 c0       	rjmp	.+136    	; 0xe08 <dtoa_prf+0x160>
     d80:	91 11       	cpse	r25, r1
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <dtoa_prf+0xe0>
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <dtoa_prf+0xe2>
     d88:	84 e0       	ldi	r24, 0x04	; 4
     d8a:	81 17       	cp	r24, r17
     d8c:	18 f4       	brcc	.+6      	; 0xd94 <dtoa_prf+0xec>
     d8e:	21 2f       	mov	r18, r17
     d90:	28 1b       	sub	r18, r24
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <dtoa_prf+0xee>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	51 11       	cpse	r21, r1
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <dtoa_prf+0x108>
     d9a:	f6 01       	movw	r30, r12
     d9c:	82 2f       	mov	r24, r18
     d9e:	30 e2       	ldi	r19, 0x20	; 32
     da0:	88 23       	and	r24, r24
     da2:	19 f0       	breq	.+6      	; 0xdaa <dtoa_prf+0x102>
     da4:	31 93       	st	Z+, r19
     da6:	81 50       	subi	r24, 0x01	; 1
     da8:	fb cf       	rjmp	.-10     	; 0xda0 <dtoa_prf+0xf8>
     daa:	c2 0e       	add	r12, r18
     dac:	d1 1c       	adc	r13, r1
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	99 23       	and	r25, r25
     db2:	29 f0       	breq	.+10     	; 0xdbe <dtoa_prf+0x116>
     db4:	d6 01       	movw	r26, r12
     db6:	9c 93       	st	X, r25
     db8:	f6 01       	movw	r30, r12
     dba:	31 96       	adiw	r30, 0x01	; 1
     dbc:	6f 01       	movw	r12, r30
     dbe:	c6 01       	movw	r24, r12
     dc0:	03 96       	adiw	r24, 0x03	; 3
     dc2:	e2 fe       	sbrs	r14, 2
     dc4:	0b c0       	rjmp	.+22     	; 0xddc <dtoa_prf+0x134>
     dc6:	39 e4       	ldi	r19, 0x49	; 73
     dc8:	d6 01       	movw	r26, r12
     dca:	3c 93       	st	X, r19
     dcc:	3e e4       	ldi	r19, 0x4E	; 78
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	3c 93       	st	X, r19
     dd2:	11 97       	sbiw	r26, 0x01	; 1
     dd4:	36 e4       	ldi	r19, 0x46	; 70
     dd6:	12 96       	adiw	r26, 0x02	; 2
     dd8:	3c 93       	st	X, r19
     dda:	07 c0       	rjmp	.+14     	; 0xdea <dtoa_prf+0x142>
     ddc:	39 e6       	ldi	r19, 0x69	; 105
     dde:	f6 01       	movw	r30, r12
     de0:	30 83       	st	Z, r19
     de2:	3e e6       	ldi	r19, 0x6E	; 110
     de4:	31 83       	std	Z+1, r19	; 0x01
     de6:	36 e6       	ldi	r19, 0x66	; 102
     de8:	32 83       	std	Z+2, r19	; 0x02
     dea:	fc 01       	movw	r30, r24
     dec:	32 2f       	mov	r19, r18
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	33 23       	and	r19, r19
     df2:	19 f0       	breq	.+6      	; 0xdfa <dtoa_prf+0x152>
     df4:	41 93       	st	Z+, r20
     df6:	31 50       	subi	r19, 0x01	; 1
     df8:	fb cf       	rjmp	.-10     	; 0xdf0 <dtoa_prf+0x148>
     dfa:	fc 01       	movw	r30, r24
     dfc:	e2 0f       	add	r30, r18
     dfe:	f1 1d       	adc	r31, r1
     e00:	10 82       	st	Z, r1
     e02:	8e ef       	ldi	r24, 0xFE	; 254
     e04:	9f ef       	ldi	r25, 0xFF	; 255
     e06:	a6 c0       	rjmp	.+332    	; 0xf54 <dtoa_prf+0x2ac>
     e08:	21 e0       	ldi	r18, 0x01	; 1
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	91 11       	cpse	r25, r1
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <dtoa_prf+0x16c>
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	16 16       	cp	r1, r22
     e16:	17 06       	cpc	r1, r23
     e18:	1c f4       	brge	.+6      	; 0xe20 <dtoa_prf+0x178>
     e1a:	fb 01       	movw	r30, r22
     e1c:	31 96       	adiw	r30, 0x01	; 1
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <dtoa_prf+0x17c>
     e20:	e1 e0       	ldi	r30, 0x01	; 1
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	2e 0f       	add	r18, r30
     e26:	3f 1f       	adc	r19, r31
     e28:	bb 20       	and	r11, r11
     e2a:	21 f0       	breq	.+8      	; 0xe34 <dtoa_prf+0x18c>
     e2c:	eb 2d       	mov	r30, r11
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	31 96       	adiw	r30, 0x01	; 1
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <dtoa_prf+0x190>
     e34:	e0 e0       	ldi	r30, 0x00	; 0
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	2e 0f       	add	r18, r30
     e3a:	3f 1f       	adc	r19, r31
     e3c:	e1 2f       	mov	r30, r17
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	2e 17       	cp	r18, r30
     e42:	3f 07       	cpc	r19, r31
     e44:	1c f4       	brge	.+6      	; 0xe4c <dtoa_prf+0x1a4>
     e46:	12 1b       	sub	r17, r18
     e48:	21 2f       	mov	r18, r17
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <dtoa_prf+0x1a6>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	8e 2d       	mov	r24, r14
     e50:	88 71       	andi	r24, 0x18	; 24
     e52:	59 f4       	brne	.+22     	; 0xe6a <dtoa_prf+0x1c2>
     e54:	f6 01       	movw	r30, r12
     e56:	82 2f       	mov	r24, r18
     e58:	30 e2       	ldi	r19, 0x20	; 32
     e5a:	88 23       	and	r24, r24
     e5c:	19 f0       	breq	.+6      	; 0xe64 <dtoa_prf+0x1bc>
     e5e:	31 93       	st	Z+, r19
     e60:	81 50       	subi	r24, 0x01	; 1
     e62:	fb cf       	rjmp	.-10     	; 0xe5a <dtoa_prf+0x1b2>
     e64:	c2 0e       	add	r12, r18
     e66:	d1 1c       	adc	r13, r1
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	99 23       	and	r25, r25
     e6c:	29 f0       	breq	.+10     	; 0xe78 <dtoa_prf+0x1d0>
     e6e:	d6 01       	movw	r26, r12
     e70:	9c 93       	st	X, r25
     e72:	f6 01       	movw	r30, r12
     e74:	31 96       	adiw	r30, 0x01	; 1
     e76:	6f 01       	movw	r12, r30
     e78:	51 11       	cpse	r21, r1
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <dtoa_prf+0x1ea>
     e7c:	f6 01       	movw	r30, r12
     e7e:	82 2f       	mov	r24, r18
     e80:	90 e3       	ldi	r25, 0x30	; 48
     e82:	88 23       	and	r24, r24
     e84:	19 f0       	breq	.+6      	; 0xe8c <dtoa_prf+0x1e4>
     e86:	91 93       	st	Z+, r25
     e88:	81 50       	subi	r24, 0x01	; 1
     e8a:	fb cf       	rjmp	.-10     	; 0xe82 <dtoa_prf+0x1da>
     e8c:	c2 0e       	add	r12, r18
     e8e:	d1 1c       	adc	r13, r1
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	0f 2d       	mov	r16, r15
     e94:	06 0f       	add	r16, r22
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	34 2f       	mov	r19, r20
     e9a:	30 71       	andi	r19, 0x10	; 16
     e9c:	44 ff       	sbrs	r20, 4
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <dtoa_prf+0x1fe>
     ea0:	91 33       	cpi	r25, 0x31	; 49
     ea2:	09 f4       	brne	.+2      	; 0xea6 <dtoa_prf+0x1fe>
     ea4:	01 50       	subi	r16, 0x01	; 1
     ea6:	10 16       	cp	r1, r16
     ea8:	24 f4       	brge	.+8      	; 0xeb2 <dtoa_prf+0x20a>
     eaa:	09 30       	cpi	r16, 0x09	; 9
     eac:	18 f0       	brcs	.+6      	; 0xeb4 <dtoa_prf+0x20c>
     eae:	08 e0       	ldi	r16, 0x08	; 8
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <dtoa_prf+0x20c>
     eb2:	01 e0       	ldi	r16, 0x01	; 1
     eb4:	ab 01       	movw	r20, r22
     eb6:	77 ff       	sbrs	r23, 7
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <dtoa_prf+0x216>
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	fb 01       	movw	r30, r22
     ec0:	e4 1b       	sub	r30, r20
     ec2:	f5 0b       	sbc	r31, r21
     ec4:	a1 e0       	ldi	r26, 0x01	; 1
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ac 0f       	add	r26, r28
     eca:	bd 1f       	adc	r27, r29
     ecc:	ea 0f       	add	r30, r26
     ece:	fb 1f       	adc	r31, r27
     ed0:	8e e2       	ldi	r24, 0x2E	; 46
     ed2:	a8 2e       	mov	r10, r24
     ed4:	4b 01       	movw	r8, r22
     ed6:	80 1a       	sub	r8, r16
     ed8:	91 08       	sbc	r9, r1
     eda:	0b 2d       	mov	r16, r11
     edc:	10 e0       	ldi	r17, 0x00	; 0
     ede:	11 95       	neg	r17
     ee0:	01 95       	neg	r16
     ee2:	11 09       	sbc	r17, r1
     ee4:	4f 3f       	cpi	r20, 0xFF	; 255
     ee6:	bf ef       	ldi	r27, 0xFF	; 255
     ee8:	5b 07       	cpc	r21, r27
     eea:	21 f4       	brne	.+8      	; 0xef4 <dtoa_prf+0x24c>
     eec:	d6 01       	movw	r26, r12
     eee:	ac 92       	st	X, r10
     ef0:	11 96       	adiw	r26, 0x01	; 1
     ef2:	6d 01       	movw	r12, r26
     ef4:	64 17       	cp	r22, r20
     ef6:	75 07       	cpc	r23, r21
     ef8:	2c f0       	brlt	.+10     	; 0xf04 <dtoa_prf+0x25c>
     efa:	84 16       	cp	r8, r20
     efc:	95 06       	cpc	r9, r21
     efe:	14 f4       	brge	.+4      	; 0xf04 <dtoa_prf+0x25c>
     f00:	81 81       	ldd	r24, Z+1	; 0x01
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <dtoa_prf+0x25e>
     f04:	80 e3       	ldi	r24, 0x30	; 48
     f06:	41 50       	subi	r20, 0x01	; 1
     f08:	51 09       	sbc	r21, r1
     f0a:	31 96       	adiw	r30, 0x01	; 1
     f0c:	d6 01       	movw	r26, r12
     f0e:	11 96       	adiw	r26, 0x01	; 1
     f10:	7d 01       	movw	r14, r26
     f12:	40 17       	cp	r20, r16
     f14:	51 07       	cpc	r21, r17
     f16:	24 f0       	brlt	.+8      	; 0xf20 <dtoa_prf+0x278>
     f18:	d6 01       	movw	r26, r12
     f1a:	8c 93       	st	X, r24
     f1c:	67 01       	movw	r12, r14
     f1e:	e2 cf       	rjmp	.-60     	; 0xee4 <dtoa_prf+0x23c>
     f20:	64 17       	cp	r22, r20
     f22:	75 07       	cpc	r23, r21
     f24:	39 f4       	brne	.+14     	; 0xf34 <dtoa_prf+0x28c>
     f26:	96 33       	cpi	r25, 0x36	; 54
     f28:	20 f4       	brcc	.+8      	; 0xf32 <dtoa_prf+0x28a>
     f2a:	95 33       	cpi	r25, 0x35	; 53
     f2c:	19 f4       	brne	.+6      	; 0xf34 <dtoa_prf+0x28c>
     f2e:	31 11       	cpse	r19, r1
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <dtoa_prf+0x28c>
     f32:	81 e3       	ldi	r24, 0x31	; 49
     f34:	f6 01       	movw	r30, r12
     f36:	80 83       	st	Z, r24
     f38:	f7 01       	movw	r30, r14
     f3a:	82 2f       	mov	r24, r18
     f3c:	90 e2       	ldi	r25, 0x20	; 32
     f3e:	88 23       	and	r24, r24
     f40:	19 f0       	breq	.+6      	; 0xf48 <dtoa_prf+0x2a0>
     f42:	91 93       	st	Z+, r25
     f44:	81 50       	subi	r24, 0x01	; 1
     f46:	fb cf       	rjmp	.-10     	; 0xf3e <dtoa_prf+0x296>
     f48:	f7 01       	movw	r30, r14
     f4a:	e2 0f       	add	r30, r18
     f4c:	f1 1d       	adc	r31, r1
     f4e:	10 82       	st	Z, r1
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	29 96       	adiw	r28, 0x09	; 9
     f56:	ec e0       	ldi	r30, 0x0C	; 12
     f58:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__epilogue_restores__+0xc>

00000f5c <strtod>:
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e4 eb       	ldi	r30, 0xB4	; 180
     f62:	f7 e0       	ldi	r31, 0x07	; 7
     f64:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__prologue_saves__+0xc>
     f68:	ec 01       	movw	r28, r24
     f6a:	6b 01       	movw	r12, r22
     f6c:	61 15       	cp	r22, r1
     f6e:	71 05       	cpc	r23, r1
     f70:	19 f0       	breq	.+6      	; 0xf78 <strtod+0x1c>
     f72:	fb 01       	movw	r30, r22
     f74:	91 83       	std	Z+1, r25	; 0x01
     f76:	80 83       	st	Z, r24
     f78:	7e 01       	movw	r14, r28
     f7a:	ff ef       	ldi	r31, 0xFF	; 255
     f7c:	ef 1a       	sub	r14, r31
     f7e:	ff 0a       	sbc	r15, r31
     f80:	08 81       	ld	r16, Y
     f82:	80 2f       	mov	r24, r16
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <isspace>
     f8a:	89 2b       	or	r24, r25
     f8c:	11 f0       	breq	.+4      	; 0xf92 <strtod+0x36>
     f8e:	e7 01       	movw	r28, r14
     f90:	f3 cf       	rjmp	.-26     	; 0xf78 <strtod+0x1c>
     f92:	0d 32       	cpi	r16, 0x2D	; 45
     f94:	39 f4       	brne	.+14     	; 0xfa4 <strtod+0x48>
     f96:	7e 01       	movw	r14, r28
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	e8 0e       	add	r14, r24
     f9c:	f1 1c       	adc	r15, r1
     f9e:	09 81       	ldd	r16, Y+1	; 0x01
     fa0:	11 e0       	ldi	r17, 0x01	; 1
     fa2:	08 c0       	rjmp	.+16     	; 0xfb4 <strtod+0x58>
     fa4:	0b 32       	cpi	r16, 0x2B	; 43
     fa6:	29 f4       	brne	.+10     	; 0xfb2 <strtod+0x56>
     fa8:	7e 01       	movw	r14, r28
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	e9 0e       	add	r14, r25
     fae:	f1 1c       	adc	r15, r1
     fb0:	09 81       	ldd	r16, Y+1	; 0x01
     fb2:	10 e0       	ldi	r17, 0x00	; 0
     fb4:	e7 01       	movw	r28, r14
     fb6:	21 97       	sbiw	r28, 0x01	; 1
     fb8:	43 e0       	ldi	r20, 0x03	; 3
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	60 e7       	ldi	r22, 0x70	; 112
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	ce 01       	movw	r24, r28
     fc2:	0e 94 dd 09 	call	0x13ba	; 0x13ba <strncasecmp_P>
     fc6:	89 2b       	or	r24, r25
     fc8:	c1 f4       	brne	.+48     	; 0xffa <strtod+0x9e>
     fca:	23 96       	adiw	r28, 0x03	; 3
     fcc:	45 e0       	ldi	r20, 0x05	; 5
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	6b e6       	ldi	r22, 0x6B	; 107
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	ce 01       	movw	r24, r28
     fd6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <strncasecmp_P>
     fda:	89 2b       	or	r24, r25
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <strtod+0x84>
     fde:	25 96       	adiw	r28, 0x05	; 5
     fe0:	c1 14       	cp	r12, r1
     fe2:	d1 04       	cpc	r13, r1
     fe4:	19 f0       	breq	.+6      	; 0xfec <strtod+0x90>
     fe6:	f6 01       	movw	r30, r12
     fe8:	d1 83       	std	Z+1, r29	; 0x01
     fea:	c0 83       	st	Z, r28
     fec:	11 11       	cpse	r17, r1
     fee:	f6 c0       	rjmp	.+492    	; 0x11dc <strtod+0x280>
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	9f e7       	ldi	r25, 0x7F	; 127
     ff8:	fa c0       	rjmp	.+500    	; 0x11ee <strtod+0x292>
     ffa:	43 e0       	ldi	r20, 0x03	; 3
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	68 e6       	ldi	r22, 0x68	; 104
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	ce 01       	movw	r24, r28
    1004:	0e 94 dd 09 	call	0x13ba	; 0x13ba <strncasecmp_P>
    1008:	89 2b       	or	r24, r25
    100a:	59 f4       	brne	.+22     	; 0x1022 <strtod+0xc6>
    100c:	c1 14       	cp	r12, r1
    100e:	d1 04       	cpc	r13, r1
    1010:	09 f4       	brne	.+2      	; 0x1014 <strtod+0xb8>
    1012:	e9 c0       	rjmp	.+466    	; 0x11e6 <strtod+0x28a>
    1014:	f2 e0       	ldi	r31, 0x02	; 2
    1016:	ef 0e       	add	r14, r31
    1018:	f1 1c       	adc	r15, r1
    101a:	f6 01       	movw	r30, r12
    101c:	f1 82       	std	Z+1, r15	; 0x01
    101e:	e0 82       	st	Z, r14
    1020:	e2 c0       	rjmp	.+452    	; 0x11e6 <strtod+0x28a>
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	a9 01       	movw	r20, r18
    1028:	c0 e0       	ldi	r28, 0x00	; 0
    102a:	d0 e0       	ldi	r29, 0x00	; 0
    102c:	f7 01       	movw	r30, r14
    102e:	80 ed       	ldi	r24, 0xD0	; 208
    1030:	a8 2e       	mov	r10, r24
    1032:	a0 0e       	add	r10, r16
    1034:	89 e0       	ldi	r24, 0x09	; 9
    1036:	8a 15       	cp	r24, r10
    1038:	30 f1       	brcs	.+76     	; 0x1086 <strtod+0x12a>
    103a:	91 2f       	mov	r25, r17
    103c:	92 60       	ori	r25, 0x02	; 2
    103e:	b9 2e       	mov	r11, r25
    1040:	81 2f       	mov	r24, r17
    1042:	88 70       	andi	r24, 0x08	; 8
    1044:	12 ff       	sbrs	r17, 2
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <strtod+0xf4>
    1048:	81 11       	cpse	r24, r1
    104a:	24 c0       	rjmp	.+72     	; 0x1094 <strtod+0x138>
    104c:	21 96       	adiw	r28, 0x01	; 1
    104e:	22 c0       	rjmp	.+68     	; 0x1094 <strtod+0x138>
    1050:	81 11       	cpse	r24, r1
    1052:	21 97       	sbiw	r28, 0x01	; 1
    1054:	a5 e0       	ldi	r26, 0x05	; 5
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	0e 94 21 0a 	call	0x1442	; 0x1442 <__muluhisi3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	aa 1f       	adc	r26, r26
    1066:	bb 1f       	adc	r27, r27
    1068:	9c 01       	movw	r18, r24
    106a:	ad 01       	movw	r20, r26
    106c:	2a 0d       	add	r18, r10
    106e:	31 1d       	adc	r19, r1
    1070:	41 1d       	adc	r20, r1
    1072:	51 1d       	adc	r21, r1
    1074:	28 39       	cpi	r18, 0x98	; 152
    1076:	89 e9       	ldi	r24, 0x99	; 153
    1078:	38 07       	cpc	r19, r24
    107a:	48 07       	cpc	r20, r24
    107c:	89 e1       	ldi	r24, 0x19	; 25
    107e:	58 07       	cpc	r21, r24
    1080:	48 f0       	brcs	.+18     	; 0x1094 <strtod+0x138>
    1082:	16 60       	ori	r17, 0x06	; 6
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <strtod+0x136>
    1086:	9e ef       	ldi	r25, 0xFE	; 254
    1088:	a9 12       	cpse	r10, r25
    108a:	0a c0       	rjmp	.+20     	; 0x10a0 <strtod+0x144>
    108c:	13 fd       	sbrc	r17, 3
    108e:	40 c0       	rjmp	.+128    	; 0x1110 <strtod+0x1b4>
    1090:	18 60       	ori	r17, 0x08	; 8
    1092:	b1 2e       	mov	r11, r17
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	e8 1a       	sub	r14, r24
    1098:	f8 0a       	sbc	r15, r24
    109a:	00 81       	ld	r16, Z
    109c:	1b 2d       	mov	r17, r11
    109e:	c6 cf       	rjmp	.-116    	; 0x102c <strtod+0xd0>
    10a0:	80 2f       	mov	r24, r16
    10a2:	8f 7d       	andi	r24, 0xDF	; 223
    10a4:	85 34       	cpi	r24, 0x45	; 69
    10a6:	a1 f5       	brne	.+104    	; 0x1110 <strtod+0x1b4>
    10a8:	80 81       	ld	r24, Z
    10aa:	8d 32       	cpi	r24, 0x2D	; 45
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <strtod+0x156>
    10ae:	10 61       	ori	r17, 0x10	; 16
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <strtod+0x162>
    10b2:	8b 32       	cpi	r24, 0x2B	; 43
    10b4:	21 f0       	breq	.+8      	; 0x10be <strtod+0x162>
    10b6:	31 96       	adiw	r30, 0x01	; 1
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <strtod+0x16a>
    10be:	81 81       	ldd	r24, Z+1	; 0x01
    10c0:	32 96       	adiw	r30, 0x02	; 2
    10c2:	62 e0       	ldi	r22, 0x02	; 2
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	80 53       	subi	r24, 0x30	; 48
    10c8:	8a 30       	cpi	r24, 0x0A	; 10
    10ca:	18 f0       	brcs	.+6      	; 0x10d2 <strtod+0x176>
    10cc:	e6 1b       	sub	r30, r22
    10ce:	f7 0b       	sbc	r31, r23
    10d0:	1f c0       	rjmp	.+62     	; 0x1110 <strtod+0x1b4>
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	60 38       	cpi	r22, 0x80	; 128
    10d8:	9c e0       	ldi	r25, 0x0C	; 12
    10da:	79 07       	cpc	r23, r25
    10dc:	5c f4       	brge	.+22     	; 0x10f4 <strtod+0x198>
    10de:	db 01       	movw	r26, r22
    10e0:	aa 0f       	add	r26, r26
    10e2:	bb 1f       	adc	r27, r27
    10e4:	aa 0f       	add	r26, r26
    10e6:	bb 1f       	adc	r27, r27
    10e8:	6a 0f       	add	r22, r26
    10ea:	7b 1f       	adc	r23, r27
    10ec:	66 0f       	add	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	68 0f       	add	r22, r24
    10f2:	71 1d       	adc	r23, r1
    10f4:	31 96       	adiw	r30, 0x01	; 1
    10f6:	df 01       	movw	r26, r30
    10f8:	11 97       	sbiw	r26, 0x01	; 1
    10fa:	8c 91       	ld	r24, X
    10fc:	80 53       	subi	r24, 0x30	; 48
    10fe:	8a 30       	cpi	r24, 0x0A	; 10
    1100:	50 f3       	brcs	.-44     	; 0x10d6 <strtod+0x17a>
    1102:	14 ff       	sbrs	r17, 4
    1104:	03 c0       	rjmp	.+6      	; 0x110c <strtod+0x1b0>
    1106:	71 95       	neg	r23
    1108:	61 95       	neg	r22
    110a:	71 09       	sbc	r23, r1
    110c:	c6 0f       	add	r28, r22
    110e:	d7 1f       	adc	r29, r23
    1110:	11 ff       	sbrs	r17, 1
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <strtod+0x1c8>
    1114:	c1 14       	cp	r12, r1
    1116:	d1 04       	cpc	r13, r1
    1118:	29 f0       	breq	.+10     	; 0x1124 <strtod+0x1c8>
    111a:	cf 01       	movw	r24, r30
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f6 01       	movw	r30, r12
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
    1124:	ca 01       	movw	r24, r20
    1126:	b9 01       	movw	r22, r18
    1128:	0e 94 a0 03 	call	0x740	; 0x740 <__floatunsisf>
    112c:	21 2f       	mov	r18, r17
    112e:	23 70       	andi	r18, 0x03	; 3
    1130:	23 30       	cpi	r18, 0x03	; 3
    1132:	19 f0       	breq	.+6      	; 0x113a <strtod+0x1de>
    1134:	4b 01       	movw	r8, r22
    1136:	5c 01       	movw	r10, r24
    1138:	06 c0       	rjmp	.+12     	; 0x1146 <strtod+0x1ea>
    113a:	4b 01       	movw	r8, r22
    113c:	5c 01       	movw	r10, r24
    113e:	b7 fa       	bst	r11, 7
    1140:	b0 94       	com	r11
    1142:	b7 f8       	bld	r11, 7
    1144:	b0 94       	com	r11
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	a9 01       	movw	r20, r18
    114c:	c5 01       	movw	r24, r10
    114e:	b4 01       	movw	r22, r8
    1150:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__cmpsf2>
    1154:	88 23       	and	r24, r24
    1156:	09 f4       	brne	.+2      	; 0x115a <strtod+0x1fe>
    1158:	3e c0       	rjmp	.+124    	; 0x11d6 <strtod+0x27a>
    115a:	d7 ff       	sbrs	r29, 7
    115c:	06 c0       	rjmp	.+12     	; 0x116a <strtod+0x20e>
    115e:	d1 95       	neg	r29
    1160:	c1 95       	neg	r28
    1162:	d1 09       	sbc	r29, r1
    1164:	07 e8       	ldi	r16, 0x87	; 135
    1166:	10 e0       	ldi	r17, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <strtod+0x212>
    116a:	0f e9       	ldi	r16, 0x9F	; 159
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	68 01       	movw	r12, r16
    1170:	f8 e1       	ldi	r31, 0x18	; 24
    1172:	cf 1a       	sub	r12, r31
    1174:	d1 08       	sbc	r13, r1
    1176:	90 e2       	ldi	r25, 0x20	; 32
    1178:	e9 2e       	mov	r14, r25
    117a:	f1 2c       	mov	r15, r1
    117c:	ce 15       	cp	r28, r14
    117e:	df 05       	cpc	r29, r15
    1180:	74 f0       	brlt	.+28     	; 0x119e <strtod+0x242>
    1182:	f8 01       	movw	r30, r16
    1184:	25 91       	lpm	r18, Z+
    1186:	35 91       	lpm	r19, Z+
    1188:	45 91       	lpm	r20, Z+
    118a:	54 91       	lpm	r21, Z
    118c:	c5 01       	movw	r24, r10
    118e:	b4 01       	movw	r22, r8
    1190:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3>
    1194:	4b 01       	movw	r8, r22
    1196:	5c 01       	movw	r10, r24
    1198:	ce 19       	sub	r28, r14
    119a:	df 09       	sbc	r29, r15
    119c:	ef cf       	rjmp	.-34     	; 0x117c <strtod+0x220>
    119e:	04 50       	subi	r16, 0x04	; 4
    11a0:	11 09       	sbc	r17, r1
    11a2:	f5 94       	asr	r15
    11a4:	e7 94       	ror	r14
    11a6:	0c 15       	cp	r16, r12
    11a8:	1d 05       	cpc	r17, r13
    11aa:	41 f7       	brne	.-48     	; 0x117c <strtod+0x220>
    11ac:	8a 2d       	mov	r24, r10
    11ae:	88 0f       	add	r24, r24
    11b0:	8b 2d       	mov	r24, r11
    11b2:	88 1f       	adc	r24, r24
    11b4:	8f 3f       	cpi	r24, 0xFF	; 255
    11b6:	49 f0       	breq	.+18     	; 0x11ca <strtod+0x26e>
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	c5 01       	movw	r24, r10
    11c0:	b4 01       	movw	r22, r8
    11c2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__cmpsf2>
    11c6:	81 11       	cpse	r24, r1
    11c8:	06 c0       	rjmp	.+12     	; 0x11d6 <strtod+0x27a>
    11ca:	82 e2       	ldi	r24, 0x22	; 34
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <errno+0x1>
    11d2:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <errno>
    11d6:	c5 01       	movw	r24, r10
    11d8:	b4 01       	movw	r22, r8
    11da:	09 c0       	rjmp	.+18     	; 0x11ee <strtod+0x292>
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	80 e8       	ldi	r24, 0x80	; 128
    11e2:	9f ef       	ldi	r25, 0xFF	; 255
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <strtod+0x292>
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	80 ec       	ldi	r24, 0xC0	; 192
    11ec:	9f e7       	ldi	r25, 0x7F	; 127
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	ec e0       	ldi	r30, 0x0C	; 12
    11f4:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__epilogue_restores__+0xc>

000011f8 <__ftoa_engine>:
    11f8:	28 30       	cpi	r18, 0x08	; 8
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__ftoa_engine+0x6>
    11fc:	27 e0       	ldi	r18, 0x07	; 7
    11fe:	33 27       	eor	r19, r19
    1200:	da 01       	movw	r26, r20
    1202:	99 0f       	add	r25, r25
    1204:	31 1d       	adc	r19, r1
    1206:	87 fd       	sbrc	r24, 7
    1208:	91 60       	ori	r25, 0x01	; 1
    120a:	00 96       	adiw	r24, 0x00	; 0
    120c:	61 05       	cpc	r22, r1
    120e:	71 05       	cpc	r23, r1
    1210:	39 f4       	brne	.+14     	; 0x1220 <__ftoa_engine+0x28>
    1212:	32 60       	ori	r19, 0x02	; 2
    1214:	2e 5f       	subi	r18, 0xFE	; 254
    1216:	3d 93       	st	X+, r19
    1218:	30 e3       	ldi	r19, 0x30	; 48
    121a:	2a 95       	dec	r18
    121c:	e1 f7       	brne	.-8      	; 0x1216 <__ftoa_engine+0x1e>
    121e:	08 95       	ret
    1220:	9f 3f       	cpi	r25, 0xFF	; 255
    1222:	30 f0       	brcs	.+12     	; 0x1230 <__ftoa_engine+0x38>
    1224:	80 38       	cpi	r24, 0x80	; 128
    1226:	71 05       	cpc	r23, r1
    1228:	61 05       	cpc	r22, r1
    122a:	09 f0       	breq	.+2      	; 0x122e <__ftoa_engine+0x36>
    122c:	3c 5f       	subi	r19, 0xFC	; 252
    122e:	3c 5f       	subi	r19, 0xFC	; 252
    1230:	3d 93       	st	X+, r19
    1232:	91 30       	cpi	r25, 0x01	; 1
    1234:	08 f0       	brcs	.+2      	; 0x1238 <__ftoa_engine+0x40>
    1236:	80 68       	ori	r24, 0x80	; 128
    1238:	91 1d       	adc	r25, r1
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	1f 93       	push	r17
    1240:	0f 93       	push	r16
    1242:	ff 92       	push	r15
    1244:	ef 92       	push	r14
    1246:	19 2f       	mov	r17, r25
    1248:	98 7f       	andi	r25, 0xF8	; 248
    124a:	96 95       	lsr	r25
    124c:	e9 2f       	mov	r30, r25
    124e:	96 95       	lsr	r25
    1250:	96 95       	lsr	r25
    1252:	e9 0f       	add	r30, r25
    1254:	ff 27       	eor	r31, r31
    1256:	e3 50       	subi	r30, 0x03	; 3
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	99 27       	eor	r25, r25
    125c:	33 27       	eor	r19, r19
    125e:	ee 24       	eor	r14, r14
    1260:	ff 24       	eor	r15, r15
    1262:	a7 01       	movw	r20, r14
    1264:	e7 01       	movw	r28, r14
    1266:	05 90       	lpm	r0, Z+
    1268:	08 94       	sec
    126a:	07 94       	ror	r0
    126c:	28 f4       	brcc	.+10     	; 0x1278 <__ftoa_engine+0x80>
    126e:	36 0f       	add	r19, r22
    1270:	e7 1e       	adc	r14, r23
    1272:	f8 1e       	adc	r15, r24
    1274:	49 1f       	adc	r20, r25
    1276:	51 1d       	adc	r21, r1
    1278:	66 0f       	add	r22, r22
    127a:	77 1f       	adc	r23, r23
    127c:	88 1f       	adc	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	06 94       	lsr	r0
    1282:	a1 f7       	brne	.-24     	; 0x126c <__ftoa_engine+0x74>
    1284:	05 90       	lpm	r0, Z+
    1286:	07 94       	ror	r0
    1288:	28 f4       	brcc	.+10     	; 0x1294 <__ftoa_engine+0x9c>
    128a:	e7 0e       	add	r14, r23
    128c:	f8 1e       	adc	r15, r24
    128e:	49 1f       	adc	r20, r25
    1290:	56 1f       	adc	r21, r22
    1292:	c1 1d       	adc	r28, r1
    1294:	77 0f       	add	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	66 1f       	adc	r22, r22
    129c:	06 94       	lsr	r0
    129e:	a1 f7       	brne	.-24     	; 0x1288 <__ftoa_engine+0x90>
    12a0:	05 90       	lpm	r0, Z+
    12a2:	07 94       	ror	r0
    12a4:	28 f4       	brcc	.+10     	; 0x12b0 <__ftoa_engine+0xb8>
    12a6:	f8 0e       	add	r15, r24
    12a8:	49 1f       	adc	r20, r25
    12aa:	56 1f       	adc	r21, r22
    12ac:	c7 1f       	adc	r28, r23
    12ae:	d1 1d       	adc	r29, r1
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	66 1f       	adc	r22, r22
    12b6:	77 1f       	adc	r23, r23
    12b8:	06 94       	lsr	r0
    12ba:	a1 f7       	brne	.-24     	; 0x12a4 <__ftoa_engine+0xac>
    12bc:	05 90       	lpm	r0, Z+
    12be:	07 94       	ror	r0
    12c0:	20 f4       	brcc	.+8      	; 0x12ca <__ftoa_engine+0xd2>
    12c2:	49 0f       	add	r20, r25
    12c4:	56 1f       	adc	r21, r22
    12c6:	c7 1f       	adc	r28, r23
    12c8:	d8 1f       	adc	r29, r24
    12ca:	99 0f       	add	r25, r25
    12cc:	66 1f       	adc	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	88 1f       	adc	r24, r24
    12d2:	06 94       	lsr	r0
    12d4:	a9 f7       	brne	.-22     	; 0x12c0 <__ftoa_engine+0xc8>
    12d6:	84 91       	lpm	r24, Z
    12d8:	10 95       	com	r17
    12da:	17 70       	andi	r17, 0x07	; 7
    12dc:	41 f0       	breq	.+16     	; 0x12ee <__ftoa_engine+0xf6>
    12de:	d6 95       	lsr	r29
    12e0:	c7 95       	ror	r28
    12e2:	57 95       	ror	r21
    12e4:	47 95       	ror	r20
    12e6:	f7 94       	ror	r15
    12e8:	e7 94       	ror	r14
    12ea:	1a 95       	dec	r17
    12ec:	c1 f7       	brne	.-16     	; 0x12de <__ftoa_engine+0xe6>
    12ee:	e3 ea       	ldi	r30, 0xA3	; 163
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	68 94       	set
    12f4:	15 90       	lpm	r1, Z+
    12f6:	15 91       	lpm	r17, Z+
    12f8:	35 91       	lpm	r19, Z+
    12fa:	65 91       	lpm	r22, Z+
    12fc:	95 91       	lpm	r25, Z+
    12fe:	05 90       	lpm	r0, Z+
    1300:	7f e2       	ldi	r23, 0x2F	; 47
    1302:	73 95       	inc	r23
    1304:	e1 18       	sub	r14, r1
    1306:	f1 0a       	sbc	r15, r17
    1308:	43 0b       	sbc	r20, r19
    130a:	56 0b       	sbc	r21, r22
    130c:	c9 0b       	sbc	r28, r25
    130e:	d0 09       	sbc	r29, r0
    1310:	c0 f7       	brcc	.-16     	; 0x1302 <__ftoa_engine+0x10a>
    1312:	e1 0c       	add	r14, r1
    1314:	f1 1e       	adc	r15, r17
    1316:	43 1f       	adc	r20, r19
    1318:	56 1f       	adc	r21, r22
    131a:	c9 1f       	adc	r28, r25
    131c:	d0 1d       	adc	r29, r0
    131e:	7e f4       	brtc	.+30     	; 0x133e <__ftoa_engine+0x146>
    1320:	70 33       	cpi	r23, 0x30	; 48
    1322:	11 f4       	brne	.+4      	; 0x1328 <__ftoa_engine+0x130>
    1324:	8a 95       	dec	r24
    1326:	e6 cf       	rjmp	.-52     	; 0x12f4 <__ftoa_engine+0xfc>
    1328:	e8 94       	clt
    132a:	01 50       	subi	r16, 0x01	; 1
    132c:	30 f0       	brcs	.+12     	; 0x133a <__ftoa_engine+0x142>
    132e:	08 0f       	add	r16, r24
    1330:	0a f4       	brpl	.+2      	; 0x1334 <__ftoa_engine+0x13c>
    1332:	00 27       	eor	r16, r16
    1334:	02 17       	cp	r16, r18
    1336:	08 f4       	brcc	.+2      	; 0x133a <__ftoa_engine+0x142>
    1338:	20 2f       	mov	r18, r16
    133a:	23 95       	inc	r18
    133c:	02 2f       	mov	r16, r18
    133e:	7a 33       	cpi	r23, 0x3A	; 58
    1340:	28 f0       	brcs	.+10     	; 0x134c <__ftoa_engine+0x154>
    1342:	79 e3       	ldi	r23, 0x39	; 57
    1344:	7d 93       	st	X+, r23
    1346:	2a 95       	dec	r18
    1348:	e9 f7       	brne	.-6      	; 0x1344 <__ftoa_engine+0x14c>
    134a:	10 c0       	rjmp	.+32     	; 0x136c <__ftoa_engine+0x174>
    134c:	7d 93       	st	X+, r23
    134e:	2a 95       	dec	r18
    1350:	89 f6       	brne	.-94     	; 0x12f4 <__ftoa_engine+0xfc>
    1352:	06 94       	lsr	r0
    1354:	97 95       	ror	r25
    1356:	67 95       	ror	r22
    1358:	37 95       	ror	r19
    135a:	17 95       	ror	r17
    135c:	17 94       	ror	r1
    135e:	e1 18       	sub	r14, r1
    1360:	f1 0a       	sbc	r15, r17
    1362:	43 0b       	sbc	r20, r19
    1364:	56 0b       	sbc	r21, r22
    1366:	c9 0b       	sbc	r28, r25
    1368:	d0 09       	sbc	r29, r0
    136a:	98 f0       	brcs	.+38     	; 0x1392 <__ftoa_engine+0x19a>
    136c:	23 95       	inc	r18
    136e:	7e 91       	ld	r23, -X
    1370:	73 95       	inc	r23
    1372:	7a 33       	cpi	r23, 0x3A	; 58
    1374:	08 f0       	brcs	.+2      	; 0x1378 <__ftoa_engine+0x180>
    1376:	70 e3       	ldi	r23, 0x30	; 48
    1378:	7c 93       	st	X, r23
    137a:	20 13       	cpse	r18, r16
    137c:	b8 f7       	brcc	.-18     	; 0x136c <__ftoa_engine+0x174>
    137e:	7e 91       	ld	r23, -X
    1380:	70 61       	ori	r23, 0x10	; 16
    1382:	7d 93       	st	X+, r23
    1384:	30 f0       	brcs	.+12     	; 0x1392 <__ftoa_engine+0x19a>
    1386:	83 95       	inc	r24
    1388:	71 e3       	ldi	r23, 0x31	; 49
    138a:	7d 93       	st	X+, r23
    138c:	70 e3       	ldi	r23, 0x30	; 48
    138e:	2a 95       	dec	r18
    1390:	e1 f7       	brne	.-8      	; 0x138a <__ftoa_engine+0x192>
    1392:	11 24       	eor	r1, r1
    1394:	ef 90       	pop	r14
    1396:	ff 90       	pop	r15
    1398:	0f 91       	pop	r16
    139a:	1f 91       	pop	r17
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	99 27       	eor	r25, r25
    13a2:	87 fd       	sbrc	r24, 7
    13a4:	90 95       	com	r25
    13a6:	08 95       	ret

000013a8 <isspace>:
    13a8:	91 11       	cpse	r25, r1
    13aa:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__ctype_isfalse>
    13ae:	80 32       	cpi	r24, 0x20	; 32
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <isspace+0x10>
    13b2:	89 50       	subi	r24, 0x09	; 9
    13b4:	85 50       	subi	r24, 0x05	; 5
    13b6:	c8 f7       	brcc	.-14     	; 0x13aa <isspace+0x2>
    13b8:	08 95       	ret

000013ba <strncasecmp_P>:
    13ba:	fb 01       	movw	r30, r22
    13bc:	dc 01       	movw	r26, r24
    13be:	41 50       	subi	r20, 0x01	; 1
    13c0:	50 40       	sbci	r21, 0x00	; 0
    13c2:	88 f0       	brcs	.+34     	; 0x13e6 <strncasecmp_P+0x2c>
    13c4:	8d 91       	ld	r24, X+
    13c6:	81 34       	cpi	r24, 0x41	; 65
    13c8:	1c f0       	brlt	.+6      	; 0x13d0 <strncasecmp_P+0x16>
    13ca:	8b 35       	cpi	r24, 0x5B	; 91
    13cc:	0c f4       	brge	.+2      	; 0x13d0 <strncasecmp_P+0x16>
    13ce:	80 5e       	subi	r24, 0xE0	; 224
    13d0:	65 91       	lpm	r22, Z+
    13d2:	61 34       	cpi	r22, 0x41	; 65
    13d4:	1c f0       	brlt	.+6      	; 0x13dc <strncasecmp_P+0x22>
    13d6:	6b 35       	cpi	r22, 0x5B	; 91
    13d8:	0c f4       	brge	.+2      	; 0x13dc <strncasecmp_P+0x22>
    13da:	60 5e       	subi	r22, 0xE0	; 224
    13dc:	86 1b       	sub	r24, r22
    13de:	61 11       	cpse	r22, r1
    13e0:	71 f3       	breq	.-36     	; 0x13be <strncasecmp_P+0x4>
    13e2:	99 0b       	sbc	r25, r25
    13e4:	08 95       	ret
    13e6:	88 1b       	sub	r24, r24
    13e8:	fc cf       	rjmp	.-8      	; 0x13e2 <strncasecmp_P+0x28>

000013ea <__cmpsf2>:
    13ea:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_cmp>
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <__cmpsf2+0x8>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	08 95       	ret

000013f4 <__fp_cmp>:
    13f4:	99 0f       	add	r25, r25
    13f6:	00 08       	sbc	r0, r0
    13f8:	55 0f       	add	r21, r21
    13fa:	aa 0b       	sbc	r26, r26
    13fc:	e0 e8       	ldi	r30, 0x80	; 128
    13fe:	fe ef       	ldi	r31, 0xFE	; 254
    1400:	16 16       	cp	r1, r22
    1402:	17 06       	cpc	r1, r23
    1404:	e8 07       	cpc	r30, r24
    1406:	f9 07       	cpc	r31, r25
    1408:	c0 f0       	brcs	.+48     	; 0x143a <__fp_cmp+0x46>
    140a:	12 16       	cp	r1, r18
    140c:	13 06       	cpc	r1, r19
    140e:	e4 07       	cpc	r30, r20
    1410:	f5 07       	cpc	r31, r21
    1412:	98 f0       	brcs	.+38     	; 0x143a <__fp_cmp+0x46>
    1414:	62 1b       	sub	r22, r18
    1416:	73 0b       	sbc	r23, r19
    1418:	84 0b       	sbc	r24, r20
    141a:	95 0b       	sbc	r25, r21
    141c:	39 f4       	brne	.+14     	; 0x142c <__fp_cmp+0x38>
    141e:	0a 26       	eor	r0, r26
    1420:	61 f0       	breq	.+24     	; 0x143a <__fp_cmp+0x46>
    1422:	23 2b       	or	r18, r19
    1424:	24 2b       	or	r18, r20
    1426:	25 2b       	or	r18, r21
    1428:	21 f4       	brne	.+8      	; 0x1432 <__fp_cmp+0x3e>
    142a:	08 95       	ret
    142c:	0a 26       	eor	r0, r26
    142e:	09 f4       	brne	.+2      	; 0x1432 <__fp_cmp+0x3e>
    1430:	a1 40       	sbci	r26, 0x01	; 1
    1432:	a6 95       	lsr	r26
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	81 1d       	adc	r24, r1
    1438:	81 1d       	adc	r24, r1
    143a:	08 95       	ret

0000143c <__ctype_isfalse>:
    143c:	99 27       	eor	r25, r25
    143e:	88 27       	eor	r24, r24

00001440 <__ctype_istrue>:
    1440:	08 95       	ret

00001442 <__muluhisi3>:
    1442:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__umulhisi3>
    1446:	a5 9f       	mul	r26, r21
    1448:	90 0d       	add	r25, r0
    144a:	b4 9f       	mul	r27, r20
    144c:	90 0d       	add	r25, r0
    144e:	a4 9f       	mul	r26, r20
    1450:	80 0d       	add	r24, r0
    1452:	91 1d       	adc	r25, r1
    1454:	11 24       	eor	r1, r1
    1456:	08 95       	ret

00001458 <__prologue_saves__>:
    1458:	2f 92       	push	r2
    145a:	3f 92       	push	r3
    145c:	4f 92       	push	r4
    145e:	5f 92       	push	r5
    1460:	6f 92       	push	r6
    1462:	7f 92       	push	r7
    1464:	8f 92       	push	r8
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	ca 1b       	sub	r28, r26
    1482:	db 0b       	sbc	r29, r27
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	09 94       	ijmp

00001490 <__epilogue_restores__>:
    1490:	2a 88       	ldd	r2, Y+18	; 0x12
    1492:	39 88       	ldd	r3, Y+17	; 0x11
    1494:	48 88       	ldd	r4, Y+16	; 0x10
    1496:	5f 84       	ldd	r5, Y+15	; 0x0f
    1498:	6e 84       	ldd	r6, Y+14	; 0x0e
    149a:	7d 84       	ldd	r7, Y+13	; 0x0d
    149c:	8c 84       	ldd	r8, Y+12	; 0x0c
    149e:	9b 84       	ldd	r9, Y+11	; 0x0b
    14a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    14a2:	b9 84       	ldd	r11, Y+9	; 0x09
    14a4:	c8 84       	ldd	r12, Y+8	; 0x08
    14a6:	df 80       	ldd	r13, Y+7	; 0x07
    14a8:	ee 80       	ldd	r14, Y+6	; 0x06
    14aa:	fd 80       	ldd	r15, Y+5	; 0x05
    14ac:	0c 81       	ldd	r16, Y+4	; 0x04
    14ae:	1b 81       	ldd	r17, Y+3	; 0x03
    14b0:	aa 81       	ldd	r26, Y+2	; 0x02
    14b2:	b9 81       	ldd	r27, Y+1	; 0x01
    14b4:	ce 0f       	add	r28, r30
    14b6:	d1 1d       	adc	r29, r1
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	ed 01       	movw	r28, r26
    14c4:	08 95       	ret

000014c6 <__umulhisi3>:
    14c6:	a2 9f       	mul	r26, r18
    14c8:	b0 01       	movw	r22, r0
    14ca:	b3 9f       	mul	r27, r19
    14cc:	c0 01       	movw	r24, r0
    14ce:	a3 9f       	mul	r26, r19
    14d0:	70 0d       	add	r23, r0
    14d2:	81 1d       	adc	r24, r1
    14d4:	11 24       	eor	r1, r1
    14d6:	91 1d       	adc	r25, r1
    14d8:	b2 9f       	mul	r27, r18
    14da:	70 0d       	add	r23, r0
    14dc:	81 1d       	adc	r24, r1
    14de:	11 24       	eor	r1, r1
    14e0:	91 1d       	adc	r25, r1
    14e2:	08 95       	ret

000014e4 <_exit>:
    14e4:	f8 94       	cli

000014e6 <__stop_program>:
    14e6:	ff cf       	rjmp	.-2      	; 0x14e6 <__stop_program>
